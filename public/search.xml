<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RocketMQ集群搭建</title>
      <link href="/2019/10/09/technology/learningExperience/RocketMq/RocketMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/10/09/technology/learningExperience/RocketMq/RocketMQ%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="RocketMQ集群搭建"><a href="#RocketMQ集群搭建" class="headerlink" title="RocketMQ集群搭建"></a>RocketMQ集群搭建</h1><p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>JDK1.8</li><li>Centos7</li></ul><h2 id="主机-两台"><a href="#主机-两台" class="headerlink" title="主机-两台"></a>主机-两台</h2><ul><li>centos7_1 :172.16.54.130</li><li>centos7_2 :172.16.54.128</li></ul><h2 id="软件资源"><a href="#软件资源" class="headerlink" title="软件资源"></a>软件资源</h2><ul><li>JDK1.8 :<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>RocketMQ4.5.2 :<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip" target="_blank" rel="noopener">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li></ul><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p><h2 id="配置RocketMQ"><a href="#配置RocketMQ" class="headerlink" title="配置RocketMQ"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p><pre class=" language-shell"><code class="language-shell"># unzip rocketmq-all-4.5.2-bin-release.zip</code></pre><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#所属集群名字 </span><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">rocketmq-cluster</span><span class="token comment" spellcheck="true">#broker名字，每队master和slave保持一致</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-a</span><span class="token comment" spellcheck="true">#0 表示 Master，>0 表示 Slave</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">0 </span><span class="token comment" spellcheck="true">#指定主机ip</span><span class="token attr-name">brokerIP1</span> <span class="token punctuation">=</span> <span class="token attr-value">主机IP</span><span class="token comment" spellcheck="true">#nameServer地址，分号分割</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">主机IP:9876;主机IP:9876</span><span class="token comment" spellcheck="true">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span><span class="token attr-name">defaultTopicQueueNums</span><span class="token punctuation">=</span><span class="token attr-value">4</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span><span class="token attr-name">autoCreateTopicEnable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span><span class="token attr-name">autoCreateSubscriptionGroup</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#Broker 对外服务的监听端口 </span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span><span class="token comment" spellcheck="true">#删除文件时间点，默认凌晨 4点</span><span class="token attr-name"> deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token comment" spellcheck="true">#文件保留时间，默认 48 小时 </span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">120</span><span class="token comment" spellcheck="true">#commitLog每个文件的大小默认1G </span><span class="token attr-name">mapedFileSizeCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">1073741824</span><span class="token comment" spellcheck="true">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span><span class="token attr-name">mapedFileSizeConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">300000</span><span class="token comment" spellcheck="true">#检测物理文件磁盘空间</span><span class="token attr-name">diskMaxUsedSpaceRatio</span><span class="token punctuation">=</span><span class="token attr-value">88</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/store</span><span class="token comment" spellcheck="true">#commitLog 存储路径 </span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/store/commitlog</span><span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/store/consumequeue</span><span class="token comment" spellcheck="true">#消息索引存储路径</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/store/index</span><span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/store/checkpoint</span><span class="token comment" spellcheck="true">#Broker 的角色</span><span class="token comment" spellcheck="true">#- ASYNC_MASTER 异步复制Master</span><span class="token comment" spellcheck="true">#- SYNC_MASTER 同步双写Master</span><span class="token comment" spellcheck="true">#- SLAVE </span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token comment" spellcheck="true">#刷盘方式</span><span class="token comment" spellcheck="true">#- ASYNC_FLUSH 异步刷盘</span><span class="token comment" spellcheck="true">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span><span class="token comment" spellcheck="true">#checkTransactionMessageEnable=false</span><span class="token comment" spellcheck="true">#abort 文件存储路径</span><span class="token attr-name">abortFile</span><span class="token punctuation">=</span><span class="token attr-value">/usr/javawork/apache-rocketmq/store/abort</span><span class="token comment" spellcheck="true">#限制的消息大小 maxMessageSize=65536</span></code></pre><p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p><ul><li>2m-2s-async :2个master，2个slave，async异步复制</li><li>2m-2s-sync :2个master，2个slave，sync同步双写</li><li>2m-noslave :2个master,没有slave</li></ul><p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p><h4 id="centos7-1主机编辑如下两个配置文件"><a href="#centos7-1主机编辑如下两个配置文件" class="headerlink" title="centos7_1主机编辑如下两个配置文件"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote><p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p></blockquote><h5 id="broker-a-properties"><a href="#broker-a-properties" class="headerlink" title="broker-a.properties"></a>broker-a.properties</h5><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">DefaultCluster</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-a</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">48</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_MASTER</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">172.16.54.128:9876;172.16.54.130:9876</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">10911</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/master/store</span><span class="token comment" spellcheck="true">#commitLog 存储路径 </span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/master/store/commitlog</span><span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/master/store/consumequeue</span><span class="token comment" spellcheck="true">#消息索引存储路径</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/master/store/index</span><span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/master/store/checkpoint</span></code></pre><p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p><h5 id="broker-a-s-properties"><a href="#broker-a-s-properties" class="headerlink" title="broker-a-s.properties"></a>broker-a-s.properties</h5><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">brokerClusterName</span><span class="token punctuation">=</span><span class="token attr-value">DefaultCluster</span><span class="token attr-name">brokerName</span><span class="token punctuation">=</span><span class="token attr-value">broker-a</span><span class="token attr-name">brokerId</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">deleteWhen</span><span class="token punctuation">=</span><span class="token attr-value">04</span><span class="token attr-name">fileReservedTime</span><span class="token punctuation">=</span><span class="token attr-value">48</span><span class="token attr-name">brokerRole</span><span class="token punctuation">=</span><span class="token attr-value">SLAVE</span><span class="token attr-name">flushDiskType</span><span class="token punctuation">=</span><span class="token attr-value">ASYNC_FLUSH</span><span class="token attr-name">namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">172.16.54.128:9876;172.16.54.130:9876</span><span class="token attr-name">listenPort</span><span class="token punctuation">=</span><span class="token attr-value">20911</span><span class="token comment" spellcheck="true">#存储路径</span><span class="token attr-name">storePathRootDir</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/slave/store</span><span class="token comment" spellcheck="true">#commitLog 存储路径 </span><span class="token attr-name">storePathCommitLog</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/slave/store/commitlog</span><span class="token comment" spellcheck="true">#消费队列存储路径存储路径</span><span class="token attr-name">storePathConsumeQueue</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/slave/store/consumequeue</span><span class="token comment" spellcheck="true">#消息索引存储路径</span><span class="token attr-name">storePathIndex</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/slave/store/index</span><span class="token comment" spellcheck="true">#checkpoint 文件存储路径</span><span class="token attr-name">storeCheckpoint</span><span class="token punctuation">=</span><span class="token attr-value">/usr/local/rocketmq/slave/store/checkpoint</span></code></pre><p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p><h4 id="centos7-2主机编辑如下两个配置文件"><a href="#centos7-2主机编辑如下两个配置文件" class="headerlink" title="centos7_2主机编辑如下两个配置文件"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id="和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。"><a href="#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。" class="headerlink" title="和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id="设置RocketMQ运行的JVM内存-非必须"><a href="#设置RocketMQ运行的JVM内存-非必须" class="headerlink" title="设置RocketMQ运行的JVM内存(非必须)"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote><p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p></blockquote><p>  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p><ul><li>runbroker.sh：找到如下一行配置</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">JAVA_OPT</span><span class="token punctuation">=</span><span class="token attr-value">"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g"</span>改成：<span class="token attr-name">JAVA_OPT</span><span class="token punctuation">=</span><span class="token attr-value">"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m"</span></code></pre><ul><li>runserver.sh: 找到如下一行配置</li></ul><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">JAVA_OPT</span><span class="token punctuation">=</span><span class="token attr-value">"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span>改成：<span class="token attr-name">JAVA_OPT</span><span class="token punctuation">=</span><span class="token attr-value">"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></code></pre><h2 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h2><blockquote><p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p><pre class=" language-shell"><code class="language-shell"># service firewalld stop</code></pre></blockquote><p>  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：</p><ul><li>启动namesrv</li></ul><pre class=" language-shell"><code class="language-shell"># nohup sh mqnamesrv &</code></pre><ul><li>启动broker-master</li></ul><pre class=" language-shell"><code class="language-shell"># nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &</code></pre><ul><li>启动broker-slave</li></ul><pre class=" language-shell"><code class="language-shell"># nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &</code></pre><p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p><h2 id="搭建Console可视化控制台"><a href="#搭建Console可视化控制台" class="headerlink" title="搭建Console可视化控制台"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href="https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：" target="_blank" rel="noopener">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p><pre class=" language-shell"><code class="language-shell"># git clone https://github.com/apache/rocketmq-externals.git</code></pre><p>进去目录：</p><pre class=" language-shell"><code class="language-shell"># cd rocketmq-externals-master/rocketmq-console</code></pre><p>修改配置文件：</p><pre class=" language-shell"><code class="language-shell"># vim src/main/resources/application.properties</code></pre><p>添加两个namesvr的主机ip</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">rocketmq.config.namesrvAddr</span><span class="token punctuation">=</span><span class="token attr-value">172.16.54.128:9876;172.16.54.130:9876</span></code></pre><p>然后进项目跟目录，运行项目</p><pre class=" language-shell"><code class="language-shell"># mvn sprint-boot:run</code></pre><p>浏览器访问：</p><img src="/2019/10/09/technology/learningExperience/RocketMq/RocketMQ集群搭建/rocketmq_console.png" title="可视化Console界面">]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> RocketMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RocketMq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Cli3-11创建项目慢的问题</title>
      <link href="/2019/09/05/technology/dailyIssue/Vue/Cli3-11%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/09/05/technology/dailyIssue/Vue/Cli3-11%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue-Cli3-11创建项目慢的问题"><a href="#Vue-Cli3-11创建项目慢的问题" class="headerlink" title="Vue Cli3.11创建项目慢的问题"></a>Vue Cli3.11创建项目慢的问题</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p><p><img src="/images/vuecreate.png" alt="vuecreate"></p><p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p><h2 id="下载nrm"><a href="#下载nrm" class="headerlink" title="下载nrm"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p><pre class=" language-shell"><code class="language-shell">sudo npm install -g nrm</code></pre><h3 id="测试nrm是否安装成功"><a href="#测试nrm是否安装成功" class="headerlink" title="测试nrm是否安装成功"></a>测试nrm是否安装成功</h3><pre class=" language-shell"><code class="language-shell">nrm -V</code></pre><p>如果输出版本号，则说明安装成功。</p><h2 id="切换npm源"><a href="#切换npm源" class="headerlink" title="切换npm源"></a>切换npm源</h2><pre class=" language-shell"><code class="language-shell">nrm ls</code></pre><p>此命令会列出npm的所有源</p><p><img src="/images/nrmls.png" alt="nrmls"></p><p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p><pre class=" language-shell"><code class="language-shell">nrm use npm</code></pre><p><img src="/images/nrmuse.png" alt="nrmuse"></p><h2 id="再次创建vue项目"><a href="#再次创建vue项目" class="headerlink" title="再次创建vue项目"></a>再次创建vue项目</h2><pre class=" language-shell"><code class="language-shell">vue create rrr2</code></pre><p><img src="/images/vuecreate2.png" alt="vuecreate2"><br><img src="/images/vuecreate3.png" alt="vuecreate3"></p><p>项目成功创建！！！</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> dailyIssue </category>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常踩坑 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker下安装mysql并设置用户权限</title>
      <link href="/2019/09/03/technology/learningExperience/Linux/Docker/Docker%E4%B8%8B%E5%AE%89%E8%A3%85mysql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/"/>
      <url>/2019/09/03/technology/learningExperience/Linux/Docker/Docker%E4%B8%8B%E5%AE%89%E8%A3%85mysql%E5%B9%B6%E8%AE%BE%E7%BD%AE%E7%94%A8%E6%88%B7%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>Ubuntu18.04</p></li><li><p>Docker19.03.1</p></li><li><p>Mysql5.7</p></li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p><pre class=" language-shell"><code class="language-shell">sudo docker pull mysql:5.7            //拉取镜像到本地</code></pre><p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p>{% asset_img dockerpullmysql.png 拉取镜像%}<p>如果显示上面这样，说明已经拉取好了。</p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><pre class=" language-shell"><code class="language-shell">sudo docker images        //查看本地镜像</code></pre><img src="/2019/09/03/technology/learningExperience/Linux/Docker/Docker下安装mysql并设置用户权限/dockerimages.png" title="查看本地镜像"><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><pre class=" language-shell"><code class="language-shell">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</code></pre><ul><li>-d       指定容器运行于后台</li><li>-p       端口映射   主机端口:容器端口</li><li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li><li>-e        容器环境变量</li></ul>{% asset_img dockerrun.png 创建容器%}<p>创建好的话会显示一串随机生产的id</p><h4 id="查看创建好的容器"><a href="#查看创建好的容器" class="headerlink" title="查看创建好的容器"></a>查看创建好的容器</h4><pre class=" language-shell"><code class="language-shell">sudo docker ps -a</code></pre><ul><li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li></ul><img src="/2019/09/03/technology/learningExperience/Linux/Docker/Docker下安装mysql并设置用户权限/dockerps.png" title="查看容器"><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><pre class=" language-shell"><code class="language-shell">sudo docker exec -it mysql5.7 bash</code></pre><ul><li>-i        打开STDIN，用于控制台交互</li><li>-t        分配tty设备，该可以支持终端登录</li></ul>{% asset_img dockerexec.png 进入容器%}<h3 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h3><pre class=" language-shell"><code class="language-shell">mysql -uroot -p</code></pre><p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p><h3 id="创建测试数据库"><a href="#创建测试数据库" class="headerlink" title="创建测试数据库"></a>创建测试数据库</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> test<span class="token punctuation">;</span></code></pre><h3 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">'zmh'</span>@'<span class="token operator">%</span><span class="token string">' identified by '</span>zmh'<span class="token punctuation">;</span></code></pre><p>注：”%”表示可以任意ip访问</p><h3 id="切换mysql用户"><a href="#切换mysql用户" class="headerlink" title="切换mysql用户"></a>切换mysql用户</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">user</span> <span class="token string">'zmh'</span> identified <span class="token keyword">by</span> <span class="token string">'zmh'</span><span class="token punctuation">;</span></code></pre><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> test<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'zmh'</span><span class="token variable">@'%'</span><span class="token punctuation">;</span></code></pre><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><pre class=" language-sql"><code class="language-sql">flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><p>退出mysql命令行</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">exit</span></code></pre><h3 id="客户端连接测试"><a href="#客户端连接测试" class="headerlink" title="客户端连接测试"></a>客户端连接测试</h3><img src="/2019/09/03/technology/learningExperience/Linux/Docker/Docker下安装mysql并设置用户权限/sqlclient.png" title="进入容器"><p>成功！</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p><ul><li>sudo docker start mysql5.7       启动mysql5.7容器</li><li>sudo docker stop mysql5.7        停止mysql5.7容器</li><li>sudo docker restart mysql5.7   重启mysql5.7容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> Linux </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装docker</title>
      <link href="/2019/08/30/technology/learningExperience/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85docker/"/>
      <url>/2019/08/30/technology/learningExperience/Linux/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85docker/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p><h2 id="使用APT源安装docker"><a href="#使用APT源安装docker" class="headerlink" title="使用APT源安装docker"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p><pre class=" language-shell"><code class="language-shell">$sudo apt-get update$sudo apt-get install \     apt-transport-https \     ca-certificates \     curl \     gnupg2 \     lsb-release \     software-properties-common$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</code></pre><h2 id="添加docker-ce-软件源"><a href="#添加docker-ce-软件源" class="headerlink" title="添加docker ce 软件源"></a>添加docker ce 软件源</h2><ul><li><p>首先执行以下一行命令，然后记一下输出的结果</p><pre class=" language-shell"><code class="language-shell">$ echo $(lsb_release -cs)stretch</code></pre></li><li><p>在/etc/apt/sources.list.d目录下新建文件docker.list</p><pre class=" language-shell"><code class="language-shell">$ sudo vi /etc/apt/sources.list.d/docker.list</code></pre></li><li><p>在文件里添加下面这行</p><pre class=" language-shell"><code class="language-shell">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</code></pre></li><li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p><pre class=" language-shell"><code class="language-shell">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</code></pre></li><li><p>保存，退出</p></li></ul><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker ce"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p><pre class=" language-shell"><code class="language-shell">$ sudo apt-get update$ sudo apt-get install docker-ce</code></pre><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><pre class=" language-shell"><code class="language-shell">$ service docker start           启动$ service docker stop            停止$ service docker status          状态$ service docker restart         重启</code></pre>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> 树莓派 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK时区问题</title>
      <link href="/2019/08/27/technology/dailyIssue/Linux/JDK%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/27/technology/dailyIssue/Linux/JDK%E6%97%B6%E5%8C%BA%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p><p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p><hr><ul><li>于是改之,三台容器都输入一下代码</li></ul><pre class=" language-shell"><code class="language-shell">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></pre><p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p><hr><ul><li>于是又查资料，换另外一种设置时区的方法；</li></ul><pre class=" language-shell"><code class="language-shell">vi /etc/sysconfig/clock</code></pre><p>在里面输入如下内容</p><pre class=" language-shell"><code class="language-shell">ZONE="Asia/Shanghai"UTC=falseARC=false</code></pre><p>保存，重启，测试。。。。。发现还是一样,快疯了</p><hr><ul><li>第三种方法，设置TZ环境变量</li></ul><blockquote><p>设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p></blockquote><pre class=" language-shell"><code class="language-shell">export TZ='CST-8'</code></pre><p>保存：然后执行</p><pre class=" language-shell"><code class="language-shell">source .bashrc</code></pre><p>使设置立即生效。</p><p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> dailyIssue </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的==和equals</title>
      <link href="/2019/08/20/technology/learningExperience/Java/Java%E7%9A%84-%E5%92%8Cequals/"/>
      <url>/2019/08/20/technology/learningExperience/Java/Java%E7%9A%84-%E5%92%8Cequals/</url>
      
        <content type="html"><![CDATA[<p>在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；</p><h2 id="首先看看Java的栈空间和堆空间的地址引用"><a href="#首先看看Java的栈空间和堆空间的地址引用" class="headerlink" title="首先看看Java的栈空间和堆空间的地址引用"></a>首先看看Java的栈空间和堆空间的地址引用</h2><img src="/2019/08/20/technology/learningExperience/Java/Java的-和equals/1.png" title="Java栈空间和堆空间"><h2 id="的说明"><a href="#的说明" class="headerlink" title="==的说明"></a>==的说明</h2><p>  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String s1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"t1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"t2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"t3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s5<span class="token operator">=</span><span class="token string">"t3"</span><span class="token punctuation">;</span>        String s6<span class="token operator">=</span><span class="token string">"t3"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s2==s3:"</span><span class="token operator">+</span><span class="token punctuation">(</span>s2<span class="token operator">==</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"s5==s6:"</span><span class="token operator">+</span><span class="token punctuation">(</span>s5<span class="token operator">==</span>s6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><img src="/2019/08/20/technology/learningExperience/Java/Java的-和equals/2.png" title="控制台输出"><blockquote><p>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p></blockquote><h2 id="equals的说明"><a href="#equals的说明" class="headerlink" title="equals的说明"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String anotherString <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>首先它会对比地址，如果地址相等，就直接返回true</li><li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中String判断为空的4大方法比较</title>
      <link href="/2019/08/20/technology/learningExperience/Java/Java%E4%B8%ADString%E5%88%A4%E6%96%AD%E4%B8%BA%E7%A9%BA%E7%9A%844%E5%A4%A7%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"/>
      <url>/2019/08/20/technology/learningExperience/Java/Java%E4%B8%ADString%E5%88%A4%E6%96%AD%E4%B8%BA%E7%A9%BA%E7%9A%844%E5%A4%A7%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h2 id="一-四大方法"><a href="#一-四大方法" class="headerlink" title="一.四大方法"></a>一.四大方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">demo1</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       String a<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>       String a2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token operator">==</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="二-输出结果"><a href="#二-输出结果" class="headerlink" title="二.输出结果"></a>二.输出结果</h2><img src="/2019/08/20/technology/learningExperience/Java/Java中String判断为空的4大方法比较/1.png" title="控制台输出"><blockquote><p>可以看到用”==”判断的那组出现了不一致的情况</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer和int区别</title>
      <link href="/2019/08/19/technology/learningExperience/Java/Integer%E5%92%8Cint%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/08/19/technology/learningExperience/Java/Integer%E5%92%8Cint%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两者本质区别"><a href="#1-两者本质区别" class="headerlink" title="1.两者本质区别"></a>1.两者本质区别</h2><p>  int是Java的基础数据类型之一，而Integer是基于int进行封装的一个对象</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> learningExperience </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法-获取json中指定key的所有值</title>
      <link href="/2019/08/17/technology/algorithm/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95-%E8%8E%B7%E5%8F%96json%E4%B8%AD%E6%8C%87%E5%AE%9Akey%E7%9A%84%E6%89%80%E6%9C%89%E5%80%BC/"/>
      <url>/2019/08/17/technology/algorithm/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95-%E8%8E%B7%E5%8F%96json%E4%B8%AD%E6%8C%87%E5%AE%9Akey%E7%9A%84%E6%89%80%E6%9C%89%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p><h2 id="1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包"><a href="#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包" class="headerlink" title="1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>alibaba<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>fastjson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.2</span><span class="token punctuation">.</span><span class="token number">58</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h2 id="2-创建两个工具类方法，用来判断传入的是不是json对象或json数组"><a href="#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组" class="headerlink" title="2.创建两个工具类方法，用来判断传入的是不是json对象或json数组"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isJSONObj</span><span class="token punctuation">(</span>Object json<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> json <span class="token keyword">instanceof</span> <span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isJSONArray</span><span class="token punctuation">(</span>Object json<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token keyword">return</span> json <span class="token keyword">instanceof</span> <span class="token class-name">JSONArray</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p></blockquote><h2 id="3-建立核心重载方法"><a href="#3-建立核心重载方法" class="headerlink" title="3.建立核心重载方法"></a>3.建立核心重载方法</h2><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getJSONValue</span><span class="token punctuation">(</span>JSONObject json<span class="token punctuation">,</span>String k<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object j<span class="token operator">:</span>json<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isJSONObj</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是对象</span>                JSONObject j2<span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getJSONValue</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span>k<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isJSONArray</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                JSONArray j3<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//是数组</span>                <span class="token function">getJSONValue</span><span class="token punctuation">(</span>j3<span class="token punctuation">,</span>k<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是字符串</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getJSONValue</span><span class="token punctuation">(</span>JSONArray json<span class="token punctuation">,</span>String k<span class="token punctuation">,</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object j<span class="token operator">:</span>json<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isJSONObj</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是对象</span>                JSONObject j2<span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getJSONValue</span><span class="token punctuation">(</span>j2<span class="token punctuation">,</span>k<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isJSONArray</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//是数组</span>                JSONArray j3<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseArray</span><span class="token punctuation">(</span>j<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">getJSONValue</span><span class="token punctuation">(</span>j3<span class="token punctuation">,</span>k<span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的"><a href="#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的" class="headerlink" title="4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><a href="/2019/08/17/technology/algorithm/递归算法-获取json中指定key的所有值/示例json.txt" title="示例json">示例json</a><h2 id="5-调用方法"><a href="#5-调用方法" class="headerlink" title="5.调用方法"></a>5.调用方法</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    File file<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>demo1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"/2.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileInputStream fileInputStream<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>    InputStreamReader inputStreamReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>fileInputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>    BufferedReader bufferedReader<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>inputStreamReader<span class="token punctuation">)</span><span class="token punctuation">;</span>    String line<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>    StringBuffer json<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line<span class="token operator">=</span>bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>        json<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    JSONObject j3<span class="token operator">=</span>JSON<span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>json<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> mid<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getJSONValue</span><span class="token punctuation">(</span>j3<span class="token punctuation">,</span><span class="token string">"interfaceId"</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mid<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="6-成功获取"><a href="#6-成功获取" class="headerlink" title="6.成功获取"></a>6.成功获取</h2><img src="/2019/08/17/technology/algorithm/递归算法-获取json中指定key的所有值/2.png" title="控制台返回"><blockquote><p>demo源码地址：<a href="https://github.com/z573419235/studyDemo" target="_blank" rel="noopener">https://github.com/z573419235/studyDemo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 递归 </tag>
            
            <tag> 算法 </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64影响泰文字段取值问题</title>
      <link href="/2019/08/14/technology/dailyIssue/Java/Base64%E5%BD%B1%E5%93%8D%E6%B3%B0%E6%96%87%E5%AD%97%E6%AE%B5%E5%8F%96%E5%80%BC%E9%97%AE%E9%A2%98/"/>
      <url>/2019/08/14/technology/dailyIssue/Java/Base64%E5%BD%B1%E5%93%8D%E6%B3%B0%E6%96%87%E5%AD%97%E6%AE%B5%E5%8F%96%E5%80%BC%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作"><a href="#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作" class="headerlink" title="今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><blockquote><p>what,日志里面竟然有他们传过来的泰文的值</p></blockquote><h4 id="对比ios和android的数据"><a href="#对比ios和android的数据" class="headerlink" title="对比ios和android的数据"></a>对比ios和android的数据</h4><blockquote><p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p></blockquote><h4 id="确定问题"><a href="#确定问题" class="headerlink" title="确定问题"></a>确定问题</h4><blockquote><p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p></blockquote><h4 id="修复bug"><a href="#修复bug" class="headerlink" title="修复bug"></a>修复bug</h4><blockquote><p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p></blockquote><p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>]]></content>
      
      
      <categories>
          
          <category> technology </category>
          
          <category> dailyIssue </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Base64 </tag>
            
            <tag> 日常踩坑 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
