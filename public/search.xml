<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>创建线程的3种方式</title>
      <link href="/java/thread/create-thread-3/"/>
      <url>/java/thread/create-thread-3/</url>
      
        <content type="html"><![CDATA[<h2 id="Java线程状态变迁图"><a href="#Java线程状态变迁图" class="headerlink" title="Java线程状态变迁图"></a>Java线程状态变迁图</h2><p><img src="http://cdn.mjava.top/blog/20200602150941.jpeg" alt="Java线程状态变迁图"></p><h2 id="构造一个线程"><a href="#构造一个线程" class="headerlink" title="构造一个线程"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p><p><strong>Thread常见参数及设置方法:</strong></p><ul><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程是否是守护线程  默认false</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>     daemon = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//设置方法</span></span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread();</span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程名字默认"Thread-" + nextThreadNum()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String name;</span><br><span class="line"><span class="comment">//设置方法</span></span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread();</span><br><span class="line">thread.setName(<span class="string">"myThread"</span>); <span class="comment">//不能设置为null,会报异常</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程优先级  是否起作用和操作系统及虚拟机版本相关</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line"><span class="comment">//设置方法  范围:1-10  默认5</span></span><br><span class="line">myThread.setPriority(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="Thread源码构造方法"><a href="#Thread源码构造方法" class="headerlink" title="Thread源码构造方法"></a>Thread源码构造方法</h3><p>在Thread源码中,一共提供了<code>9种</code>构造方法.</p><p><img src="http://cdn.mjava.top/blog/20200602151437.png" alt></p><p>从这些构造方法中,大致可以分为<code>有Runnable构造参数</code>的,和<code>无Runnable构造参数</code>两大类,无Runnable构造参数的就需要去继承<code>Thread</code>来重写<code>run()</code>方法<font color="grey">(注:<code>Thread</code>也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</p><h3 id="无返回值的线程"><a href="#无返回值的线程" class="headerlink" title="无返回值的线程"></a>无返回值的线程</h3><p>可以看到,通过集成<code>Thread</code>类和实现<code>Runnable</code>接口的<code>run()</code>方法返回值都是<code>void</code>.这类是没有返回值的</p><h4 id="方法一-继承Thread类创建一个线程"><a href="#方法一-继承Thread类创建一个线程" class="headerlink" title="方法一:继承Thread类创建一个线程"></a>方法一:继承Thread类创建一个线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承Thread类,重写run方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"继承Thread,重写run方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread myThread=<span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二-实现Runnable接口创建线程"><a href="#方法二-实现Runnable接口创建线程" class="headerlink" title="方法二:实现Runnable接口创建线程"></a>方法二:实现Runnable接口创建线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现Runnable方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyRun myRun=<span class="keyword">new</span> MyRun();</span><br><span class="line">        Thread thread=<span class="keyword">new</span> Thread(myRun);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有返回值的线程"><a href="#有返回值的线程" class="headerlink" title="有返回值的线程"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p><h4 id="方法三-通过FutureTask创建一个线程"><a href="#方法三-通过FutureTask创建一个线程" class="headerlink" title="方法三:通过FutureTask创建一个线程"></a>方法三:通过FutureTask创建一个线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//计算1+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyCall myCall=<span class="keyword">new</span> MyCall();</span><br><span class="line">        <span class="comment">//创建异步任务</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask=<span class="keyword">new</span> FutureTask&lt;&gt;(myCall);</span><br><span class="line">        Thread thread2=<span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">//获取线程执行结果</span></span><br><span class="line">        Integer res=futureTask.get();</span><br><span class="line">        System.out.println(res); <span class="comment">//输出2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>吐血整理Git常用命令</title>
      <link href="/tool/git-tool-command/"/>
      <url>/tool/git-tool-command/</url>
      
        <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git 是用于 Linux<a href="https://baike.baidu.com/item/内核" rel="noopener" target="_blank">内核</a>开发的<a href="https://baike.baidu.com/item/版本控制" rel="noopener" target="_blank">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href="https://baike.baidu.com/item/源代码" rel="noopener" target="_blank">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p><a id="more"></a><p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p><h2 id="git结构"><a href="#git结构" class="headerlink" title="git结构"></a>git结构</h2><blockquote><p>网上有 我就不画了</p></blockquote><p><img src="http://cdn.mjava.top/blog/20200605001853.png" alt="git结构图"></p><ul><li><p>workspace    相当于就是我们的本地电脑上的文件</p></li><li><p>Index    缓存区</p></li><li><p>Repository    本地仓库</p></li><li><p>Remote    远程仓库(github/gitlab/gitee)</p></li></ul><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p><p>所以我就整理了一下日常使用的命令</p><p>现在关注微信公招:<code>灰色Code</code></p><p>回复关键字:<code>git</code></p><p>就可以获取思维导图高清图片及导图源地址</p><p><img src="http://cdn.mjava.top/blog/20200605002904.jpg" alt></p>]]></content>
      
      
      <categories>
          
          <category> Tool </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>创建一个自定义注解</title>
      <link href="/spring/apring-aop-ann/"/>
      <url>/spring/apring-aop-ann/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p><h2 id="写一个注解"><a href="#写一个注解" class="headerlink" title="写一个注解"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p><h3 id="创建注解类"><a href="#创建注解类" class="headerlink" title="创建注解类"></a>创建注解类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "d"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p><p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 字段声明（包括枚举常量）*/</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 方法声明*/</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造函数声明 */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 局部变量声明 */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 注释类型声明 */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 包声明 */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型参数声明</span></span><br><span class="line"><span class="comment">     * java8新特性：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何类型声明 </span></span><br><span class="line"><span class="comment">     * java8新特性：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注释将被编译器丢弃。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注释由编译器记录在类文件中</span></span><br><span class="line"><span class="comment">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *注释由编译器记录在类文件中，并且</span></span><br><span class="line"><span class="comment">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个切面类"><a href="#写一个切面类" class="headerlink" title="写一个切面类"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnAop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.demo.annotation.MyAnn)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ann</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"ann()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"打印：开始前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"ann()"</span>,returning = <span class="string">"res"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">dochange</span><span class="params">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"AfterReturning通知开始-获取数据:&#123;&#125;"</span>,res);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class="line">        <span class="comment">//添加新值</span></span><br><span class="line">        map.put(<span class="string">"s1"</span>,<span class="string">"我是在AOP中添加的新值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-AOP说明"><a href="#Spring-AOP说明" class="headerlink" title="Spring AOP说明"></a>Spring AOP说明</h3><blockquote><p>具体可以查阅Spring AOP相关资料</p></blockquote><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Before</code></td><td>前置通知，在连接点方法前调用</td></tr><tr><td><code>@Around</code></td><td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td></tr><tr><td><code>@After</code></td><td>后置通知，在连接点方法后调用</td></tr><tr><td><code>@AfterReturning</code></td><td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td></tr><tr><td><code>@AfterThrowing</code></td><td>异常通知，当连接点方法异常时调用</td></tr></tbody></table><h2 id="使用自定义的注解"><a href="#使用自定义的注解" class="headerlink" title="使用自定义的注解"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnn</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt;  map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"t1"</span>,<span class="string">"我是在Service设置的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制层</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; s=testService.test();</span><br><span class="line">        logger.info(<span class="string">"控制层输出：&#123;&#125;"</span>,s.get(<span class="string">"s1"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class="line">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; s=<span class="keyword">this</span>.test2();</span><br><span class="line">        logger.info(<span class="string">"控制层输出：&#123;&#125;"</span>,s.get(<span class="string">"s1"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnn</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt;  map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"t1"</span>,<span class="string">"我是在控制层设置的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure><p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p><p>具体参考资料：</p><ul><li><a href="https://blog.csdn.net/Daybreak1209/article/details/82982674" rel="noopener" target="_blank">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li><li><a href="https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" rel="noopener" target="_blank">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li><li><a href="https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/" rel="noopener" target="_blank">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring AOP </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM4种垃圾收集算法</title>
      <link href="/java/jvm/jvm-gc-alg/"/>
      <url>/java/jvm/jvm-gc-alg/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><ul><li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li><li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li></ul><a id="more"></a><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li><li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li><li><img src="http://cdn.mjava.top/blog/20200529100358.png" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528203926.jpeg" alt="标记清除算法"></p><h2 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h2><ul><li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p></li><li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p></li><li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p></li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li><li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li><li><img src="http://cdn.mjava.top/blog/20200529100420.jpg" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528203952.jpeg" alt="标记复制算法"></p><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><ul><li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li><li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li><li><img src="http://cdn.mjava.top/blog/20200529100506.jpg" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528204014.jpeg" alt="标记整理算法"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p><blockquote><p><font color="red">老年代:新生代=2:1</font></p></blockquote><p><img src="http://cdn.mjava.top/blog/20200529101100.png" alt></p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><blockquote><p>堆大小默认比例:<font color="red">Eden:S0:S1=8:1:1</font></p><p>采用标记-复制算法</p></blockquote><p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)</strong>和<strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><blockquote><p>采用标记-整理法或标记-清理法</p></blockquote><p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA四种引用方法使用和对比</title>
      <link href="/java/jvm/jvm-object-four-quote/"/>
      <url>/java/jvm/jvm-object-four-quote/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/blog/20200526225718" alt></p><h2 id="强引用（Strongly-Reference）"><a href="#强引用（Strongly-Reference）" class="headerlink" title="强引用（Strongly Reference）"></a>强引用（Strongly Reference）</h2><blockquote><p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p><p><font color="red">回收时机:强引用关系不存在时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h2><blockquote><p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><p><font color="red">回收时机:发送内存溢出异常前</font></p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//软引用</span></span><br><span class="line"></span><br><span class="line">SoftReference&lt;Object&gt; srf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; srf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj=<span class="keyword">null</span>;  <span class="comment">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure><h3 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h3><blockquote><p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p><p><font color="red">回收时机:下一次垃圾回收时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弱引用</span></span><br><span class="line"></span><br><span class="line">WeakReference&lt;Object&gt; wrf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wrf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h3><blockquote><p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p><p><font color="red">回收时机:随时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//虚引用</span></span><br><span class="line">PhantomReference&lt;Object&gt; prf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(<span class="keyword">new</span> Object(), <span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; prf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj, <span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM判断对象是否还活着的两种方法</title>
      <link href="/java/jvm/jvm-object-is-alive/"/>
      <url>/java/jvm/jvm-object-is-alive/</url>
      
        <content type="html"><![CDATA[<h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><blockquote><p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p></blockquote><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>原理简单,判定效率高</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不能用于复杂的环境中,比如对象的互相引用问题</li></ul><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><a id="more"></a><blockquote><p>Java虚拟机使用此算法来判断对象是否存活</p></blockquote><p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p><p><img src="http://cdn.mjava.top/blog/20200526224246.jpeg" alt></p><p>Java中作为GC Roots的对象:</p><ul><li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p></li><li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p></li><li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p></li><li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p></li><li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p></li><li><p>所有被同步锁（synchronized关键字）持有的对象。</p></li><li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p></li><li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM运行时数据区域</title>
      <link href="/java/jvm/jvm-running-data-area/"/>
      <url>/java/jvm/jvm-running-data-area/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h1><p><img src="http://cdn.mjava.top/blog/20200526000623.jpeg" alt="Java虚拟机运行时数据区"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li><p>线程私有</p></li><li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p></li><li><p>它可以看作是当前线程所执行的字节码的行号指示器</p></li><li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p></li></ul><a id="more"></a><blockquote><p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p><p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p><p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p><p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p><p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p><p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 </p></blockquote><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul><li>线程私有</li><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li><li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color="red">HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li><li><strong>-Xss5m</strong>:    设置5m的栈容量</li><li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li><p>线程私有</p></li><li><p>与Java虚拟机栈相似</p></li><li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p></li><li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p></li><li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p></li></ul><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><ul><li>线程共享</li><li>所有的Java对象实例不一定都在Java堆上分配内存</li><li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li><li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li><li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li><p>线程共享</p></li><li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p></li><li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p></li><li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p><ul><li>-XX:MaxPermSize    设置永久代内存上限</li><li>-XX:PermSize    设置永久代内存</li></ul></li><li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p></li></ul><ul><li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p></li><li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM逃逸分析技术</title>
      <link href="/java/jvm/jvm-javastack-EscapeAnalysis/"/>
      <url>/java/jvm/jvm-javastack-EscapeAnalysis/</url>
      
        <content type="html"><![CDATA[<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p><p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li><li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li></ul><a id="more"></a><h2 id="逃逸程度"><a href="#逃逸程度" class="headerlink" title="逃逸程度"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p><h3 id="方法逃逸"><a href="#方法逃逸" class="headerlink" title="方法逃逸"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class="line"><span class="comment">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class="line"><span class="comment">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">     StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     sb.append(s1);</span><br><span class="line">     sb.append(s2);</span><br><span class="line">     <span class="keyword">return</span> sb;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">     StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     sb.append(s1);</span><br><span class="line">     sb.append(s2);</span><br><span class="line">     <span class="keyword">return</span> sb.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="线程逃逸"><a href="#线程逃逸" class="headerlink" title="线程逃逸"></a>线程逃逸</h3><ul><li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li></ul><h2 id="逃逸分析优化"><a href="#逃逸分析优化" class="headerlink" title="逃逸分析优化"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p><h3 id="栈上分配（Stack-Allocations）"><a href="#栈上分配（Stack-Allocations）" class="headerlink" title="栈上分配（Stack Allocations）"></a>栈上分配（Stack Allocations）</h3><ul><li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li><li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li><li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li></ul><h3 id="标量替换（Scalar-Replacement）"><a href="#标量替换（Scalar-Replacement）" class="headerlink" title="标量替换（Scalar Replacement）"></a>标量替换（Scalar Replacement）</h3><ul><li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li><li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li><li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li><li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li><li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li><li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li></ul><h3 id="同步消除（Synchronization-Elimination）"><a href="#同步消除（Synchronization-Elimination）" class="headerlink" title="同步消除（Synchronization Elimination）"></a>同步消除（Synchronization Elimination）</h3><blockquote><p>也叫锁消除</p></blockquote><ul><li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li><li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li><li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li></ul>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringCloud搭建Spring-security-oauth认证服务器</title>
      <link href="/archive/web-security/spring-security-oauth-server-demo/"/>
      <url>/archive/web-security/spring-security-oauth-server-demo/</url>
      
        <content type="html"><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p><p>所以事先要准备好：</p><ul><li>Redis</li><li>Mysql</li></ul><p>并且Mysql执行<a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql" rel="noopener" target="_blank">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">oauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">(<span class="string">"sunline"</span>,<span class="string">"&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG"</span>,<span class="string">"password"</span>,<span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>{bcrypt}</code></p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--security-oauth--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">zmh</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zmh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9991</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/oauthServer</span></span><br></pre></td></tr></table></figure><h3 id="创建用户详情服务类"><a href="#创建用户详情服务类" class="headerlink" title="创建用户详情服务类"></a>创建用户详情服务类</h3><p><img src="http://cdn.mjava.top/blog/20200519194059.png" alt></p><h4 id="创建权限控制类"><a href="#创建权限控制类" class="headerlink" title="创建权限控制类"></a>创建权限控制类</h4><p><img src="http://cdn.mjava.top/blog/20200519194128.png" alt></p><h3 id="创建认证授权类"><a href="#创建认证授权类" class="headerlink" title="创建认证授权类"></a>创建认证授权类</h3><p><img src="http://cdn.mjava.top/blog/20200519194207.png" alt></p><h2 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194446.png" alt></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accessToken"</span>: <span class="string">"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086"</span>,</span><br><span class="line">    <span class="attr">"expiration"</span>: <span class="string">"2020-05-19T21:11:39.883+0000"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: [</span><br><span class="line">        <span class="string">"all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tokenType"</span>: <span class="string">"bearer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问资源"><a href="#访问资源" class="headerlink" title="访问资源"></a>访问资源</h3><p>带上获取到的令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194803.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> web-security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth </tag>
            
            <tag> spring-security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSO单点登录和CAS框架</title>
      <link href="/archive/web-security/sso-and-cas/"/>
      <url>/archive/web-security/sso-and-cas/</url>
      
        <content type="html"><![CDATA[<h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href="https://zh.wikipedia.org/wiki/存取控制" rel="noopener" target="_blank">访问控制</a>的属性。当拥有这项属性时，当用户<a href="https://zh.wikipedia.org/wiki/登入" rel="noopener" target="_blank">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href="https://zh.wikipedia.org/wiki/轻型目录访问协议" rel="noopener" target="_blank">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p><a id="more"></a><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用单点登录的好处包括：</p><ul><li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li><li>减少因不同的用户名和密码组合而带来的<a href="https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1" rel="noopener" target="_blank">密码疲劳</a>。</li><li>减少为相同的身份重新输入密码所花费的时间。</li><li>因减少与密码相关的调用IT<a href="https://zh.wikipedia.org/wiki/服务台" rel="noopener" target="_blank">服务台</a>的次数而降低IT成本。<a href="https://zh.wikipedia.org/wiki/單一登入#cite_note-1" rel="noopener" target="_blank">[1]</a></li></ul><p>SSO为所有其它应用程序和系统，以集中的<a href="https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1" rel="noopener" target="_blank">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p><h2 id="CAS框架"><a href="#CAS框架" class="headerlink" title="CAS框架"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><p>CAS是由<a href="https://zh.wikipedia.org/wiki/耶鲁大学" rel="noopener" target="_blank">耶鲁大学</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1" rel="noopener" target="_blank">[1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p></li><li><p>2004年12月，CAS成为<a href="https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1" rel="noopener" target="_blank">Jasig</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2" rel="noopener" target="_blank">[2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p></li><li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p></li><li><p>2006年12月，<a href="https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1" rel="noopener" target="_blank">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。<a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3" rel="noopener" target="_blank">[3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p></li><li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p></li><li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> WebSecurity </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSO </tag>
            
            <tag> CAS框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth2.0与JWT</title>
      <link href="/archive/web-security/oauth-and-jwt/"/>
      <url>/archive/web-security/oauth-and-jwt/</url>
      
        <content type="html"><![CDATA[<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>客户端：相当于访问受保护资源的软件</li><li>授权服务器：授予客户端令牌的服务</li><li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li><li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li></ul><a id="more"></a><h3 id="授权类型"><a href="#授权类型" class="headerlink" title="授权类型"></a>授权类型</h3><h4 id="授权码许可类型"><a href="#授权码许可类型" class="headerlink" title="授权码许可类型"></a>授权码许可类型<img src="http://cdn.mjava.top/blog/20200512090246.jpg" alt="授权码许可类型"></h4><hr><h4 id="隐式许可类型"><a href="#隐式许可类型" class="headerlink" title="隐式许可类型"></a>隐式许可类型<img src="http://cdn.mjava.top/blog/20200512135621.jpg" alt="隐式许可类型"></h4><hr><h4 id="客户端凭证许可类型"><a href="#客户端凭证许可类型" class="headerlink" title="客户端凭证许可类型"></a>客户端凭证许可类型<img src="http://cdn.mjava.top/blog/20200512135605.jpg" alt="客户端凭证许可类型"></h4><hr><h4 id="资源拥有者凭证许可类型-账号密码模式"><a href="#资源拥有者凭证许可类型-账号密码模式" class="headerlink" title="资源拥有者凭证许可类型(账号密码模式)"></a>资源拥有者凭证许可类型(账号密码模式)<img src="http://cdn.mjava.top/blog/20200512135635.jpg" alt="资源拥有者凭证许可类型(账号密码模式)"></h4><hr><h4 id="断言许可类型"><a href="#断言许可类型" class="headerlink" title="断言许可类型"></a>断言许可类型<img src="http://cdn.mjava.top/blog/20200512135531.jpg" alt="断言许可类型"></h4><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p><p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p><ul><li>注册声明：JWT官方提供的声明，参考资料:<a href="https://tools.ietf.org/html/rfc7519#section-4.1" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.1</a></li><li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href="https://tools.ietf.org/html/rfc7519#section-4.2" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.2</a></li><li>私有声明：完全用户自定义，参考资料<a href="https://tools.ietf.org/html/rfc7519#section-4.3" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.3</a></li></ul><p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>]]></content>
      
      
      <categories>
          
          <category> Web-Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OAuth2.0 </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastDFS安装使用教程</title>
      <link href="/linux/linux-fastdfs-install/"/>
      <url>/linux/linux-fastdfs-install/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><a id="more"></a><ul><li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p></li><li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p></li><li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p></li><li><p>结构图<img src="http://cdn.mjava.top/blog/20200507152801.webp" alt></p></li></ul><ul><li>上传文件流程<img src="http://cdn.mjava.top/blog/20200507152857.webp" alt></li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><table><thead><tr><th>系统及软件版本</th><th>Git开源地址</th></tr></thead><tbody><tr><td>Centos 7</td><td>#</td></tr><tr><td>libfastcommon V1.0.43</td><td><a href="https://github.com/happyfish100/fastdfs" rel="noopener" target="_blank">https://github.com/happyfish100/fastdfs</a></td></tr><tr><td>fastdfs V6.06</td><td><a href="https://github.com/happyfish100/libfastcommon" rel="noopener" target="_blank">https://github.com/happyfish100/libfastcommon</a></td></tr></tbody></table><blockquote><p>我虚拟机装的Centos7的ip地址是172.16.54.137</p></blockquote><h2 id="安装前工作"><a href="#安装前工作" class="headerlink" title="安装前工作"></a>安装前工作</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote><p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure><h3 id="下载所需安装包"><a href="#下载所需安装包" class="headerlink" title="下载所需安装包"></a>下载所需安装包</h3><ul><li>libfastcommon</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure><ul><li>fastDFS</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装fastDFS环境"><a href="#安装fastDFS环境" class="headerlink" title="安装fastDFS环境"></a>安装fastDFS环境</h3><ul><li>解压安装<code>libfastcommon</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><h2 id="安装fastDFS"><a href="#安装fastDFS" class="headerlink" title="安装fastDFS"></a>安装fastDFS</h2><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><blockquote><p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p><ul><li>client.conf.sample    fastDFS客户端配置文件</li><li>storage.conf.sample</li><li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li><li>tracker.conf.sample</li></ul></blockquote><h3 id="配置并启动Tracker"><a href="#配置并启动Tracker" class="headerlink" title="配置并启动Tracker"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure><p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Tracker</span></span><br><span class="line">service fdfs_trackerd start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Tracker</span></span><br><span class="line">service fdfs_trackerd stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure><h3 id="配置并启动Storage"><a href="#配置并启动Storage" class="headerlink" title="配置并启动Storage"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure><p>修改<code>storage.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存放文件地址</span></span><br><span class="line">store_path0=/data/fastdfs/file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Storage</span></span><br><span class="line">service fdfs_storaged start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Storage</span></span><br><span class="line">service fdfs_storaged stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure><h3 id="上传文件测试"><a href="#上传文件测试" class="headerlink" title="上传文件测试"></a>上传文件测试</h3><blockquote><p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">复制一份客户端配置文件</span></span><br><span class="line">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure><p>修改<code>client.config</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/client</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">上传成功后返回</span></span><br><span class="line">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/20200506215501.png" alt></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote><p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p></blockquote><p>首先创建一个文件夹，存放nginx的配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件夹</span></span><br><span class="line">mkdir -p /data/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">进入文件夹并下载nginx配置文件</span></span><br><span class="line">cd /data/nginx &amp;&amp; wget http://cdn.mjava.top/file/nginx.conf</span><br></pre></td></tr></table></figure><blockquote><p>配置文件已经修改过了，直接下载即可使用</p></blockquote><p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure><p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class="line">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p><p><img src="http://cdn.mjava.top/blog/20200507132841.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> fastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>插入emoji到mysql时提示了一个表里不存在的字段的错误</title>
      <link href="/mysql/mysql-utf8mb4-error/"/>
      <url>/mysql/mysql-utf8mb4-error/</url>
      
        <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\xF0\x9F\x98\x98' for column 'user_name' at row 14</span><br></pre></td></tr></table></figure><a id="more"></a><p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p><h2 id="２-解决方案"><a href="#２-解决方案" class="headerlink" title="２.解决方案"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p><p><img src="http://cdn.mjava.top/blog/20200429171012.png" alt></p><p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p><p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pit </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【数据结构】手写平衡二叉树（AVL）</title>
      <link href="/algorithm/algorithm-avltree-01/"/>
      <url>/algorithm/algorithm-avltree-01/</url>
      
        <content type="html"><![CDATA[<h1 id="【数据结构】手写平衡二叉树（AVL）"><a href="#【数据结构】手写平衡二叉树（AVL）" class="headerlink" title="【数据结构】手写平衡二叉树（AVL）"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src="http://cdn.mjava.top/blog/20200201165139.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p><p>本文源代码：<a href="https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java" rel="noopener" target="_blank">手写AVL树</a></p></blockquote><h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href="https://baike.baidu.com/item/平衡二叉树/10421057" rel="noopener" target="_blank">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p><a id="more"></a><h3 id="平衡二叉树基本特点"><a href="#平衡二叉树基本特点" class="headerlink" title="平衡二叉树基本特点"></a>平衡二叉树基本特点</h3><ul><li>左右子树深度差不能大于1</li><li>左边子树永远比根节点小</li><li>右边子树永远比根节点大</li></ul><h3 id="平衡二叉树基本结构及操作"><a href="#平衡二叉树基本结构及操作" class="headerlink" title="平衡二叉树基本结构及操作"></a>平衡二叉树基本结构及操作</h3><ul><li>左左结构——右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153234.jpg" alt="左左结构"></p><ul><li>右右结构——左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153301.jpg" alt="右右结构"></p><ul><li>左右结构——左子先左旋，然后整体右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153329.jpg" alt="左右结构"></p><ul><li>右左结构——右子先右旋，然后整体左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153403.jpg" alt="右左结构"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node rootNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二叉树节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Node parent; <span class="comment">//父</span></span><br><span class="line">        <span class="keyword">public</span> Node left;<span class="comment">//左子树</span></span><br><span class="line">        <span class="keyword">public</span> Node right;<span class="comment">//右子树</span></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> data;<span class="comment">//存放的数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> depth;<span class="comment">//深度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> balance;<span class="comment">//平衡因子</span></span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data=data;</span><br><span class="line">            <span class="keyword">this</span>.depth=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.balance=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>暴露一个方法给外部调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**添加数据方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootNode=<span class="keyword">new</span> Node(data);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.insert(rootNode,data);</span><br><span class="line">        <span class="comment">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode.parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rootNode=<span class="keyword">this</span>.rootNode.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际内部是调用另一个<code>insert</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//插入的数据比根小</span></span><br><span class="line">    <span class="keyword">if</span> (data&lt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            root.left=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.left.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.left,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入的数据比根大</span></span><br><span class="line">    <span class="keyword">if</span> (data&gt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right==<span class="keyword">null</span>) &#123;</span><br><span class="line">            root.right=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.right.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.right,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.balance&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断左子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.left.balance&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.leftTurn(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.rightTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.balance&lt;-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断右子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.right.balance&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightTurn(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leftTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    root.depth=<span class="keyword">this</span>.getDepth(root);</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><blockquote><p>右旋的操作如下</p><ul><li>我父变成左子的父</li><li>左子变成我的父</li><li>我变成左子的右子</li><li>左子的右子变成我的左子</li><li>(当左子的右子存在时)我变成左子的右子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node leftSon=node.left;</span><br><span class="line">    Node leftSon_rightSon=leftSon.right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            <span class="comment">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class="line">            parent.left=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            <span class="comment">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class="line">            parent.right=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    leftSon.parent=parent;</span><br><span class="line">    node.parent=leftSon;</span><br><span class="line">    leftSon.right=node;</span><br><span class="line">    node.left=leftSon_rightSon;</span><br><span class="line">    <span class="comment">//如果左子的右子确实存在的</span></span><br><span class="line">    <span class="keyword">if</span> (leftSon_rightSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//我变成左子的右子的父</span></span><br><span class="line">        leftSon_rightSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新计算深度和平衡因子</span></span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    leftSon.depth=<span class="keyword">this</span>.getDepth(leftSon);</span><br><span class="line">    leftSon.balance=<span class="keyword">this</span>.getBalance(leftSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><blockquote><p>左旋的操作如下</p><ul><li>我的父变右子的父</li><li>右子变成我的父</li><li>我变成右子的左子</li><li>右子的左子变成我的右子</li><li>(当右子的左子存在时)我变成右子的左子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node rightSon=node.right;</span><br><span class="line">    Node rightSon_leftSon=rightSon.left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            parent.left=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            parent.right=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rightSon.parent=parent;</span><br><span class="line">    node.parent=rightSon;</span><br><span class="line">    rightSon.left=node;</span><br><span class="line">    node.right=rightSon_leftSon;</span><br><span class="line">    <span class="keyword">if</span> (rightSon_leftSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightSon_leftSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    rightSon.depth=<span class="keyword">this</span>.getDepth(rightSon);</span><br><span class="line">    rightSon.balance=<span class="keyword">this</span>.getBalance(rightSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算深度"><a href="#计算深度" class="headerlink" title="计算深度"></a>计算深度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算深度*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right==<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right!=<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class="line">    &#125;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算平衡因子"><a href="#计算平衡因子" class="headerlink" title="计算平衡因子"></a>计算平衡因子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算左右深度差*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        leftDepth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightDepth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *      左减右</span></span><br><span class="line"><span class="comment">         * 为负数：右边子树高</span></span><br><span class="line"><span class="comment">         * 为正数: 左边子树高</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">    <span class="keyword">return</span> leftDepth-rightDepth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p><ul><li><p><a href="https://visualgo.net/zh" rel="noopener" target="_blank">visualgo在线</a></p></li><li><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" rel="noopener" target="_blank">数据结构可视化</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> AVL </tag>
            
            <tag> 平衡二叉树 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【转】免费可商用，最值得收藏的10个插画素材网站</title>
      <link href="/recommend/recommend-tool-1/"/>
      <url>/recommend/recommend-tool-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="http://liujinkai.com/2019/10/18/10-best-free-illustration/" rel="noopener" target="_blank">凯凯刘</a></p></blockquote><p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p><a id="more"></a><h2 id="IRA-Design"><a href="#IRA-Design" class="headerlink" title="IRA Design"></a>IRA Design</h2><p>网站：<a href="https://iradesign.io/" rel="noopener" target="_blank">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p><p><img src="http://cdn.mjava.top/blog/20200116092835.png" alt></p><h2 id="Absurd-Design"><a href="#Absurd-Design" class="headerlink" title="Absurd Design"></a>Absurd Design</h2><p>网站：<a href="https://absurd.design/" rel="noopener" target="_blank">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p><p><img src="http://cdn.mjava.top/blog/20200116092907.png" alt></p><h2 id="Ouch"><a href="#Ouch" class="headerlink" title="Ouch!"></a>Ouch!</h2><p>网站：<a href="https://icons8.com/ouch" rel="noopener" target="_blank">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p><p><img src="http://cdn.mjava.top/blog/20200116092945.png" alt></p><h2 id="unDraw"><a href="#unDraw" class="headerlink" title="unDraw"></a>unDraw</h2><p>网站：<a href="https://undraw.co/" rel="noopener" target="_blank">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p><p><img src="http://cdn.mjava.top/blog/20200116093011.png" alt></p><h2 id="Pngtree"><a href="#Pngtree" class="headerlink" title="Pngtree"></a>Pngtree</h2><p>网站：<a href="https://pngtree.com/" rel="noopener" target="_blank">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p><p><img src="http://cdn.mjava.top/blog/20200116093038.png" alt></p><h2 id="Drawkit"><a href="#Drawkit" class="headerlink" title="Drawkit"></a>Drawkit</h2><p>网站：<a href="https://www.drawkit.io/" rel="noopener" target="_blank">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p><p><img src="http://cdn.mjava.top/blog/20200116093103.png" alt></p><h2 id="Humaaans"><a href="#Humaaans" class="headerlink" title="Humaaans"></a>Humaaans</h2><p>网站：<a href="https://www.humaaans.com/" rel="noopener" target="_blank">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p><p><img src="http://cdn.mjava.top/blog/20200116093137.png" alt></p><h2 id="Manypixels"><a href="#Manypixels" class="headerlink" title="Manypixels"></a>Manypixels</h2><p>网站：<a href="https://www.manypixels.co/gallery/" rel="noopener" target="_blank">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093201.png" alt></p><h2 id="Lukaszadam"><a href="#Lukaszadam" class="headerlink" title="Lukaszadam"></a>Lukaszadam</h2><p>网站：<a href="https://lukaszadam.com/illustrations" rel="noopener" target="_blank">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093226.png" alt></p><h2 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a>Pixabay</h2><p>网站：<a href="https://pixabay.com/illustrations/search/" rel="noopener" target="_blank">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p><p><img src="http://cdn.mjava.top/blog/20200116093253.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Recommend </category>
          
      </categories>
      
      
        <tags>
            
            <tag> UI </tag>
            
            <tag> 推荐 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码解析】你真的了解ArrayDeque嘛？</title>
      <link href="/java/java-arraydeque-source-1/"/>
      <url>/java/java-arraydeque-source-1/</url>
      
        <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上篇文章说<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>也可以实现<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,因为他层是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">数组</strong>，而队列和栈都是只要<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>都是通过实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口来获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口通过继承<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">双端队列</code>，由此可以获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。为了空间能得到充分利用，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>使用了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>；还有<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>可以插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值，而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的。</p><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是双端队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">一般队列是这样的：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104246.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">双端队列是这样的</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104215.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是循环队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104300.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p></blockquote><h2 id="hdeque" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">Deque有什么？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">话不多说，看图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107134323.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107232905.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这边队列的每种功能都有两个方法，其中<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">remove()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">element()</code>如果操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">offer()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">poll()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peek()</code>操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">返回null或者false</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">其实真正用到的就<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addLast()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">pollFirst</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">getFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peekFirst</code>；</p><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">ArrayDeque内部就只有4个变量，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">对象数组element[]</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头指针head</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">尾指针tail</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107235523.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">构造方法和其他集合一样，有<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">有参构造</strong>和<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">无参构造</strong></p><h3 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">很简单，直接初始化一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">容量为16</strong>的对象数组</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">16</span>];<br>}<br></code></pre><h3 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造</span></h3><h4 id="hint" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入参数为int数</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">void</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">allocateElements</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">calculateSize(int numElements)</strong>调整传入的值大小</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003104.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>这个算法</strong></p><h4 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入的参数为集合对象</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">第一步调用了和上面一样的方法，这里多了个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addAll()</code>方法</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">addAll(Collection<!--? extends E--> c)</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这边复制时并没有用和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">System.arraycopy()</code>方法，而是采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">for循环</code>来调用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值的，而其他集合里面有的是可以传<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的，所以这边采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>一个一个的加，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法如果传入的值为空的话，就会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p></blockquote><h2 id="haddlast" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addLast()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">核心算法</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">举一些例子：当<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">8</span></span></span></span>，<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">7</span></span></span></span></p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">0&amp;7=0</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108095155.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">doubleCapacity()</strong>扩容为原来的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108103710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">方便理解，我画下上扩容的流程图，比如head在中间：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108112208.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hpollfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">pollFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">移除头部数据</p><h3 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114243.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">删除的时候并没有像<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样移动数据，而只是移动了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的位置</p></blockquote><h3 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114844.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hgetfirstpeekfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">getFirst()和peekFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这两个方法都是一样的，都是直接返回<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的数据，区别就是一个会抛异常，一个不会</p><h3 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码分析</span></h3><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">getFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">getFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">@SuppressWarnings</span>(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"unchecked"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">if</span>&nbsp;(result&nbsp;==&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">throw</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;result;<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">peekFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">peekFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre><h2 id="haddfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108131919.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里还是用了上面讲了位与算法，算出<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>的值，然后插入数据</p><h3 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108133154.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">清空这个操作是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的元素开始删除，直到<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>=<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">tail</code>，清空完成；</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108134034.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hsize" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">size()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>一样定义个size不好嘛？<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">size</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br>}<br></code></pre><h2 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面的方法基本上有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">核心算法：</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href="https://mjava.top/java/java-arraylist-source-1" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>每次扩容为原来数组长度的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码解析 </tag>
            
            <tag> ArrayDeque </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码解析】想了解LinkedList？看这篇文章就对了</title>
      <link href="/java/java-linkedlist-source-1/"/>
      <url>/java/java-linkedlist-source-1/</url>
      
        <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">本文基于JDK1.8</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>由于实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口，所以可以当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>使用。不过一般要用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>或<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>的时候推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,所以这里就不讲<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href="https://mjava.top/java/java-arraylist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>一样，讲些常用的方法。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部是由<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">双链表</strong>组成的，里面存放着一个个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>又包含三个元素(<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>):</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据</li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">链表的第一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，最后个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code></p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">我简单的画了一张图，可以看下</p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213058.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">本文内容</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104164627.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">相比于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Arraylist</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部变量就少得多，就只有三个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>存这当前元素的个数，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">first</code>指向链表的第一个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">last</code>指向列表的最后一个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104170249.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造方法</span></h3><h4 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre><h4 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">无参构造只是初始化了数据，并未做任何操作<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">(初始化  size=0  first=null   last=null)</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104172851.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造方法</span></h3><h4 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;oldList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre><h4 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104174143.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hget" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hgetintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get(int index)</span></h3><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p></blockquote><h4 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰2"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰3"</span>);<br>list.get(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">2</span>);<br></code></pre><h4 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183636.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkElementIndex(int index)</strong>检查越界</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183853.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183939.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">node(int index)</strong>查找Node</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200109160648.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hadd" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="haddee" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(E e)</span></h3><h4 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175255.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkLast(E e)</strong>连接最后一个元素</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175907.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">Node&lt;E&gt;</strong>内部类</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">就像开头说的，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>里有三个，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">static</span>&nbsp;<span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">class</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">Node</span>&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><h4 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">第一次添加时的流程示意图</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224556.jpg" alt="第一次添加时的流程示意图" title="第一次添加时的流程示意图" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">第一次添加时的流程示意图</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">不是第一次添加</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213234.jpg" alt="不是第一次添加" title="不是第一次添加" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">不是第一次添加</figcaption></figure><h3 id="haddintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(int index, E element)</span></h3><h4 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hk"</span>);<br></code></pre><h4 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104185743.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkPositionIndex(int index)</strong>检查是否越界</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>的，因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">linkedList</code>的索引设计也是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">0</code>开始的，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">所以size永远比索引大1</strong></p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190000.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190144.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104191607.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-17" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面说的可能有点绕，看看流程图就明白了，哈哈</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为第一个</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213757.jpg" alt="添加的位置为第一个" title="添加的位置为第一个" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为第一个</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为中间</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213437.jpg" alt="添加的位置为中间" title="添加的位置为中间" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为中间</figcaption></figure><h2 id="hset" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hsetintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set(int index, E element)</span></h3><h4 id="h-18" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.set(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">0</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br></code></pre><h4 id="h-19" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里大多调用的是和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">get()</code>里一样的方法</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104194247.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hremove" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hremoveintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(int index)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p><h4 id="h-20" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.remove(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br></code></pre><h4 id="h-21" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104205658.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104222250.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-22" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">第一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215754.jpg" alt="删除的是链表里的第一个元素" title="删除的是链表里的第一个元素" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">删除的是链表里的第一个元素</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">中间元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215947.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">最后一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104220851.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="hremoveobjecto" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(Object o)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个删除就比较<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">慢</code>了，它是从头开始一一对比，时间复杂度为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">O(n)</code>，这个删除也是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">只删除最早添加的数据</strong></p><h4 id="h-23" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.remove(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-24" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">unlink()</code>方法就是上面讲的那个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104223708.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hclear-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span></h3><h4 id="h-25" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.clear();<br></code></pre><h4 id="h-26" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224213.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-27" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，方便<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">GC</code>回收。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 源码分析 </tag>
            
            <tag> LinkedList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【源码解析】扒开ArrayList的外衣</title>
      <link href="/java/java-arraylist-source-1/"/>
      <url>/java/java-arraylist-source-1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p></blockquote><h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p><p><img src="http://cdn.mjava.top/blog/20200103101050.png" alt></p><h2 id="方法变量"><a href="#方法变量" class="headerlink" title="方法变量"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p><p><img src="http://cdn.mjava.top/blog/Selection_005.png" alt></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h3><h4 id="传入数组的大小"><a href="#传入数组的大小" class="headerlink" title="传入数组的大小"></a>传入数组的大小</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_004.png" alt></p><h4 id="传入一个list对象"><a href="#传入一个list对象" class="headerlink" title="传入一个list对象"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color="orange">复制</font>到新的ArrayList对象</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"z"</span>,<span class="string">"m"</span>,<span class="string">"h"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p></blockquote><h5 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_006.png" alt></p><h3 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="源码解析-2"><a href="#源码解析-2" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/20200103112943.png" alt></p><h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"灰灰HK"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-3"><a href="#源码解析-3" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_007.png" alt></p><ul><li><font color="orange">ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li></ul><p><img src="http://cdn.mjava.top/blog/Selection_009.png" alt></p><ul><li><font color="orange">calculateCapacity(Object[] elementData, int minCapacity)</font></li></ul><p><img src="http://cdn.mjava.top/blog/Selection_010.png" alt></p><ul><li>再回到<font color="orange">ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li></ul><blockquote><p>比如第二次调用add方法，此时<code>size+1=2</code>, <code>elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_011.png" alt></p><ul><li><font color="orange">grow(int minCapacity)</font>扩容</li></ul><blockquote><p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c/cpp实现</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_012.png" alt></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p><ul><li><p>每次添加元素时判断数组容量是否充足</p></li><li><p><font color="orange">第一次</font>添加元素，把数组容量扩容到10</p></li><li><p>扩容时，除第一次，以后的每次扩容为<font color="orange">原大小的1.5倍</font></p></li><li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p></li></ul><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-4"><a href="#源码解析-4" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_013.png" alt></p><blockquote><p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p></blockquote><ul><li><font color="orange">rangeCheckForAdd(int index)</font>判断是否越界</li></ul><blockquote><p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_014.png" alt></p><ul><li><font color="orange">System.arraycopy()</font>拷贝数组</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>src    原数组对象</li><li>srcPos    原数组起始位置</li><li>dest    目标数组</li><li>destPos    目标数组起始位置</li><li>length    复制多少个数据</li></ul></blockquote><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>插入方法其主要步骤如下:</p><ul><li>检查插入的位置是否越界</li><li>检查数组容量是否充足，不充足进行扩容相关操作</li><li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li></ul><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><h3 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h3><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-5"><a href="#源码解析-5" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_015.png" alt></p><ul><li><font color="orange">rangeCheck(int index)</font>判断是否越界</li></ul><blockquote><p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color="orange">相当于</font>是开始的从1开始的</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="orange">elementData(int index)</font>直接返回对应下标的数组元素</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>get方法比较简单，主要步骤为：</p><ul><li>检查是否越界</li><li>返回对应元素</li></ul><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><h3 id="set-int-index-E-element"><a href="#set-int-index-E-element" class="headerlink" title="set(int index, E element)"></a>set(int index, E element)</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-6"><a href="#源码解析-6" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_016.png" alt></p><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><h3 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h3><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-7"><a href="#源码解析-7" class="headerlink" title="源码解析"></a>源码解析</h4><blockquote><p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_017.png" alt></p><h3 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h3><blockquote><p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color="orange">删除最早添加的元素</font></p></blockquote><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="string">"hk"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-8"><a href="#源码解析-8" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_018.png" alt></p><ul><li><font color="orange">fastRemove(int index)</font>删除元素</li></ul><blockquote><p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clear方法"><a href="#clear方法" class="headerlink" title="clear方法"></a>clear方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.clear();</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p><img src="http://cdn.mjava.top/blog/Selection_019.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p><p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> ArrayList </tag>
            
            <tag> 源码解析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【图】用图片告诉你Java中的位运算</title>
      <link href="/java/java-base-wei/"/>
      <url>/java/java-base-wei/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191230221924.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p><p>讲位操作之前,就必须要知道<font color="orange">原码、反码、补码</font></p><blockquote><p>其中正数的<font color="orange">原码=反码=补码</font></p></blockquote><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><a id="more"></a><blockquote><p>在机器的内存中,一个负数的表示是<font color="orange">这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p></blockquote><p>比如说-9在内存中的二进制码,这里用8位表示:</p><p><img src="http://cdn.mjava.top/20191230212102.png" alt></p><p>最后<font color="orange">-9在内存中的二进制值为11110111</font></p><blockquote><p>在二进制中,最高位为符号位,<font color="red">0代表正,1代表负</font></p></blockquote><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="左移和右移"><a href="#左移和右移" class="headerlink" title="左移和右移"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color="orange">4字节</font>,一个字节有<font color="orange">8位</font>,所以这边用32位表示一个数</p><h4 id="负数的左移和右移"><a href="#负数的左移和右移" class="headerlink" title="负数的左移和右移"></a>负数的左移和右移</h4><blockquote><p><font color="orange">这边负数表示是在内存中表示的二进制值</font></p><p>右移时:最高位<font color="orange">补符号位1</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212836.png" alt></p><h4 id="正数的左移和右移"><a href="#正数的左移和右移" class="headerlink" title="正数的左移和右移"></a>正数的左移和右移</h4><blockquote><p>右移时:最高位<font color="orange">补符号位0</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212951.png" alt></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><blockquote><p>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></p></blockquote><p><img src="http://cdn.mjava.top/20191230213359.png" alt></p><h3 id="amp-位与"><a href="#amp-位与" class="headerlink" title="&amp;(位与)"></a>&amp;(位与)</h3><blockquote><p>当相对应的位都为1时,等于1,否则等于0</p></blockquote><p>为了方便表示,接下来全部都用8位表示一个数</p><p><img src="http://cdn.mjava.top/20191230215214.png" alt></p><h3 id="位或"><a href="#位或" class="headerlink" title="|(位或)"></a>|(位或)</h3><blockquote><p>当相对应的位有一个为1时,等于1,否则等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230215609.png" alt></p><h3 id="异或"><a href="#异或" class="headerlink" title="^(异或)"></a>^(异或)</h3><blockquote><p>当相对应的位不同时,等于1,相同时等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230220948.png" alt></p><h3 id="取反"><a href="#取反" class="headerlink" title="~(取反)"></a>~(取反)</h3><blockquote><p>1等于0,0等于1</p></blockquote><p><img src="http://cdn.mjava.top/20191230220449.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>含义</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>左移</td><td>&lt;&lt;</td><td>末尾补0</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>负数:最高位<font color="orange">补符号位1</font>      正数:最高位<font color="orange">补符号位0</font></td></tr><tr><td>无符号右移</td><td>&gt;&gt;&gt;</td><td>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></td></tr><tr><td>&amp;(位与)</td><td>&amp;</td><td>当相对应的位都为1时,等于1,否则等于0</td></tr><tr><td>|(位或)</td><td>|</td><td>当相对应的位有一个为1时,等于1,否则等于0</td></tr><tr><td>^(异或)</td><td>^</td><td>当相对应的位 不同时,等于1  相同时,等于0</td></tr><tr><td>~(取反)</td><td>~</td><td>1等于0,0等于1</td></tr></tbody></table><blockquote><p>最后有个小技巧,<font color="orange">向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p></blockquote><p>$$<br>9向左移n位=9*2^n<br>$$</p><blockquote><p><font color="orange">向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p></blockquote><p>$$<br>9向右移n位=⌊9/2^n⌋<br>$$</p><p><font color="red">注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href="https://www.shuxuele.com/sets/function-floor-ceiling.html" rel="noopener" target="_blank">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之建造者模式【用好玩的故事讲清楚设计模式】</title>
      <link href="/gof/gof-builder/"/>
      <url>/gof/gof-builder/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191226220204.jpg" alt></p><blockquote><p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p><p>所有源代码都在这:<a href="https://github.com/z573419235/GofDemo" rel="noopener" target="_blank">https://github.com/z573419235/GofDemo</a></p><p>各位大佬记得点个星星哦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color="orange">当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color="orange">部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p><a id="more"></a><p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p><h2 id="土豪朋友开车厂"><a href="#土豪朋友开车厂" class="headerlink" title="土豪朋友开车厂"></a>土豪朋友开车厂</h2><p>​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.</p><p><img src="http://cdn.mjava.top/20191226171943.jpg" alt></p><p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车 产品类 定义汽车的构成</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方向盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String steering;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String tire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示一下汽车配置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"steering='"</span> + steering + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", frame='"</span> + frame + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tire='"</span> + tire + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p><p><img src="http://cdn.mjava.top/20191226172548.jpg" alt></p><p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color="orange">一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p><p>他给我介绍了一下他的两个专家:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宝马车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMWBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"宝马的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"宝马的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"宝马的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"宝马的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"奔驰的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"奔驰的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"奔驰的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"奔驰的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="orange">他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象建造者 定义造车的方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造的产品是车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">protected</span> Car car=<span class="keyword">new</span> Car();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到造好的车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">builderCar</span><span class="params">(AbstractBuild build)</span></span>&#123;</span><br><span class="line">        build.buildEngine();</span><br><span class="line">        build.buildFrame();</span><br><span class="line">        build.buildSteering();</span><br><span class="line">        build.buildTire();</span><br><span class="line">        <span class="keyword">return</span> build.getCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p><p><img src="http://cdn.mjava.top/20191226174032.gif" alt></p><p>说完,还向我展示了汽车是怎样造成的………..</p><p><img src="http://cdn.mjava.top/20191226174235.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实建造者模式和<font color="orange">工厂模式</font>还是挺像的,<font color="orange">建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color="orange">控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p><blockquote><p>建造者模式如果和<font color="orange">模板方法模式</font>搭配起来,<font color="orange">建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 建造者模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个故事一个模式-原型模式</title>
      <link href="/gof/gof-prototype/"/>
      <url>/gof/gof-prototype/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191226084321.jpg" alt></p><blockquote><p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p><p>所有源代码都在这:<a href="https://github.com/z573419235/GofDemo" rel="noopener" target="_blank">https://github.com/z573419235/GofDemo</a></p><p>各位大佬记得点个星星哦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;</p><a id="more"></a><p>​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在<code>Java</code>中核心秘密就是<code>clone</code>这个方法,通过重新<code>Object</code>中的<code>clone</code>方法.来达到原型模式;而要重新<code>clone</code>方法就必须要实现<code>Cloneable</code>这个接口,不实现这个接口的话就会报<code>java.lang.CloneNotSupportedException</code>异常;</p><h2 id="我是鸣人"><a href="#我是鸣人" class="headerlink" title="我是鸣人"></a>我是鸣人</h2><p>​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面</p><p><img src="http://cdn.mjava.top/20191225222050.gif" alt></p><p>先来看看鸣人的原型实体类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我是鸣人实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Naruto</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"鸣人"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">13</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String task;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *爱好</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; hobby=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Naruto</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby.add(<span class="string">"吃拉面"</span>);</span><br><span class="line">        <span class="keyword">this</span>.hobby.add(<span class="string">"泡温泉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写Object类的clone方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Naruto <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Naruto naruto=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            naruto=(Naruto)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> naruto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Naruto&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", task='"</span> + task + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", hobby="</span> + hobby +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个<code>@Data</code>注解就可以了;</p></blockquote><p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure><p>可以看到,鸣人本人的任务是去<font color="orange">吃拉面</font>,他的影分身的任务是留着教室<font color="orange">上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color="orange">原型模式</font>;</p><p><img src="http://cdn.mjava.top/20191225222314.gif" alt></p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color="orange">浅拷贝</font>和<font color="orange">深拷贝</font>;</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color="orange">和原型共用一个空间,没有给你分配新的内存</font>;</p></blockquote><p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        <span class="comment">//影分身不配有爱好</span></span><br><span class="line">        narutoYin.getHobby().clear();</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure><p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color="orange">分配新的内存空间</font></p></blockquote><p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p><p><img src="http://cdn.mjava.top/20191225220944.png" alt></p><p>在变一个看看:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        <span class="comment">//影分身不配有爱好</span></span><br><span class="line">        narutoYin.getHobby().clear();</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure><p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p><p><img src="http://cdn.mjava.top/20191225222402.gif" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如<code>int</code>、<code>long</code>、<code>char</code>等都会被拷贝，但是对于<code>String</code>类型，<code>Java</code>就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把<code>String</code>当做基本类使用即可。注意:<font color="orange">使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font></p>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 原型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新驱动到mysql-connector-java-8遇到的一些问题</title>
      <link href="/mysql/mysql-update-driver-connector-8/"/>
      <url>/mysql/mysql-update-driver-connector-8/</url>
      
        <content type="html"><![CDATA[<h1 id="更新驱动到mysql-connector-java-8遇到的一些问题"><a href="#更新驱动到mysql-connector-java-8遇到的一些问题" class="headerlink" title="更新驱动到mysql-connector-java-8遇到的一些问题"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure><p>翻译过来后就是:</p><p>加载类<code>com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code>com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>根据提示,解决方法有<font color="orange">两种</font>:</p><ul><li>更改<code>application.properties</code>文件</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">//改成下面这样</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pit </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker迁移根目录导致mysql权限问题</title>
      <link href="/docker/docker-transfer-pit/"/>
      <url>/docker/docker-transfer-pit/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p><p>迁移根目录我看的是这个文章：<a href="https://www.cnblogs.com/insist-forever/p/11739207.html" rel="noopener" target="_blank">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color="orange">rsync</font>这个命令，而是使用<font color="orange">cp -R</font>;</p><a id="more"></a><p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create/write to file ‘/tmp/ibTCv7Rw’ (Errcode: 13 - Permission denied)</p><p><img src="http://cdn.mjava.top/20191220143818.png" alt></p><p>期间按照网上的方法：说docker容器启动是添加–privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color="orange">都没用！！！！！！</font></p><blockquote><p>其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘/var/run/mysqld/mysqld.sock’ </p><p><img src="http://cdn.mjava.top/20191220144523.png" alt></p></blockquote><p>看来还是得从根源上解决问题啊！</p><h2 id="我的解决办法"><a href="#我的解决办法" class="headerlink" title="我的解决办法"></a>我的解决办法</h2><p>​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:</p><p><img src="http://cdn.mjava.top/20191220144841.png" alt></p><p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color="orange">cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；</p><p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．<img src="http://cdn.mjava.top/20191220145849.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
            <tag> Linux </tag>
            
            <tag> Pit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式系列-模板方法模式</title>
      <link href="/gof/gof-taemplate-method/"/>
      <url>/gof/gof-taemplate-method/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191220000613.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="文前常规发言"><a href="#文前常规发言" class="headerlink" title="文前常规发言"></a>文前常规发言</h2><p>　　模板方法的设计<font color="orange">符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color="orange">一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p><a id="more"></a><p><img src="http://cdn.mjava.top/20191219215431.gif" alt></p><h2 id="阿狗卖电脑"><a href="#阿狗卖电脑" class="headerlink" title="阿狗卖电脑"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color="orange">实则是被公司裁员，被迫来卖电脑了</font>）；</p><p><img src="http://cdn.mjava.top/20191219220453.gif" alt></p><p>看看他的电脑店里都有什么</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *显卡</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color="orange">阿猫</font>和<font color="orange">大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p><p>看看阿猫：</p><p><img src="http://cdn.mjava.top/20191219222853.png" alt></p><p>在看看大牛的：</p><p><img src="http://cdn.mjava.top/20191219222925.png" alt></p><p>再看看他们怎么组装的吧：</p><p><img src="http://cdn.mjava.top/20191219223122.png" alt></p><h2 id="有想法的阿狗"><a href="#有想法的阿狗" class="headerlink" title="有想法的阿狗"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color="orange">模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color="orange">配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *显卡</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿狗帮客户装电脑</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhuZHuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿狗开始组装电脑＝＝＝＝＝＝"</span>);</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.dianYuan();</span><br><span class="line">        <span class="keyword">this</span>.neiCun();</span><br><span class="line">        <span class="keyword">this</span>.xianKa();</span><br><span class="line">        <span class="keyword">this</span>.yingPan();</span><br><span class="line">        <span class="keyword">this</span>.zhuBan();</span><br><span class="line">        <span class="keyword">this</span>.jiXiang();</span><br><span class="line">        System.out.println(<span class="string">"阿狗电脑组装完成＝＝＝＝＝＝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上次的阿猫又来买电脑了：</p><p><img src="http://cdn.mjava.top/20191219232821.png" alt></p><p>看看结果：</p><p><img src="http://cdn.mjava.top/20191219232931.png" alt></p><h2 id="客户反馈"><a href="#客户反馈" class="headerlink" title="客户反馈"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color="orange">有钱就赚原则</font>)，于是他又改了他店铺的模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *　显卡</span></span><br><span class="line"><span class="comment">     * ＂具体方法＂</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户选了显卡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否要显卡　　默认是要显卡的</span></span><br><span class="line"><span class="comment">     * ＂钩子方法＂</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿狗帮客户装电脑</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhuZHuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿狗开始组装电脑＝＝＝＝＝＝"</span>);</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.dianYuan();</span><br><span class="line">        <span class="keyword">this</span>.neiCun();</span><br><span class="line">        <span class="comment">//判断要不要显卡</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isTrue()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.xianKa();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.yingPan();</span><br><span class="line">        <span class="keyword">this</span>.zhuBan();</span><br><span class="line">        <span class="keyword">this</span>.jiXiang();</span><br><span class="line">        System.out.println(<span class="string">"阿狗电脑组装完成＝＝＝＝＝＝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到上加了<font color="orange">具体方法</font>和<font color="orange">钩子方法</font></p></blockquote><p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p><p>阿猫默认要显卡：</p><p><img src="http://cdn.mjava.top/20191219234521.png" alt></p><p>大牛不要显卡：<img src="http://cdn.mjava.top/20191219234630.png" alt></p><p>看看他们的电脑吧：</p><p><img src="http://cdn.mjava.top/20191219234803.png" alt></p><h2 id="总结一下下"><a href="#总结一下下" class="headerlink" title="总结一下下"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p><ul><li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li><li>自己帮客户完成组装电脑：这里就用到了<font color="orange">模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li><li>客户有选择显卡的权利：这里用到了<font color="orange">模板方法模式</font>中的<font color="orange">钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color="orange">钩子方法</font>是<font color="orange">模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li></ul>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 模板方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恍然大悟，数组和链表的区别</title>
      <link href="/algorithm/array-vs-linked/"/>
      <url>/algorithm/array-vs-linked/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191218134901.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="文前发言"><a href="#文前发言" class="headerlink" title="文前发言"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color="orange">数组链表</font>结构，就是常说的<font color="orange">哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p><p><img src="http://cdn.mjava.top/20191218104007.jpg" alt></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是我们平时用的最多的数据结构，它的特点是<font color="orange">查询数据快，插入数据慢</font>，查询的时间复杂度是<font color="orange">O(1)</font>,插入的时间复杂度是<font color="orange">O(n)</font>.</p></blockquote><a id="more"></a><p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color="orange">系统</font>)申请，要求学校给他们一个新的六人寝(<font color="orange">新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p><p><img src="http://cdn.mjava.top/20191218113521.png" alt></p><blockquote><p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color="orange">插入数据慢</font>)</p></blockquote><p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p><p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color="orange">查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p><p><img src="http://cdn.mjava.top/20191218114115.gif" alt></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表我们平时用的比较少，它的特点是:<font color="orange">插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color="orange">O(n)</font>，插入的时间复杂度是：<font color="orange">O(1)</font>，它的特点是和数组相反的；</p></blockquote><p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p><p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color="orange">＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color="orange">＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color="orange">毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color="orange">查询数据慢</font>）；</p><p><img src="http://cdn.mjava.top/20191218132932.png" alt></p><blockquote><p>可以发现，<font color="orange">每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color="orange">添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p></blockquote><h2 id="发个对比表格吧"><a href="#发个对比表格吧" class="headerlink" title="发个对比表格吧"></a>发个对比表格吧</h2><h3 id="时间复杂度对比表"><a href="#时间复杂度对比表" class="headerlink" title="时间复杂度对比表"></a>时间复杂度对比表</h3><table><thead><tr><th align="center"></th><th align="center">数组</th><th>链表</th></tr></thead><tbody><tr><td align="center">插入</td><td align="center">O(n) 慢</td><td>O(1) 快</td></tr><tr><td align="center">删除</td><td align="center">O(n) 慢</td><td>O(1) 快</td></tr><tr><td align="center">查询</td><td align="center">O(1) 快</td><td>O(n) 慢</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式系列-抽象工厂模式</title>
      <link href="/gof/gof-abstract-factory/"/>
      <url>/gof/gof-abstract-factory/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191216212929.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="突然开始的正文"><a href="#突然开始的正文" class="headerlink" title="突然开始的正文"></a>突然开始的正文</h2><p>紧接着上一章的<a href="https://mjava.top/gof/gof-factory-method">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color="orange">AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color="orange">AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color="orange">工厂方法模式</font>升级到了<font color="orange">抽象工厂模式</font>；</p><a id="more"></a><p>话不多说，看两个模式的类图你就明白了：</p><h3 id="原本的工厂方法模式类图："><a href="#原本的工厂方法模式类图：" class="headerlink" title="原本的工厂方法模式类图："></a>原本的工厂方法模式类图：</h3><p><img src="http://cdn.mjava.top/20191216202720.png" alt="工厂方法模式"></p><h3 id="升级后的抽象工厂模式："><a href="#升级后的抽象工厂模式：" class="headerlink" title="升级后的抽象工厂模式："></a>升级后的抽象工厂模式：</h3><p><img src="http://cdn.mjava.top/20191216203329.png" alt="抽象工厂模式"></p><p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color="orange">抽象工厂模式</font>的产品减到<font color="orange">只有一个</font>的时候，他就又回到了<font color="orange">工厂方法模式</font>；</p><h2 id="好色的朋友买车了"><a href="#好色的朋友买车了" class="headerlink" title="好色的朋友买车了"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p><p><img src="http://cdn.mjava.top/20191216205803.png" alt></p><p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p><h2 id="措不及防的结束了"><a href="#措不及防的结束了" class="headerlink" title="措不及防的结束了"></a>措不及防的结束了</h2><p><img src="http://cdn.mjava.top/20191216205427.gif" alt></p><p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color="orange">品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color="orange">业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color="orange">业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 抽象工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式系列-工厂模式</title>
      <link href="/gof/gof-factory-method/"/>
      <url>/gof/gof-factory-method/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/gof-factory-method.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂模式有一下三种</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p><p>当我要买车的时候，我选了这两种车．</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个汽车接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车能动</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大奔开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 五菱神车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"五菱神车开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选是选好了，可是要怎么得到呢？是不是下意识的<font color="orange">new</font>一个出来？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我要奔驰车</span></span><br><span class="line">Benz　myCar=<span class="keyword">new</span> Benz();</span><br></pre></td></tr></table></figure><p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color="orange">new</font>出来的嘛！！！！！</p><p><img src="http://cdn.mjava.top/20191215162632.gif" alt></p><p>这种事情当然是交给工厂去做嘛，叫工厂去<font color="orange">new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 静态工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 简单工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"我要五菱神车"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"我要大奔驰"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 买车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostumerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//跟车厂说一声我要五菱神车</span></span><br><span class="line">        Car wuling=CarFactory.getCar(<span class="string">"我要五菱神车"</span>);</span><br><span class="line">        <span class="comment">//跟车厂说一声我要大奔驰</span></span><br><span class="line">        Car Benz=CarFactory.getCar(<span class="string">"我要大奔驰"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开着五菱神车去兜兜风</span></span><br><span class="line">        wuling.run();</span><br><span class="line">        <span class="comment">//开着大奔去兜兜风</span></span><br><span class="line">        Benz.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//五菱神车开动了</span></span><br><span class="line"><span class="comment">//大奔开动了</span></span><br></pre></td></tr></table></figure><p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p><p><img src="http://cdn.mjava.top/20191215163319.jpg" alt></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p><p><img src="http://cdn.mjava.top/20191215163907.gif" alt></p><p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p><p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产汽车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *　汽车能跑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 劳斯莱斯汽车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RollsRoyce</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 劳斯莱斯能跑起来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"劳斯莱斯开起来了！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 劳斯莱斯汽车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RollsRoyceFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆劳斯莱斯</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RollsRoyce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 五菱神车</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 五菱神车能飙车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"五菱神车开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 五菱神车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WulingFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆五菱神车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再区看看奔驰车厂：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 奔驰汽车</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 奔驰汽车能跑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大奔开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰汽车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆奔驰汽车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p><p><img src="http://cdn.mjava.top/20191215170620.jpg" alt></p><p>看看我买车的过程：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 土豪买车记</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostumerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去五菱车厂买车</span></span><br><span class="line">        Car wuling=<span class="keyword">new</span> WulingFactory().getCar();</span><br><span class="line">        <span class="comment">//去奔驰车厂买车</span></span><br><span class="line">        Car benz=<span class="keyword">new</span> BenzFactory().getCar();</span><br><span class="line">        <span class="comment">//去劳斯莱斯车厂买车</span></span><br><span class="line">        Car rollsRoyce=<span class="keyword">new</span> RollsRoyceFactory().getCar();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//开着三辆车去兜兜风</span></span><br><span class="line">        wuling.run();</span><br><span class="line">        benz.run();</span><br><span class="line">        rollsRoyce.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//五菱神车开动了</span></span><br><span class="line"><span class="comment">//大奔开动了</span></span><br><span class="line"><span class="comment">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color="orange">术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；</p><p>​    不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；</p>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 工厂方法模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOP程序七大原则</title>
      <link href="/gof/gof-oop-7-all/"/>
      <url>/gof/gof-oop-7-all/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/autumn-4656877_1920.png" alt></p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p><font color="orange">当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color="orange">替换</font>指的是：当有父类出现的地方，这个父类可以<font color="orange">替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p><a id="more"></a><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color="orange">面对接口编程，不要面对具体实现编程</font>．</p><p><img src="http://cdn.mjava.top/3-1Q113131610L7.gif" alt="来自C语言中文网"></p><p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码来之＇C语言中文网＇</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DIPtest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Customer wang=<span class="keyword">new</span> Customer();</span><br><span class="line">        System.out.println(<span class="string">"顾客购买以下商品："</span>); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> ShaoguanShop()); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> WuyuanShop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商店</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span>; <span class="comment">//卖</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//韶关网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShaoguanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"韶关土特产：香菇、木耳……"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//婺源网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuyuanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"婺源土特产：绿茶、酒糟鱼……"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//顾客</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shopping</span><span class="params">(Shop shop)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//购物</span></span><br><span class="line">        System.out.println(shop.sell()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">顾客购买以下商品：</span><br><span class="line">韶关土特产：香菇、木耳……</span><br><span class="line">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><p><font color="orange">单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p><font color="orange">迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法。</li></ol><p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li></ul><p>官方定义：<font color="orange">要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p><p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color="orange">里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p><p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href="https://blog.csdn.net/qq_31655965/article/details/54645220" rel="noopener" target="_blank">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color="orange">规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF </tag>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins教程-集成SonarQube</title>
      <link href="/jenkins/build-jenkins-sonarqube/"/>
      <url>/jenkins/build-jenkins-sonarqube/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是SonarQube"><a href="#什么是SonarQube" class="headerlink" title="什么是SonarQube?"></a>什么是SonarQube?</h2><p>看看维基百科的说明：<br><img src="http://cdn.mjava.top/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ" alt></p><h3 id="SonarQube与CI-CD架构图"><a href="#SonarQube与CI-CD架构图" class="headerlink" title="SonarQube与CI/CD架构图"></a>SonarQube与CI/CD架构图</h3><p><img src="http://cdn.mjava.top/FpResgoc3tny2jvGqaqudPwCwstj" alt="SonarQube与CI/CD架构图"></p><h2 id="Docker运行SonarQube"><a href="#Docker运行SonarQube" class="headerlink" title="Docker运行SonarQube"></a>Docker运行SonarQube</h2><p>简单了解之后，开始安装SonarQube.这里用Docker安装</p><blockquote><p>注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL</p></blockquote><a id="more"></a><ul><li>SonarQube 6.7.7</li><li>Docker-CE 19.03.1</li><li>Mysql 5.7</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．</p><blockquote><p>注意：创建容器前一定要先保证你连的容器有对应的数据库</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL="jdbc:mysql://mysql:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false" --restart=always sonarqube:6.7.7-community</span><br></pre></td></tr></table></figure><ul><li><p>–link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．</p></li><li><p>SONARQUBE_JDBC_USERNAME ：数据库的账户</p></li><li><p>SONARQUBE_JDBC_PASSWORD ：数据库密码</p></li></ul><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>安装好后直接访问<font color="orange">9099</font>端口，登录的账户和密码默认都是<font color="orange">admin</font>．首页就是这个样子的．</p><p><img src="http://cdn.mjava.top/Fs08WpcVDcL3n32MxoCNPDMtu1r5" alt></p><h2 id="Jenkins集成SonarQube"><a href="#Jenkins集成SonarQube" class="headerlink" title="Jenkins集成SonarQube"></a>Jenkins集成SonarQube</h2><p>Jenkins和SonarQube都是运行在Docker容器里的</p><h3 id="下载和安装插件"><a href="#下载和安装插件" class="headerlink" title="下载和安装插件"></a>下载和安装插件</h3><p>直接下载最新版的，然后导入，导入的方法可以看<a href="https://mjava.top/jenkins/problem-jenkins-01/">插件导入方法</a></p><ul><li>插件下载地址：<a href="https://updates.jenkins.io/download/plugins/sonar/" rel="noopener" target="_blank">https://updates.jenkins.io/download/plugins/sonar/</a></li></ul><h3 id="SonarQube生成Token"><a href="#SonarQube生成Token" class="headerlink" title="SonarQube生成Token"></a>SonarQube生成Token</h3><p>进入SonarQube管理界面</p><p>Administration-&gt;Security-&gt;Users</p><p><img src="http://cdn.mjava.top/FpFSYEgJfsJIwgNMA6tHHZtdAtpV" alt></p><p>然后随便输入一个名字，点击生成，记下Token</p><p><img src="http://cdn.mjava.top/FhTOSglZYOrP5poo_mmR3SGoobsD" alt></p><h3 id="添加全局凭证"><a href="#添加全局凭证" class="headerlink" title="添加全局凭证"></a>添加全局凭证</h3><p>类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token</p><p><img src="http://cdn.mjava.top/FrKo5EjJ9-78uYbDjBpiuVkeu-_5" alt></p><h3 id="设置SonarQube-servers"><a href="#设置SonarQube-servers" class="headerlink" title="设置SonarQube servers"></a>设置SonarQube servers</h3><p>进入　系统管理-&gt;系统设置-&gt;SonarQube servers　　　　<font color="orange">设置好后点保存</font></p><blockquote><p>因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口</p></blockquote><p><img src="http://cdn.mjava.top/FpevTpJePMDg9-HSoQoSOCNORHL8" alt></p><h3 id="安装SonarQube-Scanner"><a href="#安装SonarQube-Scanner" class="headerlink" title="安装SonarQube Scanner"></a>安装SonarQube Scanner</h3><h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><ul><li>下载SonarQube Scanner压缩包：<a href="https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip" rel="noopener" target="_blank">SonarQube Scanner</a></li></ul><h4 id="解压到Jenkins挂载出来的目录里"><a href="#解压到Jenkins挂载出来的目录里" class="headerlink" title="解压到Jenkins挂载出来的目录里"></a>解压到Jenkins挂载出来的目录里</h4><p>只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color="orange"><strong>我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了</strong></font></p><h4 id="Jenkins配置全局工具"><a href="#Jenkins配置全局工具" class="headerlink" title="Jenkins配置全局工具"></a>Jenkins配置全局工具</h4><p>进入　系统管理-&gt;全局工具配置-&gt;SonarQube Scanner     找到模块后点击<font color="orange">新增SonarQube Scanner</font></p><p><font color="orange">SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font></p><p><img src="http://cdn.mjava.top/Fpgv2yqskGjp37mfoxHC6MGtIAPt" alt></p><h2 id="构建一个Maven项目"><a href="#构建一个Maven项目" class="headerlink" title="构建一个Maven项目"></a>构建一个Maven项目</h2><p>网上很多教程说要勾上这个选项：</p><p><img src="http://cdn.mjava.top/FsSrQCDF5O9x4sufLZkFRz40toHI" alt><br>其实这个是可选的，下面有一句话：<font color="orange">These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you’re using “SonarQube Scanner” or “SonarScanner for MSBuild” build steps.</font></p><p>翻译过来就是：<img src="http://cdn.mjava.top/FrM7HmTx_APStJMI0OHlMQO6WL3W" alt><br>因为我们这里用的就是<font color="orange">SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；</p><h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><ul><li>具体怎么构建项目可以看：<a href="https://mjava.top/jenkins/build-jenkins-mavne/">Jenkins教程-创建Maven项目</a>,这里就不多介绍了</li></ul><h4 id="添加Execute-SonarQube-Scanner"><a href="#添加Execute-SonarQube-Scanner" class="headerlink" title="添加Execute SonarQube Scanner"></a>添加Execute SonarQube Scanner</h4><p>在原来构建的基础上加上<font color="orange">Execute SonarQube Scanner</font>，就可以了</p><p><img src="http://cdn.mjava.top/FgZ021lPaTWzgOPsG7veK1cn7lIB" alt></p><p>在<font color="orange">Analysis properties</font>里填上构建的参数</p><p><img src="http://cdn.mjava.top/FiFA65-xUZCh62Y5HfIgxQzvMx7D" alt></p><blockquote><p>唯一的项目标识符（必填）<br>sonar.projectKey =tiny-config1</p><p>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）<br>sonar.projectName =tiny-config1<br>sonar.projectVersion = 1.0</p><p>源目录的路径（必需）<br>sonar.sources = srcDir1，srcDir2</p><p>测试源目录的路径（可选）<br>sonar.tests = testDir1，testDir2</p><p>Java项目编译类的路径（可选）<br>sonar.java.binaries = bin</p><p>逗号分隔的库路径列表（可选）<br>sonar.java.libraries = path / to / library.jar，path / to / classes / dir</p><p>附加参数<br>sonar.my.property =value</p></blockquote><p>保存后就可以正常构建了．</p><h4 id="错误解决（没有错误可跳过这段）"><a href="#错误解决（没有错误可跳过这段）" class="headerlink" title="错误解决（没有错误可跳过这段）"></a>错误解决（没有错误可跳过这段）</h4><p>如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的<br><img src="http://cdn.mjava.top/FnTRL4pSwrKk5Xwbzobo89VKHf5m" alt></p><h5 id="升级SonarQube的Java版本"><a href="#升级SonarQube的Java版本" class="headerlink" title="升级SonarQube的Java版本"></a>升级SonarQube的Java版本</h5><p>进入SonarQube的管理台： Administration-&gt;Marketplace-&gt;SonarJava</p><blockquote><p>如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮</p></blockquote><p><img src="http://cdn.mjava.top/FgbCXvUiteJ9iGCCYC6qbInX0VSX" alt></p><h3 id="构建完成后"><a href="#构建完成后" class="headerlink" title="构建完成后"></a>构建完成后</h3><p>Jenkins控制台显示SUCCESS就表示构建成功了</p><p><img src="http://cdn.mjava.top/FoijfnBHiJAZ7lA7YqmdQb-bEqUF" alt></p><p>这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了</p><p><img src="http://cdn.mjava.top/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ" alt></p><p>这里就可以看到结果了</p><p><img src="http://cdn.mjava.top/FkPydWtLuuliKAq1hc8Ex45nnTlu" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.</p><p>在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Jenkins </tag>
            
            <tag> SonarQube </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8 Stream方法大全</title>
      <link href="/java/java-8-stream-method/"/>
      <url>/java/java-8-stream-method/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/blog/java_8_stream.png" alt="Stream"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java数组的几种初始化方式</title>
      <link href="/java/java-array-init/"/>
      <url>/java/java-array-init/</url>
      
        <content type="html"><![CDATA[<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="初始化容量"><a href="#初始化容量" class="headerlink" title="初始化容量"></a>初始化容量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义容量为5,初始值为0的int一维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> array[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span>[] array2=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>];</span><br></pre></td></tr></table></figure><h3 id="初始化值"><a href="#初始化值" class="headerlink" title="初始化值"></a>初始化值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化一维容量为5的一维数组的值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[] array10=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> aray12[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><blockquote><p>二维数组初始化时必须要声明行数,列数可随意 </p></blockquote><h3 id="初始化容量-1"><a href="#初始化容量-1" class="headerlink" title="初始化容量"></a>初始化容量</h3><ul><li>声明了列数的</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化一个5行5列的二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[][] array3=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> []array4[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> array5[][]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure><ul><li>未声明列数的</li></ul><blockquote><p>此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化一个5行空列的二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[][] array6=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line"><span class="keyword">int</span> []arra7[]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line"><span class="keyword">int</span> array8[][]=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 赋值方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[][] array6=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">5</span>][];</span><br><span class="line">array6[<span class="number">0</span>]=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">System.out.println(array6[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出:1</span></span><br></pre></td></tr></table></figure><h4 id="初始化值-1"><a href="#初始化值-1" class="headerlink" title="初始化值"></a>初始化值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 初始化并赋值一个2行3列的二维数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span>[][] array13=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> []array14[]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> array15[][]=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RestTemplate简单使用</title>
      <link href="/spring/spring-boot-resttemplate-example/"/>
      <url>/spring/spring-boot-resttemplate-example/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​    本文只讲常用的<strong>GET</strong> 和<strong>POST</strong>请求,其他类型的请求(如<strong>PUT</strong>，<strong>PATCH</strong>)请求方式都差不多，有兴趣的可以查看RestTemplate源码。</p><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><blockquote><p>GET官方给了<strong>getForEntity</strong>和<strong>getForObject</strong>两种种方法，每个方法又有三个重载方法</p></blockquote><h3 id="官方源码接口"><a href="#官方源码接口" class="headerlink" title="官方源码接口"></a>官方源码接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">getForObject</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">getForEntity</span><span class="params">(URI url, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="API接口"><a href="#API接口" class="headerlink" title="API接口"></a>API接口</h4><blockquote><p> 首先我写了两个接口供RestTemplate调用</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"name:"</span>,<span class="string">"Mr.Zheng"</span>);</span><br><span class="line">        jsonObject.put(<span class="string">"tag:"</span>,<span class="string">"Good"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test/&#123;name&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test2</span><span class="params">(@PathVariable String name)</span></span>&#123;</span><br><span class="line">        JSONObject jsonObject=<span class="keyword">new</span> JSONObject();</span><br><span class="line">        jsonObject.put(<span class="string">"name:"</span>,name);</span><br><span class="line">        jsonObject.put(<span class="string">"tag:"</span>,<span class="string">"Good"</span>);</span><br><span class="line">        <span class="keyword">return</span> jsonObject;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getForObject"><a href="#getForObject" class="headerlink" title="getForObject"></a>getForObject</h4><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">       RestTemplate template=<span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//使用URI请求</span></span><br><span class="line">       URI uri=URI.create(<span class="string">"http://localhost:8090/test"</span>);</span><br><span class="line">       String response=template.getForObject(uri, String.class);</span><br><span class="line">       System.out.println(response);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//url带参数请求 </span></span><br><span class="line">       String response2=template.getForObject(<span class="string">"http://localhost:8090/test/&#123;name&#125;"</span>,String.class,<span class="string">"hui1"</span>);</span><br><span class="line">       System.out.println(response2);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//当url参数过多可以用map</span></span><br><span class="line">       Map&lt;String,String&gt; param=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">       param.put(<span class="string">"name"</span>,<span class="string">"hui2"</span>);</span><br><span class="line">       String reponse3=template.getForObject(<span class="string">"http://localhost:8090/test/&#123;name&#125;"</span>,String.class,param);</span><br><span class="line">       System.out.println(reponse3);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="结果"><a href="#结果" class="headerlink" title="结果:"></a>结果:</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"Mr.Zheng"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"hui1"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"hui2"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="getForEntity"><a href="#getForEntity" class="headerlink" title="getForEntity"></a>getForEntity</h4><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestTemplate template=<span class="keyword">new</span> RestTemplate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用URI请求</span></span><br><span class="line">    URI uri=URI.create(<span class="string">"http://localhost:8090/test"</span>);</span><br><span class="line">    ResponseEntity&lt;String&gt; response=template.getForEntity(uri, String.class);</span><br><span class="line">    System.out.println(response.getBody());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//url带参数请求</span></span><br><span class="line">    ResponseEntity&lt;String&gt; response2=template.getForEntity(<span class="string">"http://localhost:8090/test/&#123;name&#125;"</span>,String.class,<span class="string">"hui1"</span>);</span><br><span class="line">    System.out.println(response2.getBody());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当url参数过多可以用map</span></span><br><span class="line">    Map&lt;String,String&gt; param=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    param.put(<span class="string">"name"</span>,<span class="string">"hui2"</span>);</span><br><span class="line">    ResponseEntity&lt;String&gt; reponse3=template.getForEntity(<span class="string">"http://localhost:8090/test/&#123;name&#125;"</span>,String.class,param);</span><br><span class="line">    System.out.println(reponse3.getBody());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"Mr.Zheng"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"hui1"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br><span class="line">&#123;<span class="string">"name:"</span>:<span class="string">"hui2"</span>,<span class="string">"tag:"</span>:<span class="string">"Good"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>可以看到<strong>getForEntity</strong>和<strong>getForObject</strong>的使用方法差不多，他们的区别就是</p><ul><li>getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等</li></ul><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><blockquote><p>POST官方给了<strong>postForLocation</strong>,<strong>postForObject</strong>,<strong>postForEntity</strong>三种方法，每种又有三个重载方法</p></blockquote><h3 id="官方源码接口-1"><a href="#官方源码接口-1" class="headerlink" title="官方源码接口"></a>官方源码接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">URI <span class="title">postForLocation</span><span class="params">(String url, @Nullable Object request, Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">URI <span class="title">postForLocation</span><span class="params">(String url, @Nullable Object request, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function">URI <span class="title">postForLocation</span><span class="params">(URI url, @Nullable Object request)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">&lt;T&gt; <span class="function">T <span class="title">postForObject</span><span class="params">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class="line"><span class="function"><span class="params">Object... uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class="line"><span class="function"><span class="params">Map&lt;String, ?&gt; uriVariables)</span> <span class="keyword">throws</span> RestClientException</span>;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; <span class="function">ResponseEntity&lt;T&gt; <span class="title">postForEntity</span><span class="params">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure><h3 id="API接口-1"><a href="#API接口-1" class="headerlink" title="API接口"></a>API接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG= LoggerFactory.getLogger(Test.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">(@RequestBody JSONObject param)</span></span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"param:&#123;&#125;"</span>,param.toJSONString());</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test/&#123;urlParam&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">test</span><span class="params">(@RequestBody JSONObject param,@PathVariable String urlParam)</span></span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"param:&#123;&#125;"</span>,param);</span><br><span class="line">        param.put(<span class="string">"urlParam"</span>,urlParam);</span><br><span class="line">        <span class="keyword">return</span> param;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="postForObject"><a href="#postForObject" class="headerlink" title="postForObject"></a>postForObject</h3><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestTemplate template=<span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String baseURL=<span class="string">"http://localhost:8090"</span>;</span><br><span class="line">    JSONObject param=<span class="keyword">new</span> JSONObject();</span><br><span class="line">    param.put(<span class="string">"tag"</span>,<span class="string">"this is post request!!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用URI请求</span></span><br><span class="line">    URI uri=URI.create(baseURL+<span class="string">"/test"</span>);</span><br><span class="line">    String response=template.postForObject(uri,param,String.class);</span><br><span class="line">    System.out.println(response);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//url带参数请求</span></span><br><span class="line">    String response2=template.postForObject(baseURL+<span class="string">"/test/&#123;urlParam&#125;"</span>,param,String.class,<span class="string">"this is urlParam"</span>);</span><br><span class="line">    System.out.println(response2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当url参数过多可以用map</span></span><br><span class="line">    Map&lt;String,String&gt; mapParam=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    mapParam.put(<span class="string">"urlParam"</span>,<span class="string">"this is map param!!"</span>);</span><br><span class="line">    String reponse3=template.postForObject(baseURL+<span class="string">"/test/&#123;urlParam&#125;"</span>,param,String.class,mapParam);</span><br><span class="line">    System.out.println(reponse3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果-2"><a href="#结果-2" class="headerlink" title="结果"></a>结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"tag"</span>:<span class="string">"this is post request!!"</span>&#125;</span><br><span class="line">&#123;<span class="string">"tag"</span>:<span class="string">"this is post request!!"</span>,<span class="string">"urlParam"</span>:<span class="string">"this is urlParam"</span>&#125;</span><br><span class="line">&#123;<span class="string">"tag"</span>:<span class="string">"this is post request!!"</span>,<span class="string">"urlParam"</span>:<span class="string">"this is map param!!"</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="postForEntity"><a href="#postForEntity" class="headerlink" title="postForEntity"></a>postForEntity</h3><blockquote><p>postForEntity和postForObject用法类似，具体这里就写了。</p></blockquote><h3 id="postForLocation"><a href="#postForLocation" class="headerlink" title="postForLocation"></a>postForLocation</h3><blockquote><p>这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下</p></blockquote><h4 id="新写个API接口"><a href="#新写个API接口" class="headerlink" title="新写个API接口"></a>新写个API接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UriTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG= LoggerFactory.getLogger(UriTest.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/uri"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uriTest</span><span class="params">(@RequestBody JSONObject param, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//打印上传的参数</span></span><br><span class="line">            LOG.info(<span class="string">"requestParam:&#123;&#125;"</span>,param);</span><br><span class="line">            <span class="comment">//跳转百度</span></span><br><span class="line">            response.sendRedirect(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            LOG.info(e.getMessage(),e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestTemplate template=<span class="keyword">new</span> RestTemplate();</span><br><span class="line">    String baseURL=<span class="string">"http://localhost:8090"</span>;</span><br><span class="line">    JSONObject param=<span class="keyword">new</span> JSONObject();</span><br><span class="line">    param.put(<span class="string">"info"</span>,<span class="string">"this is postForLocation test!!"</span>);</span><br><span class="line"></span><br><span class="line">    URI response2=template.postForLocation(baseURL+<span class="string">"/uri"</span>,param);</span><br><span class="line">    System.out.println(response2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="结果-3"><a href="#结果-3" class="headerlink" title="结果"></a>结果</h4><p><img src="http://cdn.mjava.top/blog/20191120165138.png" alt="代码运行结果"></p><h4 id="服务端日志"><a href="#服务端日志" class="headerlink" title="服务端日志"></a>服务端日志</h4><p><img src="http://cdn.mjava.top/blog/20191120165302.png" alt="服务端日志"></p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p><strong>postForObject</strong>和<strong>postForEntity</strong>两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而<strong>postForLocation</strong>方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos报[NACOS HTTP-POST]</title>
      <link href="/java/nacos-post-error/"/>
      <url>/java/nacos-post-error/</url>
      
        <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；</p><a id="more"></a><p>　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。</p><h3 id="修正Nacos的地址"><a href="#修正Nacos的地址" class="headerlink" title="修正Nacos的地址"></a>修正Nacos的地址</h3><p>　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">172.16.X.X     //更改到最新nacos的地址</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins插件版本太旧的更新方法</title>
      <link href="/jenkins/problem-jenkins-01/"/>
      <url>/jenkins/problem-jenkins-01/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><pre><code>Jenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：</code></pre><p><img src="http://cdn.mjava.top/blog/20191108102617.png" alt="jenkins插件管理界面"></p><p>Durable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.</p><a id="more"></a><h2 id="查看本地已安装版本"><a href="#查看本地已安装版本" class="headerlink" title="查看本地已安装版本"></a>查看本地已安装版本</h2><p>可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。</p><p><img src="http://cdn.mjava.top/blog/20191108100855.png" alt="jenkins插件管理界面"></p><h2 id="搜索插件"><a href="#搜索插件" class="headerlink" title="搜索插件"></a>搜索插件</h2><p>当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF</p><p><img src="http://cdn.mjava.top/blog/20191108102907.png" alt="jenkins插件管理界面"></p><p>不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站</p><p><a href="https://plugins.jenkins.io/" rel="noopener" target="_blank">Jenkins插件下载</a></p><ul><li>进入后在输入框里输入你刚才要下载的插件:</li></ul><p><img src="http://cdn.mjava.top/blog/20191108101610.png" alt="jenkins插件下载"></p><ul><li>选择对应的插件<br><img src="http://cdn.mjava.top/blog/20191108101748.png" alt="jenkins插件下载"></li></ul><ul><li>然后点击右上角<br><img src="http://cdn.mjava.top/blog/20191108101807.png" alt="jenkins插件下载"></li></ul><ul><li>下载刚才提示的1.33版本<br><img src="http://cdn.mjava.top/blog/20191108101832.png" alt="jenkins插件下载"></li></ul><ul><li>下载完成后是一个hpi文件<br><img src="http://cdn.mjava.top/blog/20191108102109.png" alt="jenkins插件下载"></li></ul><h2 id="导入插件"><a href="#导入插件" class="headerlink" title="导入插件"></a>导入插件</h2><ul><li><p>到插件管理界面，找到Upload Plugin<br><img src="http://cdn.mjava.top/blog/20191108102152.png" alt="jenkins插件下载"></p></li><li><p>然后选择刚才下载的插件，点击导入<br><img src="http://cdn.mjava.top/blog/20191108102223.png" alt="jenkins插件下载"></p></li><li><p>可以看到插件正在导入<br><img src="http://cdn.mjava.top/blog/20191108102240.png" alt="jenkins插件下载"></p></li><li><p>导入完成后，重启Jenkins就OK了<br><img src="http://cdn.mjava.top/blog/20191108102254.png" alt="jenkins插件下载"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins教程-Docker+GitLab持续部署持续集成</title>
      <link href="/jenkins/build-jenkins-ci-cd/"/>
      <url>/jenkins/build-jenkins-ci-cd/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="https://mjava.top/jenkins/build-jenkins-docker/">Jenkins教程-搭建(Docker版)</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-mavne/">Jenkins教程-创建Maven项目</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-ci-cd/">Jenkins教程-Docker+GitLab持续部署持续集成</a></p></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><table><thead><tr><th></th><th>地址</th><th>系统</th><th>安装的软件</th></tr></thead><tbody><tr><td>主机１</td><td>10.25.0.72</td><td>Centos 7</td><td>Docker　,　Jenkins(Docker版)</td></tr><tr><td>主机２</td><td>10.25.0.50</td><td>Cnetos 7</td><td>Docker</td></tr></tbody></table><a id="more"></a><h2 id="Jenkins所需添加插件"><a href="#Jenkins所需添加插件" class="headerlink" title="Jenkins所需添加插件"></a>Jenkins所需添加插件</h2><ul><li><p><a href="https://plugins.jenkins.io/git-parameter" rel="noopener" target="_blank">Git Parameter</a></p></li><li><p><a href="https://plugins.jenkins.io/gitlab-plugin" rel="noopener" target="_blank">GitLab</a></p></li><li><p><a href="https://plugins.jenkins.io/ssh" rel="noopener" target="_blank">SSH</a></p></li></ul><h2 id="创建ssh登录凭据"><a href="#创建ssh登录凭据" class="headerlink" title="创建ssh登录凭据"></a>创建ssh登录凭据</h2><p><img src="http://cdn.mjava.top/blog/20191112111043.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111058.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111115.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111130.png" alt="Jenkins界面"></p><blockquote><p>这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112111529.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111806.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112160316.png" alt="Jenkins界面"></p><h2 id="添加SSH配置"><a href="#添加SSH配置" class="headerlink" title="添加SSH配置"></a>添加SSH配置</h2><p><img src="http://cdn.mjava.top/blog/20191112160521.png" alt="Jenkins界面"></p><blockquote><p>找到SSH remote hosts </p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112160541.png" alt="Jenkins界面"></p><blockquote><p>设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112160920.png" alt="Jenkins界面"></p><h2 id="配置Job"><a href="#配置Job" class="headerlink" title="配置Job"></a>配置Job</h2><blockquote><p>进入上篇文章创建好的Job,在此基础上进行改造</p></blockquote><h3 id="配置Git-Parameter-来获取gitlab的Tag数据"><a href="#配置Git-Parameter-来获取gitlab的Tag数据" class="headerlink" title="配置Git Parameter,来获取gitlab的Tag数据"></a>配置Git Parameter,来获取gitlab的Tag数据</h3><p><img src="http://cdn.mjava.top/blog/20191112161424.png" alt="Jenkins界面"></p><h3 id="配置触发器"><a href="#配置触发器" class="headerlink" title="配置触发器"></a>配置触发器</h3><blockquote><p>点击最下面的Generate,生成秘钥。然后记下URL:<a href="http://172.16.54.131:8080/project/JenkinsTest" rel="noopener" target="_blank">http://172.16.54.131:8080/project/JenkinsTest</a> 和生成的秘钥：60327d68d10f1f7621696edd42719d1c</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112161808.png" alt="Jenkins界面"></p><h3 id="添加构建完成后的动作"><a href="#添加构建完成后的动作" class="headerlink" title="添加构建完成后的动作"></a>添加构建完成后的动作</h3><p><img src="http://cdn.mjava.top/blog/20191112161842.png" alt="Jenkins界面"></p><h3 id="添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh"><a href="#添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh" class="headerlink" title="添加Execute shell 和Execute shell script on remote host using ssh"></a>添加Execute shell 和Execute shell script on remote host using ssh</h3><ul><li>Execute shell ： 执行Jenkins所在服务器的脚本</li><li>Execute shell script on remote host using ssh：登录远程服务器执行脚本</li></ul><p><img src="http://cdn.mjava.top/blog/20191112161940.png" alt="Jenkins界面"></p><h3 id="编写你要执行的脚本"><a href="#编写你要执行的脚本" class="headerlink" title="编写你要执行的脚本"></a>编写你要执行的脚本</h3><blockquote><p>由于是自定义的，内容我就不粘贴出来了.编写好后点击保存</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112164613.png" alt="Jenkins界面"></p><h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><h3 id="手动构建"><a href="#手动构建" class="headerlink" title="手动构建"></a>手动构建</h3><p><img src="http://cdn.mjava.top/blog/20191112164653.png" alt="Jenkins界面"></p><h4 id="选择你要构建的tag标签，点击Build开始构建并自动部署"><a href="#选择你要构建的tag标签，点击Build开始构建并自动部署" class="headerlink" title="选择你要构建的tag标签，点击Build开始构建并自动部署"></a>选择你要构建的tag标签，点击Build开始构建并自动部署</h4><p><img src="http://cdn.mjava.top/blog/20191112164746.png" alt="Jenkins界面"></p><h3 id="自动构建"><a href="#自动构建" class="headerlink" title="自动构建"></a>自动构建</h3><blockquote><p>自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署</p></blockquote><h4 id="自动构建流程"><a href="#自动构建流程" class="headerlink" title="自动构建流程"></a>自动构建流程</h4><p><img src="http://cdn.mjava.top/blog/201911121717.png" alt="Jenkins界面"></p><p>####　配置GitLab代码仓库</p><blockquote><p>点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112165036.png" alt="Jenkins界面"></p><p>　</p><h4 id="Git打Tag标签"><a href="#Git打Tag标签" class="headerlink" title="Git打Tag标签"></a>Git打Tag标签</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -a 1.0 -m '1.0'  //打一个1.0的tag</span><br><span class="line">git push origin 1.0 //上传1.0标签到远程仓库</span><br></pre></td></tr></table></figure><p>上传完tag后此时Jenkins已经开始自动构建并部署项目了；</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；</p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins教程-创建Maven项目</title>
      <link href="/jenkins/build-jenkins-mavne/"/>
      <url>/jenkins/build-jenkins-mavne/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="https://mjava.top/jenkins/build-jenkins-docker/">Jenkins教程-搭建(Docker版)</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-mavne/">Jenkins教程-创建Maven项目</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-ci-cd/">Jenkins教程-Docker+GitLab持续部署持续集成</a></p></li></ul><h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；</p><a id="more"></a><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li>Centos 7</li><li>Jenkins(Docker版)</li></ul><h3 id="所需插件"><a href="#所需插件" class="headerlink" title="所需插件"></a>所需插件</h3><blockquote><p>除了搭建Jenkins时安装的插件,还需安装的插件</p></blockquote><ul><li><a href="https://plugins.jenkins.io/maven-plugin" rel="noopener" target="_blank">Maven Integration</a></li></ul><h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><p>点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置<br><img src="http://cdn.mjava.top/blog/20191112105932.png" alt="Jenkins界面"></p><p>然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存</p><p><img src="http://cdn.mjava.top/blog/20191112110029.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112110130.png" alt="Jenkins界面"></p><h3 id="创建Git登录凭证"><a href="#创建Git登录凭证" class="headerlink" title="创建Git登录凭证"></a>创建Git登录凭证</h3><p>点击侧边栏的凭证，然后按图点击<br><img src="http://cdn.mjava.top/blog/20191112111043.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111058.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111115.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111130.png" alt="Jenkins界面"></p><p>这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；</p><p><img src="http://cdn.mjava.top/blog/20191112111529.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112111806.png" alt="Jenkins界面"></p><p>保存后就会出现你保存好的凭证；</p><h2 id="创建JOB"><a href="#创建JOB" class="headerlink" title="创建JOB"></a>创建JOB</h2><p><img src="http://cdn.mjava.top/blog/20191112111950.png" alt="Jenkins界面"></p><h3 id="创建Maven项目"><a href="#创建Maven项目" class="headerlink" title="创建Maven项目"></a>创建Maven项目</h3><p><img src="http://cdn.mjava.top/blog/20191112112035.png" alt="Jenkins界面"></p><h3 id="输入你的gitlab项目地址，然后选择刚才配置的凭证"><a href="#输入你的gitlab项目地址，然后选择刚才配置的凭证" class="headerlink" title="输入你的gitlab项目地址，然后选择刚才配置的凭证"></a>输入你的gitlab项目地址，然后选择刚才配置的凭证</h3><p><img src="http://cdn.mjava.top/blog/20191112112620.png" alt="Jenkins界面"></p><h3 id="输入Maven打包命令，然后点击保存"><a href="#输入Maven打包命令，然后点击保存" class="headerlink" title="输入Maven打包命令，然后点击保存"></a>输入Maven打包命令，然后点击保存</h3><p><img src="http://cdn.mjava.top/blog/20191112112719.png" alt="Jenkins界面"></p><h3 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h3><p><img src="http://cdn.mjava.top/blog/20191112112747.png" alt="Jenkins界面"></p><h3 id="查看构建项目日志"><a href="#查看构建项目日志" class="headerlink" title="查看构建项目日志"></a>查看构建项目日志</h3><blockquote><p>第一次构建会比慢，因为他要下载maven相关构建的包</p></blockquote><p><img src="http://cdn.mjava.top/blog/20191112112803.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112112841.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112112854.png" alt="Jenkins界面"></p><h3 id="查看构建好的jar包"><a href="#查看构建好的jar包" class="headerlink" title="查看构建好的jar包"></a>查看构建好的jar包</h3><p><img src="http://cdn.mjava.top/blog/20191112122030.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112122112.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112122135.png" alt="Jenkins界面"><br><img src="http://cdn.mjava.top/blog/20191112122200.png" alt="Jenkins界面"></p><blockquote><p>到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins初始化界面插件安装失败解决方法</title>
      <link href="/jenkins/problem-jenkins-02/"/>
      <url>/jenkins/problem-jenkins-02/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面</p><p><img src="http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png" alt="Jenkins插件安装失败"></p><p>别着急，直接点击继续，先完成初始化步骤。</p><h2 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h2><ul><li>插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins<br><img src="http://cdn.mjava.top/blog/20191107162947.png" alt="Jenkins"></li></ul><ul><li>点击Correct<br><img src="http://cdn.mjava.top/blog/20191107163016.png" alt="Jenkins"></li></ul><ul><li>点击Advanced<br><img src="http://cdn.mjava.top/blog/20191107163040.png" alt="Jenkins"></li></ul><ul><li>下拉找到Update Site<br><img src="http://cdn.mjava.top/blog/20191107163100.png" alt="Jenkins"></li></ul><ul><li>然后把输入框的内容换成</li></ul><a id="more"></a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/20191107165325.png" alt="Jenkins"></p><h2 id="重新下载插件"><a href="#重新下载插件" class="headerlink" title="重新下载插件"></a>重新下载插件</h2><ul><li>然后重新下载刚才那些下载失败的插件,这里随机选一个<br><img src="http://cdn.mjava.top/blog/20191107165630.png" alt="Jenkins"></li></ul><ul><li>在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install<br><img src="http://cdn.mjava.top/blog/20191107165916.png" alt="Jenkins"></li></ul><ul><li>插件正在安装<br><img src="http://cdn.mjava.top/blog/20191107165947.png" alt="Jenkins"></li></ul><blockquote><p>安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：<a href="https://mjava.top/jenkins/problem-jenkins-01/">Jenkins插件版本太旧的更新方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jenkins教程-搭建(Docker版)</title>
      <link href="/jenkins/build-jenkins-docker/"/>
      <url>/jenkins/build-jenkins-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><p><a href="https://mjava.top/jenkins/build-jenkins-docker/">Jenkins教程-搭建(Docker版)</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-mavne/">Jenkins教程-创建Maven项目</a></p></li><li><p><a href="https://mjava.top/jenkins/build-jenkins-ci-cd/">Jenkins教程-Docker+GitLab持续部署持续集成</a></p></li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>主机：172.16.54.131</p></li><li><p>系统：Cnetos 7</p></li></ul><h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker-CE"></a>安装Docker-CE</h2><h3 id="检查Docker"><a href="#检查Docker" class="headerlink" title="检查Docker"></a>检查Docker</h3><p>首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure><blockquote><p>如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>本教程以centos7安装方式说明，其他系统安装方式会有不同</li></ul><p>执行以下命令，安装Docker</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">    </span><br><span class="line">yum install docker-ce</span><br><span class="line"></span><br><span class="line">service docker start</span><br><span class="line"></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><ul><li>第一条命令：为添加源做准备 使其支持存储</li><li>第二条命令：添加docker-ce软件源</li><li>第三条命令：安装docker-ce</li><li>第四条命令：启动docker服务</li><li>第五条命令：设置开启自启</li></ul><h2 id="安装Jenkins的Docker容器"><a href="#安装Jenkins的Docker容器" class="headerlink" title="安装Jenkins的Docker容器"></a>安装Jenkins的Docker容器</h2><h3 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h3><p>在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /opt/jenkins     //创建文件夹</span><br><span class="line">chmod 7777 /opt/jenkins//授予权限</span><br></pre></td></tr></table></figure><blockquote><p>该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。</p></blockquote><h3 id="拉取官方镜像"><a href="#拉取官方镜像" class="headerlink" title="拉取官方镜像"></a>拉取官方镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure><blockquote><p>启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 </p></blockquote><h3 id="查看容器日志"><a href="#查看容器日志" class="headerlink" title="查看容器日志"></a>查看容器日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs jenkins</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png" alt="log界面"></p><blockquote><p>记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到</p></blockquote><h2 id="初始化Jenkins"><a href="#初始化Jenkins" class="headerlink" title="初始化Jenkins"></a>初始化Jenkins</h2><h3 id="解锁"><a href="#解锁" class="headerlink" title="解锁"></a>解锁</h3><p>在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）</p><p><img src="http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png" alt="jenkins界面"></p><p>在输入框中填入刚才保存的密码</p><h3 id="自定义"><a href="#自定义" class="headerlink" title="自定义"></a>自定义</h3><p>推荐直接选 安装推荐的插件</p><p><img src="http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png" alt="Jenkins自定义界面"></p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>到这个界面等他安装完成，时间会长一点</p><p><img src="http://cdn.mjava.top/blog/jenkins_191107141216.png" alt="Jenkins安装插件"></p><blockquote><p>如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章</p><p><a href="https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/">Jenkins初始化界面插件安装失败解决方法</a></p></blockquote><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>设置你的登录账号和密码，然后点保存完成<br><img src="http://cdn.mjava.top/blog/jenkins_20191107160016.png" alt="Jenkins创建用户"></p><h3 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h3><p>默认直接点保存完成<br><img src="http://cdn.mjava.top/blog/jenkins_20191107160056.png" alt="Jenkins实例配置"></p><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>点击开始使用Jenkins<br><img src="http://cdn.mjava.top/blog/jenkins_20191107160129.png" alt="Jenkins开始使用"></p><h3 id="Jenkins主界面"><a href="#Jenkins主界面" class="headerlink" title="Jenkins主界面"></a>Jenkins主界面</h3><p>进入Jenkins主界面，到此教程结束<br><img src="http://cdn.mjava.top/blog/jenkins_20191107160204.png" alt="Jenkins主界面"></p>]]></content>
      
      
      <categories>
          
          <category> Jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式系例-单例模式</title>
      <link href="/gof/gof-singleton/"/>
      <url>/gof/gof-singleton/</url>
      
        <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/gof-singleton.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 </p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。</p><h2 id="一-什么是单例模式"><a href="#一-什么是单例模式" class="headerlink" title="一.什么是单例模式"></a>一.什么是单例模式</h2><p>​    就如同他的名字一样，’单例’-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。</p><a id="more"></a><h3 id="1-白话小故事"><a href="#1-白话小故事" class="headerlink" title="1.白话小故事"></a>1.白话小故事</h3><p>​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。</p><p>​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半–小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。</p><blockquote><p>小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈</p></blockquote><h2 id="2-用在哪里"><a href="#2-用在哪里" class="headerlink" title="2.用在哪里"></a>2.用在哪里</h2><p>​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。</p><h2 id="3-在Java中构成的条件"><a href="#3-在Java中构成的条件" class="headerlink" title="3.在Java中构成的条件"></a>3.在Java中构成的条件</h2><ul><li>静态变量</li><li>静态方法</li><li>私有构造器</li></ul><h2 id="二-单例模式的两种形态"><a href="#二-单例模式的两种形态" class="headerlink" title="二.单例模式的两种形态"></a>二.单例模式的两种形态</h2><h3 id="1-懒汉模式"><a href="#1-懒汉模式" class="headerlink" title="1.懒汉模式"></a>1.懒汉模式</h3><blockquote><p>线程不安全</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton unsingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(unsingleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            unsingleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unsingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-饿汉模式"><a href="#2-饿汉模式" class="headerlink" title="2.饿汉模式"></a>2.饿汉模式</h3><blockquote><p>线程安全</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton unsingleton=<span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton singleton1=Singleton.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-懒汉模式优化成线程安全"><a href="#三-懒汉模式优化成线程安全" class="headerlink" title="三.懒汉模式优化成线程安全"></a>三.懒汉模式优化成线程安全</h2><p>  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。</p><h3 id="1-加synchronized关键字"><a href="#1-加synchronized关键字" class="headerlink" title="1.加synchronized关键字"></a>1.加synchronized关键字</h3><blockquote><p>此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton unsingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(unsingleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            unsingleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unsingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用”双重检查加锁”"><a href="#2-用”双重检查加锁”" class="headerlink" title="2.用”双重检查加锁”"></a>2.用”双重检查加锁”</h3><blockquote><p>上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton unsingleton;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(unsingleton==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//只有当第一次访问的时候才会使用synchronized关键字</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                unsingleton=<span class="keyword">new</span> Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> unsingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三种线程安全的单例模式比较"><a href="#三种线程安全的单例模式比较" class="headerlink" title="三种线程安全的单例模式比较"></a>三种线程安全的单例模式比较</h2><ul><li><p>饿汉模式：性能好，写法简单，个人比较推荐用这个</p></li><li><p>加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。</p></li><li><p>volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> GOF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GOF </tag>
            
            <tag> Singleton </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RocketMQ集群搭建</title>
      <link href="/rocketmq/rocketmq-cluster-build/"/>
      <url>/rocketmq/rocketmq-cluster-build/</url>
      
        <content type="html"><![CDATA[<p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>JDK1.8</li><li>Centos7</li></ul><h2 id="主机-两台"><a href="#主机-两台" class="headerlink" title="主机-两台"></a>主机-两台</h2><ul><li>centos7_1 :172.16.54.130</li><li>centos7_2 :172.16.54.128</li></ul><h2 id="软件资源"><a href="#软件资源" class="headerlink" title="软件资源"></a>软件资源</h2><ul><li>JDK1.8 :<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" rel="noopener" target="_blank">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li><li>RocketMQ4.5.2 :<a href="http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip" rel="noopener" target="_blank">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li></ul><a id="more"></a><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p><h2 id="配置RocketMQ"><a href="#配置RocketMQ" class="headerlink" title="配置RocketMQ"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> unzip rocketmq-all-4.5.2-bin-release.zip</span></span><br></pre></td></tr></table></figure><h3 id="编写配置文件"><a href="#编写配置文件" class="headerlink" title="编写配置文件"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#所属集群名字 </span></span><br><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">rocketmq-cluster</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#broker名字，每队master和slave保持一致</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定主机ip</span></span><br><span class="line"><span class="attr">brokerIP1</span> = <span class="string">主机IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">主机IP:9876;主机IP:9876</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span></span><br><span class="line"><span class="attr">defaultTopicQueueNums</span>=<span class="string">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Broker 对外服务的监听端口 </span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除文件时间点，默认凌晨 4点</span></span><br><span class="line"> <span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件保留时间，默认 48 小时 </span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">120</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#commitLog每个文件的大小默认1G </span></span><br><span class="line"><span class="attr">mapedFileSizeCommitLog</span>=<span class="string">1073741824</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class="line"><span class="attr">mapedFileSizeConsumeQueue</span>=<span class="string">300000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#检测物理文件磁盘空间</span></span><br><span class="line"><span class="attr">diskMaxUsedSpaceRatio</span>=<span class="string">88</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径 </span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/rocketmq/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/rocketmq/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/rocketmq/store/checkpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Broker 的角色</span></span><br><span class="line"><span class="comment">#- ASYNC_MASTER 异步复制Master</span></span><br><span class="line"><span class="comment">#- SYNC_MASTER 同步双写Master</span></span><br><span class="line"><span class="comment">#- SLAVE </span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#刷盘方式</span></span><br><span class="line"><span class="comment">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class="line"><span class="comment">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span></span><br><span class="line"><span class="comment">#checkTransactionMessageEnable=false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/javawork/apache-rocketmq/store/abort</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#限制的消息大小 maxMessageSize=65536</span></span><br></pre></td></tr></table></figure><p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p><ul><li>2m-2s-async :2个master，2个slave，async异步复制</li><li>2m-2s-sync :2个master，2个slave，sync同步双写</li><li>2m-noslave :2个master,没有slave</li></ul><p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p><h4 id="centos7-1主机编辑如下两个配置文件"><a href="#centos7-1主机编辑如下两个配置文件" class="headerlink" title="centos7_1主机编辑如下两个配置文件"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote><p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p></blockquote><h5 id="broker-a-properties"><a href="#broker-a-properties" class="headerlink" title="broker-a.properties"></a>broker-a.properties</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">DefaultCluster</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">48</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">ASYNC_MASTER</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq/master/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径 </span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq/master/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/rocketmq/master/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/rocketmq/master/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/rocketmq/master/store/checkpoint</span></span><br></pre></td></tr></table></figure><p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p><h5 id="broker-a-s-properties"><a href="#broker-a-s-properties" class="headerlink" title="broker-a-s.properties"></a>broker-a-s.properties</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">DefaultCluster</span></span><br><span class="line"><span class="attr">brokerName</span>=<span class="string">broker-a</span></span><br><span class="line"><span class="attr">brokerId</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">deleteWhen</span>=<span class="string">04</span></span><br><span class="line"><span class="attr">fileReservedTime</span>=<span class="string">48</span></span><br><span class="line"><span class="attr">brokerRole</span>=<span class="string">SLAVE</span></span><br><span class="line"><span class="attr">flushDiskType</span>=<span class="string">ASYNC_FLUSH</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">20911</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/rocketmq/slave/store</span></span><br><span class="line"><span class="comment">#commitLog 存储路径 </span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/rocketmq/slave/store/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/rocketmq/slave/store/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/rocketmq/slave/store/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/rocketmq/slave/store/checkpoint</span></span><br></pre></td></tr></table></figure><p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p><h4 id="centos7-2主机编辑如下两个配置文件"><a href="#centos7-2主机编辑如下两个配置文件" class="headerlink" title="centos7_2主机编辑如下两个配置文件"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id="和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。"><a href="#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。" class="headerlink" title="和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id="设置RocketMQ运行的JVM内存-非必须"><a href="#设置RocketMQ运行的JVM内存-非必须" class="headerlink" title="设置RocketMQ运行的JVM内存(非必须)"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote><p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p></blockquote><p>  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p><ul><li>runbroker.sh：找到如下一行配置</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">"$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">改成：</span></span><br><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m"</span></span><br></pre></td></tr></table></figure><ul><li>runserver.sh: 找到如下一行配置</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">"$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">改成：</span></span><br><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"</span></span><br></pre></td></tr></table></figure><h2 id="启动RocketMQ"><a href="#启动RocketMQ" class="headerlink" title="启动RocketMQ"></a>启动RocketMQ</h2><blockquote><p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="comment"># service firewalld stop</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><blockquote></blockquote><p>  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：</p><ul><li>启动namesrv</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nohup sh mqnamesrv &amp;</span></span><br></pre></td></tr></table></figure><ul><li>启动broker-master</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &amp;</span></span><br></pre></td></tr></table></figure><ul><li>启动broker-slave</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nohup sh mqbroker -c ../conf/2m-2s-async/broker<span class="_">-a</span>-s.properties &amp;</span></span><br></pre></td></tr></table></figure><p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p><h2 id="搭建Console可视化控制台"><a href="#搭建Console可视化控制台" class="headerlink" title="搭建Console可视化控制台"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href="https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：" rel="noopener" target="_blank">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/apache/rocketmq-externals.git</span></span><br></pre></td></tr></table></figure><p>进去目录：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span> rocketmq-externals-master/rocketmq-console</span></span><br></pre></td></tr></table></figure><p>修改配置文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim src/main/resources/application.properties</span></span><br></pre></td></tr></table></figure><p>添加两个namesvr的主机ip</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">rocketmq.config.namesrvAddr</span>=<span class="string">172.16.54.128:9876;172.16.54.130:9876</span></span><br></pre></td></tr></table></figure><p>然后进项目跟目录，运行项目</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> mvn sprint-boot:run</span></span><br></pre></td></tr></table></figure><p>浏览器访问：</p><p><img src="http://cdn.mjava.top/blog/rocketmq_console.png" alt="可视化Console界面"></p>]]></content>
      
      
      <categories>
          
          <category> RocketMq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> RocketMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue Cli3-11创建项目慢的问题</title>
      <link href="/vue/vue-cli3-11-problem/"/>
      <url>/vue/vue-cli3-11-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p><p><img src="/images/vuecreate.png" alt="vuecreate"></p><p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p><h2 id="下载nrm"><a href="#下载nrm" class="headerlink" title="下载nrm"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p><a id="more"></a><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo npm install -g nrm</span><br></pre></td></tr></table></figure><h3 id="测试nrm是否安装成功"><a href="#测试nrm是否安装成功" class="headerlink" title="测试nrm是否安装成功"></a>测试nrm是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm -V</span><br></pre></td></tr></table></figure><p>如果输出版本号，则说明安装成功。</p><h2 id="切换npm源"><a href="#切换npm源" class="headerlink" title="切换npm源"></a>切换npm源</h2>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm ls</span><br></pre></td></tr></table></figure><p>此命令会列出npm的所有源</p><p><img src="/images/nrmls.png" alt="nrmls"></p><p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p><img src="/images/nrmuse.png" alt="nrmuse"></p><h2 id="再次创建vue项目"><a href="#再次创建vue项目" class="headerlink" title="再次创建vue项目"></a>再次创建vue项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vue create rrr2</span><br></pre></td></tr></table></figure><p><img src="/images/vuecreate2.png" alt="vuecreate2"><br><img src="/images/vuecreate3.png" alt="vuecreate3"></p><p>项目成功创建！！！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pit </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker下安装mysql并设置用户权限</title>
      <link href="/docker/docker-mysql/"/>
      <url>/docker/docker-mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li><p>Ubuntu18.04</p></li><li><p>Docker19.03.1</p></li><li><p>Mysql5.7</p></li></ul><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker pull mysql:5.7//拉取镜像到本地</span><br></pre></td></tr></table></figure><a id="more"></a><p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p><p><img src="http://cdn.mjava.top/blog/dockerpullmysql.png" alt="拉取镜像"></p><p>如果显示上面这样，说明已经拉取好了。</p><h3 id="查看镜像"><a href="#查看镜像" class="headerlink" title="查看镜像"></a>查看镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker images//查看本地镜像</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/dockerimages.png" alt="查看本地镜像"></p><h3 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>-d       指定容器运行于后台</li><li>-p       端口映射   主机端口:容器端口</li><li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li><li>-e        容器环境变量</li></ul><p><img src="http://cdn.mjava.top/blog/dockerrun.png" alt="创建容器"></p><p>创建好的话会显示一串随机生产的id</p><h4 id="查看创建好的容器"><a href="#查看创建好的容器" class="headerlink" title="查看创建好的容器"></a>查看创建好的容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker ps -a</span><br></pre></td></tr></table></figure><ul><li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li></ul><p><img src="http://cdn.mjava.top/blog/dockerps.png" alt="查看容器"></p><h2 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h2><h3 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker exec -it mysql5.7 bash</span><br></pre></td></tr></table></figure><ul><li>-i        打开STDIN，用于控制台交互</li><li>-t        分配tty设备，该可以支持终端登录</li></ul><p><img src="http://cdn.mjava.top/blog/dockerexec.png" alt="进入容器"></p><h3 id="登录mysql"><a href="#登录mysql" class="headerlink" title="登录mysql"></a>登录mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p><h3 id="创建测试数据库"><a href="#创建测试数据库" class="headerlink" title="创建测试数据库"></a>创建测试数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">test</span>;</span><br></pre></td></tr></table></figure><h3 id="创建mysql用户"><a href="#创建mysql用户" class="headerlink" title="创建mysql用户"></a>创建mysql用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">'zmh'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'zmh'</span>;</span><br></pre></td></tr></table></figure><p>注：”%”表示可以任意ip访问</p><h3 id="切换mysql用户"><a href="#切换mysql用户" class="headerlink" title="切换mysql用户"></a>切换mysql用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="string">'zmh'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'zmh'</span>;</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> test.* <span class="keyword">to</span> <span class="string">'zmh'</span>@<span class="string">'%'</span>;</span><br></pre></td></tr></table></figure><h3 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure><p>退出mysql命令行</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="客户端连接测试"><a href="#客户端连接测试" class="headerlink" title="客户端连接测试"></a>客户端连接测试</h3><p><img src="http://cdn.mjava.top/blog/sqlclient.png" alt="进入容器"></p><p>成功！</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p><ul><li>sudo docker start mysql5.7       启动mysql5.7容器</li><li>sudo docker stop mysql5.7        停止mysql5.7容器</li><li>sudo docker restart mysql5.7   重启mysql5.7容器</li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Mysql </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装docker</title>
      <link href="/linux/build-docker-pi/"/>
      <url>/linux/build-docker-pi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p><h2 id="使用APT源安装docker"><a href="#使用APT源安装docker" class="headerlink" title="使用APT源安装docker"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash">sudo apt-get install \</span></span><br><span class="line"> apt-transport-https \</span><br><span class="line">     ca-certificates \</span><br><span class="line">     curl \</span><br><span class="line">     gnupg2 \</span><br><span class="line">     lsb-release \</span><br><span class="line">     software-properties-common</span><br><span class="line"><span class="meta">$</span><span class="bash">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="添加docker-ce-软件源"><a href="#添加docker-ce-软件源" class="headerlink" title="添加docker ce 软件源"></a>添加docker ce 软件源</h2><ul><li><p>首先执行以下一行命令，然后记一下输出的结果</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> $(lsb_release -cs)</span></span><br><span class="line">stretch</span><br></pre></td></tr></table></figure></li><li><p>在/etc/apt/sources.list.d目录下新建文件docker.list</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vi /etc/apt/sources.list.d/docker.list</span></span><br></pre></td></tr></table></figure></li><li><p>在文件里添加下面这行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</span><br></pre></td></tr></table></figure></li><li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</span><br></pre></td></tr></table></figure></li><li><p>保存，退出</p></li></ul><h2 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker ce"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> service docker start           启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service docker stop            停止</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service docker status          状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> service docker restart         重启</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
            <tag> RaspberryPi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDK时区问题</title>
      <link href="/linux/problem-jdk-timezone/"/>
      <url>/linux/problem-jdk-timezone/</url>
      
        <content type="html"><![CDATA[<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p><p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p><hr><ul><li>于是改之,三台容器都输入一下代码</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><a id="more"></a><p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p><hr><ul><li>于是又查资料，换另外一种设置时区的方法；</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/clock</span><br></pre></td></tr></table></figure><p>在里面输入如下内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ZONE="Asia/Shanghai"</span><br><span class="line">UTC=false</span><br><span class="line">ARC=false</span><br></pre></td></tr></table></figure><p>保存，重启，测试。。。。。发现还是一样,快疯了</p><hr><ul><li>第三种方法，设置TZ环境变量</li></ul><blockquote><p>设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export TZ='CST-8'</span><br></pre></td></tr></table></figure><p>保存：然后执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source .bashrc</span><br></pre></td></tr></table></figure><p>使设置立即生效。</p><p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的==和equals</title>
      <link href="/java/java-equals/"/>
      <url>/java/java-equals/</url>
      
        <content type="html"><![CDATA[<p>在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；</p><h2 id="首先看看Java的栈空间和堆空间的地址引用"><a href="#首先看看Java的栈空间和堆空间的地址引用" class="headerlink" title="首先看看Java的栈空间和堆空间的地址引用"></a>首先看看Java的栈空间和堆空间的地址引用</h2><p><img src="http://cdn.mjava.top/blog/javaand1.png" alt="Java栈空间和堆空间"></p><h2 id="的说明"><a href="#的说明" class="headerlink" title="==的说明"></a>==的说明</h2><p>  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。</p><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1=<span class="keyword">new</span> String(<span class="string">"t1"</span>);</span><br><span class="line">        String s2=<span class="keyword">new</span> String(<span class="string">"t2"</span>);</span><br><span class="line">        String s3=<span class="keyword">new</span> String(<span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        String s4=<span class="keyword">new</span> String(<span class="string">"t3"</span>);</span><br><span class="line">        String s5=<span class="string">"t3"</span>;</span><br><span class="line">        String s6=<span class="string">"t3"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"s2==s3:"</span>+(s2==s3));</span><br><span class="line">        System.out.println(<span class="string">"s5==s6:"</span>+(s5==s6));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><img src="http://cdn.mjava.top/blog/javaand2.png" alt="控制台输出"></p><blockquote><p>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p></blockquote><h2 id="equals的说明"><a href="#equals的说明" class="headerlink" title="equals的说明"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        String anotherString = (String)anObject;</span><br><span class="line">        <span class="keyword">int</span> n = value.length;</span><br><span class="line">        <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">            <span class="keyword">char</span> v1[] = value;</span><br><span class="line">            <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先它会对比地址，如果地址相等，就直接返回true</li><li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中String判断为空的4大方法比较</title>
      <link href="/java/java-isnull-four/"/>
      <url>/java/java-isnull-four/</url>
      
        <content type="html"><![CDATA[<h2 id="一-四大方法"><a href="#一-四大方法" class="headerlink" title="一.四大方法"></a>一.四大方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String a=<span class="string">""</span>;</span><br><span class="line">       String a2=<span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">       System.out.println(a==<span class="string">""</span>);</span><br><span class="line">       System.out.println(a2==<span class="string">""</span>);</span><br><span class="line">       System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">       System.out.println(a==<span class="keyword">null</span>);</span><br><span class="line">       System.out.println(a2==<span class="keyword">null</span>);</span><br><span class="line">       System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">       System.out.println(a.length()&lt;=<span class="number">0</span>);</span><br><span class="line">       System.out.println(a2.length()&lt;=<span class="number">0</span>);</span><br><span class="line">       System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">       System.out.println(a.isEmpty());</span><br><span class="line">       System.out.println(a2.isEmpty());</span><br><span class="line">       System.out.println(<span class="string">"------------------------------"</span>);</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="二-输出结果"><a href="#二-输出结果" class="headerlink" title="二.输出结果"></a>二.输出结果</h2><p><img src="http://cdn.mjava.top/blog/javaands1.png" alt="控制台输出"></p><blockquote><p>可以看到用”==”判断的那组出现了不一致的情况</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer和int区别</title>
      <link href="/java/java-integer-int/"/>
      <url>/java/java-integer-int/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两者本质区别"><a href="#1-两者本质区别" class="headerlink" title="1.两者本质区别"></a>1.两者本质区别</h2><p>  int是Java的基础数据类型之一，而Integer是基于int进行封装的一个对象</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>递归算法-获取json中指定key的所有值</title>
      <link href="/algorithm/algorithm-recursive-01/"/>
      <url>/algorithm/algorithm-recursive-01/</url>
      
        <content type="html"><![CDATA[<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p><h2 id="1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包"><a href="#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包" class="headerlink" title="1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.58&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-创建两个工具类方法，用来判断传入的是不是json对象或json数组"><a href="#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组" class="headerlink" title="2.创建两个工具类方法，用来判断传入的是不是json对象或json数组"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJSONObj</span><span class="params">(Object json)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> json <span class="keyword">instanceof</span> JSONObject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isJSONArray</span><span class="params">(Object json)</span></span>&#123;</span><br><span class="line">   <span class="keyword">return</span> json <span class="keyword">instanceof</span> JSONArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p></blockquote><h2 id="3-建立核心重载方法"><a href="#3-建立核心重载方法" class="headerlink" title="3.建立核心重载方法"></a>3.建立核心重载方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getJSONValue</span><span class="params">(JSONObject json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object j:json.keySet())&#123;</span><br><span class="line">        <span class="keyword">if</span>(isJSONObj(json.get(j)))&#123;</span><br><span class="line">            <span class="comment">//是对象</span></span><br><span class="line">            JSONObject j2= JSON.parseObject(json.get(j).toString());</span><br><span class="line">            getJSONValue(j2,k,list);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isJSONArray(json.get(j)))&#123;</span><br><span class="line">            JSONArray j3=JSON.parseArray(json.get(j).toString());</span><br><span class="line">            <span class="comment">//是数组</span></span><br><span class="line">            getJSONValue(j3,k,list);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(j==k)&#123;</span><br><span class="line">            <span class="comment">//是字符串</span></span><br><span class="line">            list.add(json.get(j).toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getJSONValue</span><span class="params">(JSONArray json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Object j:json)&#123;</span><br><span class="line">        <span class="keyword">if</span>(isJSONObj(j))&#123;</span><br><span class="line">            <span class="comment">//是对象</span></span><br><span class="line">            JSONObject j2= JSON.parseObject(j.toString());</span><br><span class="line">            getJSONValue(j2,k,list);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(isJSONArray(j))&#123;</span><br><span class="line">            <span class="comment">//是数组</span></span><br><span class="line">            JSONArray j3=JSON.parseArray(j.toString());</span><br><span class="line">            getJSONValue(j3,k,list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的"><a href="#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的" class="headerlink" title="4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><p><a href="http://cdn.mjava.top/blog/demojson.txt" rel="noopener" target="_blank">示例json</a></p><h2 id="5-调用方法"><a href="#5-调用方法" class="headerlink" title="5.调用方法"></a>5.调用方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    File file=<span class="keyword">new</span> File(demo1.class.getResource(<span class="string">"/2.json"</span>).getPath());</span><br><span class="line">    FileInputStream fileInputStream=<span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">    InputStreamReader inputStreamReader=<span class="keyword">new</span> InputStreamReader(fileInputStream);</span><br><span class="line">    BufferedReader bufferedReader=<span class="keyword">new</span> BufferedReader(inputStreamReader);</span><br><span class="line">    String line=<span class="string">""</span>;</span><br><span class="line">    StringBuffer json=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">while</span> ((line=bufferedReader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        json.append(line);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    JSONObject j3=JSON.parseObject(json.toString());</span><br><span class="line">    List&lt;String&gt; mid=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    getJSONValue(j3,<span class="string">"interfaceId"</span>,mid);</span><br><span class="line">    System.out.println(mid.toString());</span><br><span class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">    System.out.println(e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-成功获取"><a href="#6-成功获取" class="headerlink" title="6.成功获取"></a>6.成功获取</h2><p><img src="http://cdn.mjava.top/blog/json2.png" alt="控制台返回"></p><blockquote><p>demo源码地址：<a href="https://github.com/z573419235/studyDemo" rel="noopener" target="_blank">https://github.com/z573419235/studyDemo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Recursive </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Base64影响泰文字段取值问题</title>
      <link href="/java/problem-java-base64/"/>
      <url>/java/problem-java-base64/</url>
      
        <content type="html"><![CDATA[<h2 id="今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作"><a href="#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作" class="headerlink" title="今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><blockquote><p>what,日志里面竟然有他们传过来的泰文的值</p></blockquote><h4 id="对比ios和android的数据"><a href="#对比ios和android的数据" class="headerlink" title="对比ios和android的数据"></a>对比ios和android的数据</h4><blockquote><p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p></blockquote><a id="more"></a><h4 id="确定问题"><a href="#确定问题" class="headerlink" title="确定问题"></a>确定问题</h4><blockquote><p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p></blockquote><h4 id="修复bug"><a href="#修复bug" class="headerlink" title="修复bug"></a>修复bug</h4><blockquote><p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p></blockquote><p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Pit </tag>
            
            <tag> Base64 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
