<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>灰色Code</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mjava.top/"/>
  <updated>2020-05-19T12:28:02.162Z</updated>
  <id>https://mjava.top/</id>
  
  <author>
    <name>H&amp;K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于SpringCloud搭建Spring-security-oauth认证服务器</title>
    <link href="https://mjava.top/archive/web-security/spring-security-oauth-server-demo/"/>
    <id>https://mjava.top/archive/web-security/spring-security-oauth-server-demo/</id>
    <published>2020-05-19T12:25:06.000Z</published>
    <updated>2020-05-19T12:28:02.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p><p>所以事先要准备好：</p><ul><li>Redis</li><li>Mysql</li></ul><p>并且Mysql执行<a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql" rel="noopener" target="_blank">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">oauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">(<span class="string">"sunline"</span>,<span class="string">"&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG"</span>,<span class="string">"password"</span>,<span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>{bcrypt}</code></p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--security-oauth--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">zmh</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zmh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9991</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/oauthServer</span></span><br></pre></td></tr></table></figure><h3 id="创建用户详情服务类"><a href="#创建用户详情服务类" class="headerlink" title="创建用户详情服务类"></a>创建用户详情服务类</h3><p><img src="http://cdn.mjava.top/blog/20200519194059.png" alt></p><h4 id="创建权限控制类"><a href="#创建权限控制类" class="headerlink" title="创建权限控制类"></a>创建权限控制类</h4><p><img src="http://cdn.mjava.top/blog/20200519194128.png" alt></p><h3 id="创建认证授权类"><a href="#创建认证授权类" class="headerlink" title="创建认证授权类"></a>创建认证授权类</h3><p><img src="http://cdn.mjava.top/blog/20200519194207.png" alt></p><h2 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194446.png" alt></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accessToken"</span>: <span class="string">"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086"</span>,</span><br><span class="line">    <span class="attr">"expiration"</span>: <span class="string">"2020-05-19T21:11:39.883+0000"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: [</span><br><span class="line">        <span class="string">"all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tokenType"</span>: <span class="string">"bearer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问资源"><a href="#访问资源" class="headerlink" title="访问资源"></a>访问资源</h3><p>带上获取到的令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194803.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h2&gt;&lt;p&gt;这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；&lt;/p&gt;&lt;p&gt;所以事先要准备好：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Mysql&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;并且Mysql执行&lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Spring-security-oauth初始化Sql&lt;/a&gt;这个SQL，初始化Spring-security-oauth所需要的表。然后执行&lt;/p&gt;
    
    </summary>
    
    
      <category term="web-security" scheme="https://mjava.top/categories/web-security/"/>
    
    
      <category term="OAuth" scheme="https://mjava.top/tags/OAuth/"/>
    
      <category term="spring-security" scheme="https://mjava.top/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>SSO单点登录和CAS框架</title>
    <link href="https://mjava.top/archive/web-security/sso-and-cas/"/>
    <id>https://mjava.top/archive/web-security/sso-and-cas/</id>
    <published>2020-05-14T11:27:14.000Z</published>
    <updated>2020-05-14T11:29:21.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href="https://zh.wikipedia.org/wiki/存取控制" rel="noopener" target="_blank">访问控制</a>的属性。当拥有这项属性时，当用户<a href="https://zh.wikipedia.org/wiki/登入" rel="noopener" target="_blank">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href="https://zh.wikipedia.org/wiki/轻型目录访问协议" rel="noopener" target="_blank">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p><a id="more"></a><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用单点登录的好处包括：</p><ul><li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li><li>减少因不同的用户名和密码组合而带来的<a href="https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1" rel="noopener" target="_blank">密码疲劳</a>。</li><li>减少为相同的身份重新输入密码所花费的时间。</li><li>因减少与密码相关的调用IT<a href="https://zh.wikipedia.org/wiki/服务台" rel="noopener" target="_blank">服务台</a>的次数而降低IT成本。<a href="https://zh.wikipedia.org/wiki/單一登入#cite_note-1" rel="noopener" target="_blank">[1]</a></li></ul><p>SSO为所有其它应用程序和系统，以集中的<a href="https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1" rel="noopener" target="_blank">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p><h2 id="CAS框架"><a href="#CAS框架" class="headerlink" title="CAS框架"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><p>CAS是由<a href="https://zh.wikipedia.org/wiki/耶鲁大学" rel="noopener" target="_blank">耶鲁大学</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1" rel="noopener" target="_blank">[1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p></li><li><p>2004年12月，CAS成为<a href="https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1" rel="noopener" target="_blank">Jasig</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2" rel="noopener" target="_blank">[2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p></li><li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p></li><li><p>2006年12月，<a href="https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1" rel="noopener" target="_blank">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。<a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3" rel="noopener" target="_blank">[3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p></li><li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p></li><li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSO单点登录&quot;&gt;&lt;a href=&quot;#SSO单点登录&quot; class=&quot;headerlink&quot; title=&quot;SSO单点登录&quot;&gt;&lt;/a&gt;SSO单点登录&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单点登录&lt;/strong&gt;（英语：Single sign-on，缩写为 SSO），又译为&lt;strong&gt;单一签入&lt;/strong&gt;，一种对于许多相互关连，但是又是各自独立的软件系统，提供&lt;a href=&quot;https://zh.wikipedia.org/wiki/存取控制&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;访问控制&lt;/a&gt;的属性。当拥有这项属性时，当用户&lt;a href=&quot;https://zh.wikipedia.org/wiki/登入&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;登录&lt;/a&gt;时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以&lt;a href=&quot;https://zh.wikipedia.org/wiki/轻型目录访问协议&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;轻型目录访问协议&lt;/a&gt;（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，&lt;strong&gt;单一退出&lt;/strong&gt;（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WebSecurity" scheme="https://mjava.top/categories/WebSecurity/"/>
    
    
      <category term="SSO" scheme="https://mjava.top/tags/SSO/"/>
    
      <category term="CAS框架" scheme="https://mjava.top/tags/CAS%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2.0与JWT</title>
    <link href="https://mjava.top/archive/web-security/oauth-and-jwt/"/>
    <id>https://mjava.top/archive/web-security/oauth-and-jwt/</id>
    <published>2020-05-12T06:59:43.000Z</published>
    <updated>2020-05-12T07:04:08.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>客户端：相当于访问受保护资源的软件</li><li>授权服务器：授予客户端令牌的服务</li><li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li><li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li></ul><a id="more"></a><h3 id="授权类型"><a href="#授权类型" class="headerlink" title="授权类型"></a>授权类型</h3><h4 id="授权码许可类型"><a href="#授权码许可类型" class="headerlink" title="授权码许可类型"></a>授权码许可类型<img src="http://cdn.mjava.top/blog/20200512090246.jpg" alt="授权码许可类型"></h4><hr><h4 id="隐式许可类型"><a href="#隐式许可类型" class="headerlink" title="隐式许可类型"></a>隐式许可类型<img src="http://cdn.mjava.top/blog/20200512135621.jpg" alt="隐式许可类型"></h4><hr><h4 id="客户端凭证许可类型"><a href="#客户端凭证许可类型" class="headerlink" title="客户端凭证许可类型"></a>客户端凭证许可类型<img src="http://cdn.mjava.top/blog/20200512135605.jpg" alt="客户端凭证许可类型"></h4><hr><h4 id="资源拥有者凭证许可类型-账号密码模式"><a href="#资源拥有者凭证许可类型-账号密码模式" class="headerlink" title="资源拥有者凭证许可类型(账号密码模式)"></a>资源拥有者凭证许可类型(账号密码模式)<img src="http://cdn.mjava.top/blog/20200512135635.jpg" alt="资源拥有者凭证许可类型(账号密码模式)"></h4><hr><h4 id="断言许可类型"><a href="#断言许可类型" class="headerlink" title="断言许可类型"></a>断言许可类型<img src="http://cdn.mjava.top/blog/20200512135531.jpg" alt="断言许可类型"></h4><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p><p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p><ul><li>注册声明：JWT官方提供的声明，参考资料:<a href="https://tools.ietf.org/html/rfc7519#section-4.1" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.1</a></li><li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href="https://tools.ietf.org/html/rfc7519#section-4.2" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.2</a></li><li>私有声明：完全用户自定义，参考资料<a href="https://tools.ietf.org/html/rfc7519#section-4.3" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.3</a></li></ul><p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OAuth2-0&quot;&gt;&lt;a href=&quot;#OAuth2-0&quot; class=&quot;headerlink&quot; title=&quot;OAuth2.0&quot;&gt;&lt;/a&gt;OAuth2.0&lt;/h2&gt;&lt;p&gt;OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求&lt;code&gt;令牌&lt;/code&gt;，并用这个令牌来访问资源拥有者的资源。&lt;/p&gt;&lt;h3 id=&quot;角色&quot;&gt;&lt;a href=&quot;#角色&quot; class=&quot;headerlink&quot; title=&quot;角色&quot;&gt;&lt;/a&gt;角色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端：相当于访问受保护资源的软件&lt;/li&gt;
&lt;li&gt;授权服务器：授予客户端令牌的服务&lt;/li&gt;
&lt;li&gt;资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端&lt;/li&gt;
&lt;li&gt;受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Web-Security" scheme="https://mjava.top/categories/Web-Security/"/>
    
    
      <category term="OAuth2.0" scheme="https://mjava.top/tags/OAuth2-0/"/>
    
      <category term="JWT" scheme="https://mjava.top/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>fastDFS安装使用教程</title>
    <link href="https://mjava.top/linux/linux-fastdfs-install/"/>
    <id>https://mjava.top/linux/linux-fastdfs-install/</id>
    <published>2020-05-07T05:34:10.000Z</published>
    <updated>2020-05-07T07:29:32.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><a id="more"></a><ul><li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p></li><li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p></li><li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p></li><li><p>结构图<img src="http://cdn.mjava.top/blog/20200507152801.webp" alt></p></li></ul><ul><li>上传文件流程<img src="http://cdn.mjava.top/blog/20200507152857.webp" alt></li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><table><thead><tr><th>系统及软件版本</th><th>Git开源地址</th></tr></thead><tbody><tr><td>Centos 7</td><td>#</td></tr><tr><td>libfastcommon V1.0.43</td><td><a href="https://github.com/happyfish100/fastdfs" rel="noopener" target="_blank">https://github.com/happyfish100/fastdfs</a></td></tr><tr><td>fastdfs V6.06</td><td><a href="https://github.com/happyfish100/libfastcommon" rel="noopener" target="_blank">https://github.com/happyfish100/libfastcommon</a></td></tr></tbody></table><blockquote><p>我虚拟机装的Centos7的ip地址是172.16.54.137</p></blockquote><h2 id="安装前工作"><a href="#安装前工作" class="headerlink" title="安装前工作"></a>安装前工作</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote><p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure><h3 id="下载所需安装包"><a href="#下载所需安装包" class="headerlink" title="下载所需安装包"></a>下载所需安装包</h3><ul><li>libfastcommon</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure><ul><li>fastDFS</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装fastDFS环境"><a href="#安装fastDFS环境" class="headerlink" title="安装fastDFS环境"></a>安装fastDFS环境</h3><ul><li>解压安装<code>libfastcommon</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><h2 id="安装fastDFS"><a href="#安装fastDFS" class="headerlink" title="安装fastDFS"></a>安装fastDFS</h2><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><blockquote><p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p><ul><li>client.conf.sample    fastDFS客户端配置文件</li><li>storage.conf.sample</li><li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li><li>tracker.conf.sample</li></ul></blockquote><h3 id="配置并启动Tracker"><a href="#配置并启动Tracker" class="headerlink" title="配置并启动Tracker"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure><p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Tracker</span></span><br><span class="line">service fdfs_trackerd start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Tracker</span></span><br><span class="line">service fdfs_trackerd stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure><h3 id="配置并启动Storage"><a href="#配置并启动Storage" class="headerlink" title="配置并启动Storage"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure><p>修改<code>storage.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存放文件地址</span></span><br><span class="line">store_path0=/data/fastdfs/file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Storage</span></span><br><span class="line">service fdfs_storaged start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Storage</span></span><br><span class="line">service fdfs_storaged stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure><h3 id="上传文件测试"><a href="#上传文件测试" class="headerlink" title="上传文件测试"></a>上传文件测试</h3><blockquote><p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">复制一份客户端配置文件</span></span><br><span class="line">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure><p>修改<code>client.config</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/client</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">上传成功后返回</span></span><br><span class="line">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/20200506215501.png" alt></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote><p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p></blockquote><p>首先创建一个文件夹，存放nginx的配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件夹</span></span><br><span class="line">mkdir -p /data/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">进入文件夹并下载nginx配置文件</span></span><br><span class="line">cd /data/nginx &amp;&amp; wget http://cdn.mjava.top/file/nginx.conf</span><br></pre></td></tr></table></figure><blockquote><p>配置文件已经修改过了，直接下载即可使用</p></blockquote><p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure><p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class="line">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p><p><img src="http://cdn.mjava.top/blog/20200507132841.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FastDFS简介&quot;&gt;&lt;a href=&quot;#FastDFS简介&quot; class=&quot;headerlink&quot; title=&quot;FastDFS简介&quot;&gt;&lt;/a&gt;FastDFS简介&lt;/h2&gt;&lt;p&gt;FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &amp;lt; file_size &amp;lt;500MB）为载体的在线服务。&lt;/p&gt;&lt;p&gt;FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://mjava.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://mjava.top/tags/Linux/"/>
    
      <category term="fastDFS" scheme="https://mjava.top/tags/fastDFS/"/>
    
  </entry>
  
  <entry>
    <title>插入emoji到mysql时提示了一个表里不存在的字段的错误</title>
    <link href="https://mjava.top/mysql/mysql-utf8mb4-error/"/>
    <id>https://mjava.top/mysql/mysql-utf8mb4-error/</id>
    <published>2020-04-29T09:16:27.000Z</published>
    <updated>2020-04-29T09:18:36.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\xF0\x9F\x98\x98' for column 'user_name' at row 14</span><br></pre></td></tr></table></figure><a id="more"></a><p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p><h2 id="２-解决方案"><a href="#２-解决方案" class="headerlink" title="２.解决方案"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p><p><img src="http://cdn.mjava.top/blog/20200429171012.png" alt></p><p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p><p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h2&gt;&lt;p&gt;由于公司前端有需求，需要在&lt;code&gt;tiny_user_info&lt;/code&gt;表的&lt;code&gt;nickname&lt;/code&gt;这个字段里存入emoji表情，于是我熟练地将这个字段修改为&lt;code&gt;utf8mb4&lt;/code&gt;，改好后测试插入一条带emoji数据。于是报了这个错误：&lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: &#39;\xF0\x9F\x98\x98&#39; for column &#39;user_name&#39; at row 14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://mjava.top/categories/MySQL/"/>
    
    
      <category term="Pit" scheme="https://mjava.top/tags/Pit/"/>
    
      <category term="MySQL" scheme="https://mjava.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】手写平衡二叉树（AVL）</title>
    <link href="https://mjava.top/algorithm/algorithm-avltree-01/"/>
    <id>https://mjava.top/algorithm/algorithm-avltree-01/</id>
    <published>2020-02-01T07:56:00.000Z</published>
    <updated>2020-02-04T03:24:07.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【数据结构】手写平衡二叉树（AVL）"><a href="#【数据结构】手写平衡二叉树（AVL）" class="headerlink" title="【数据结构】手写平衡二叉树（AVL）"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src="http://cdn.mjava.top/blog/20200201165139.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p><p>本文源代码：<a href="https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java" rel="noopener" target="_blank">手写AVL树</a></p></blockquote><h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href="https://baike.baidu.com/item/平衡二叉树/10421057" rel="noopener" target="_blank">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p><a id="more"></a><h3 id="平衡二叉树基本特点"><a href="#平衡二叉树基本特点" class="headerlink" title="平衡二叉树基本特点"></a>平衡二叉树基本特点</h3><ul><li>左右子树深度差不能大于1</li><li>左边子树永远比根节点小</li><li>右边子树永远比根节点大</li></ul><h3 id="平衡二叉树基本结构及操作"><a href="#平衡二叉树基本结构及操作" class="headerlink" title="平衡二叉树基本结构及操作"></a>平衡二叉树基本结构及操作</h3><ul><li>左左结构——右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153234.jpg" alt="左左结构"></p><ul><li>右右结构——左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153301.jpg" alt="右右结构"></p><ul><li>左右结构——左子先左旋，然后整体右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153329.jpg" alt="左右结构"></p><ul><li>右左结构——右子先右旋，然后整体左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153403.jpg" alt="右左结构"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node rootNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二叉树节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Node parent; <span class="comment">//父</span></span><br><span class="line">        <span class="keyword">public</span> Node left;<span class="comment">//左子树</span></span><br><span class="line">        <span class="keyword">public</span> Node right;<span class="comment">//右子树</span></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> data;<span class="comment">//存放的数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> depth;<span class="comment">//深度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> balance;<span class="comment">//平衡因子</span></span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data=data;</span><br><span class="line">            <span class="keyword">this</span>.depth=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.balance=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>暴露一个方法给外部调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**添加数据方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootNode=<span class="keyword">new</span> Node(data);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.insert(rootNode,data);</span><br><span class="line">        <span class="comment">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode.parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rootNode=<span class="keyword">this</span>.rootNode.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际内部是调用另一个<code>insert</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//插入的数据比根小</span></span><br><span class="line">    <span class="keyword">if</span> (data&lt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            root.left=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.left.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.left,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入的数据比根大</span></span><br><span class="line">    <span class="keyword">if</span> (data&gt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right==<span class="keyword">null</span>) &#123;</span><br><span class="line">            root.right=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.right.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.right,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.balance&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断左子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.left.balance&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.leftTurn(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.rightTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.balance&lt;-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断右子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.right.balance&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightTurn(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leftTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    root.depth=<span class="keyword">this</span>.getDepth(root);</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><blockquote><p>右旋的操作如下</p><ul><li>我父变成左子的父</li><li>左子变成我的父</li><li>我变成左子的右子</li><li>左子的右子变成我的左子</li><li>(当左子的右子存在时)我变成左子的右子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node leftSon=node.left;</span><br><span class="line">    Node leftSon_rightSon=leftSon.right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            <span class="comment">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class="line">            parent.left=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            <span class="comment">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class="line">            parent.right=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    leftSon.parent=parent;</span><br><span class="line">    node.parent=leftSon;</span><br><span class="line">    leftSon.right=node;</span><br><span class="line">    node.left=leftSon_rightSon;</span><br><span class="line">    <span class="comment">//如果左子的右子确实存在的</span></span><br><span class="line">    <span class="keyword">if</span> (leftSon_rightSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//我变成左子的右子的父</span></span><br><span class="line">        leftSon_rightSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新计算深度和平衡因子</span></span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    leftSon.depth=<span class="keyword">this</span>.getDepth(leftSon);</span><br><span class="line">    leftSon.balance=<span class="keyword">this</span>.getBalance(leftSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><blockquote><p>左旋的操作如下</p><ul><li>我的父变右子的父</li><li>右子变成我的父</li><li>我变成右子的左子</li><li>右子的左子变成我的右子</li><li>(当右子的左子存在时)我变成右子的左子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node rightSon=node.right;</span><br><span class="line">    Node rightSon_leftSon=rightSon.left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            parent.left=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            parent.right=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rightSon.parent=parent;</span><br><span class="line">    node.parent=rightSon;</span><br><span class="line">    rightSon.left=node;</span><br><span class="line">    node.right=rightSon_leftSon;</span><br><span class="line">    <span class="keyword">if</span> (rightSon_leftSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightSon_leftSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    rightSon.depth=<span class="keyword">this</span>.getDepth(rightSon);</span><br><span class="line">    rightSon.balance=<span class="keyword">this</span>.getBalance(rightSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算深度"><a href="#计算深度" class="headerlink" title="计算深度"></a>计算深度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算深度*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right==<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right!=<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class="line">    &#125;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算平衡因子"><a href="#计算平衡因子" class="headerlink" title="计算平衡因子"></a>计算平衡因子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算左右深度差*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        leftDepth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightDepth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *      左减右</span></span><br><span class="line"><span class="comment">         * 为负数：右边子树高</span></span><br><span class="line"><span class="comment">         * 为正数: 左边子树高</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">    <span class="keyword">return</span> leftDepth-rightDepth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p><ul><li><p><a href="https://visualgo.net/zh" rel="noopener" target="_blank">visualgo在线</a></p></li><li><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" rel="noopener" target="_blank">数据结构可视化</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【数据结构】手写平衡二叉树（AVL）&quot;&gt;&lt;a href=&quot;#【数据结构】手写平衡二叉树（AVL）&quot; class=&quot;headerlink&quot; title=&quot;【数据结构】手写平衡二叉树（AVL）&quot;&gt;&lt;/a&gt;【数据结构】手写平衡二叉树（AVL）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200201165139.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;p&gt;本文源代码：&lt;a href=&quot;https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;手写AVL树&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;什么是平衡二叉树？&quot;&gt;&lt;a href=&quot;#什么是平衡二叉树？&quot; class=&quot;headerlink&quot; title=&quot;什么是平衡二叉树？&quot;&gt;&lt;/a&gt;什么是平衡二叉树？&lt;/h2&gt;&lt;p&gt;平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵&lt;a href=&quot;https://baike.baidu.com/item/平衡二叉树/10421057&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;平衡二叉树&lt;/a&gt;。AVL树查找的时间复杂度为O(logN)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://mjava.top/categories/Algorithm/"/>
    
    
      <category term="AVL" scheme="https://mjava.top/tags/AVL/"/>
    
      <category term="数据结构" scheme="https://mjava.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="平衡二叉树" scheme="https://mjava.top/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉树" scheme="https://mjava.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【转】免费可商用，最值得收藏的10个插画素材网站</title>
    <link href="https://mjava.top/recommend/recommend-tool-1/"/>
    <id>https://mjava.top/recommend/recommend-tool-1/</id>
    <published>2020-01-16T01:24:52.000Z</published>
    <updated>2020-01-16T01:32:59.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="http://liujinkai.com/2019/10/18/10-best-free-illustration/" rel="noopener" target="_blank">凯凯刘</a></p></blockquote><p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p><a id="more"></a><h2 id="IRA-Design"><a href="#IRA-Design" class="headerlink" title="IRA Design"></a>IRA Design</h2><p>网站：<a href="https://iradesign.io/" rel="noopener" target="_blank">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p><p><img src="http://cdn.mjava.top/blog/20200116092835.png" alt></p><h2 id="Absurd-Design"><a href="#Absurd-Design" class="headerlink" title="Absurd Design"></a>Absurd Design</h2><p>网站：<a href="https://absurd.design/" rel="noopener" target="_blank">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p><p><img src="http://cdn.mjava.top/blog/20200116092907.png" alt></p><h2 id="Ouch"><a href="#Ouch" class="headerlink" title="Ouch!"></a>Ouch!</h2><p>网站：<a href="https://icons8.com/ouch" rel="noopener" target="_blank">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p><p><img src="http://cdn.mjava.top/blog/20200116092945.png" alt></p><h2 id="unDraw"><a href="#unDraw" class="headerlink" title="unDraw"></a>unDraw</h2><p>网站：<a href="https://undraw.co/" rel="noopener" target="_blank">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p><p><img src="http://cdn.mjava.top/blog/20200116093011.png" alt></p><h2 id="Pngtree"><a href="#Pngtree" class="headerlink" title="Pngtree"></a>Pngtree</h2><p>网站：<a href="https://pngtree.com/" rel="noopener" target="_blank">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p><p><img src="http://cdn.mjava.top/blog/20200116093038.png" alt></p><h2 id="Drawkit"><a href="#Drawkit" class="headerlink" title="Drawkit"></a>Drawkit</h2><p>网站：<a href="https://www.drawkit.io/" rel="noopener" target="_blank">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p><p><img src="http://cdn.mjava.top/blog/20200116093103.png" alt></p><h2 id="Humaaans"><a href="#Humaaans" class="headerlink" title="Humaaans"></a>Humaaans</h2><p>网站：<a href="https://www.humaaans.com/" rel="noopener" target="_blank">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p><p><img src="http://cdn.mjava.top/blog/20200116093137.png" alt></p><h2 id="Manypixels"><a href="#Manypixels" class="headerlink" title="Manypixels"></a>Manypixels</h2><p>网站：<a href="https://www.manypixels.co/gallery/" rel="noopener" target="_blank">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093201.png" alt></p><h2 id="Lukaszadam"><a href="#Lukaszadam" class="headerlink" title="Lukaszadam"></a>Lukaszadam</h2><p>网站：<a href="https://lukaszadam.com/illustrations" rel="noopener" target="_blank">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093226.png" alt></p><h2 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a>Pixabay</h2><p>网站：<a href="https://pixabay.com/illustrations/search/" rel="noopener" target="_blank">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p><p><img src="http://cdn.mjava.top/blog/20200116093253.png" alt></p>]]></content>
    
    <summary type="html">
    
      现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。
    
    </summary>
    
    
      <category term="Recommend" scheme="https://mjava.top/categories/Recommend/"/>
    
    
      <category term="UI" scheme="https://mjava.top/tags/UI/"/>
    
      <category term="推荐" scheme="https://mjava.top/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】你真的了解ArrayDeque嘛？</title>
    <link href="https://mjava.top/java/java-arraydeque-source-1/"/>
    <id>https://mjava.top/java/java-arraydeque-source-1/</id>
    <published>2020-01-08T06:00:51.000Z</published>
    <updated>2020-01-09T08:14:16.745Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上篇文章说<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>也可以实现<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,因为他层是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">数组</strong>，而队列和栈都是只要<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>都是通过实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口来获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口通过继承<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">双端队列</code>，由此可以获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。为了空间能得到充分利用，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>使用了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>；还有<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>可以插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值，而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的。</p><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是双端队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">一般队列是这样的：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104246.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">双端队列是这样的</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104215.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是循环队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104300.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p></blockquote><h2 id="hdeque" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">Deque有什么？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">话不多说，看图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107134323.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107232905.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这边队列的每种功能都有两个方法，其中<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">remove()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">element()</code>如果操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">offer()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">poll()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peek()</code>操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">返回null或者false</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">其实真正用到的就<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addLast()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">pollFirst</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">getFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peekFirst</code>；</p><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">ArrayDeque内部就只有4个变量，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">对象数组element[]</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头指针head</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">尾指针tail</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107235523.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">构造方法和其他集合一样，有<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">有参构造</strong>和<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">无参构造</strong></p><h3 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">很简单，直接初始化一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">容量为16</strong>的对象数组</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">16</span>];<br>}<br></code></pre><h3 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造</span></h3><h4 id="hint" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入参数为int数</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">void</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">allocateElements</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">calculateSize(int numElements)</strong>调整传入的值大小</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003104.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>这个算法</strong></p><h4 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入的参数为集合对象</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">第一步调用了和上面一样的方法，这里多了个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addAll()</code>方法</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">addAll(Collection<!--? extends E--> c)</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这边复制时并没有用和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">System.arraycopy()</code>方法，而是采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">for循环</code>来调用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值的，而其他集合里面有的是可以传<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的，所以这边采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>一个一个的加，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法如果传入的值为空的话，就会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p></blockquote><h2 id="haddlast" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addLast()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">核心算法</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">举一些例子：当<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">8</span></span></span></span>，<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">7</span></span></span></span></p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">0&amp;7=0</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108095155.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">doubleCapacity()</strong>扩容为原来的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108103710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">方便理解，我画下上扩容的流程图，比如head在中间：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108112208.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hpollfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">pollFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">移除头部数据</p><h3 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114243.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">删除的时候并没有像<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样移动数据，而只是移动了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的位置</p></blockquote><h3 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114844.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hgetfirstpeekfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">getFirst()和peekFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这两个方法都是一样的，都是直接返回<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的数据，区别就是一个会抛异常，一个不会</p><h3 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码分析</span></h3><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">getFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">getFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">@SuppressWarnings</span>(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"unchecked"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">if</span>&nbsp;(result&nbsp;==&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">throw</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;result;<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">peekFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">peekFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre><h2 id="haddfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108131919.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里还是用了上面讲了位与算法，算出<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>的值，然后插入数据</p><h3 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108133154.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">清空这个操作是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的元素开始删除，直到<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>=<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">tail</code>，清空完成；</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108134034.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hsize" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">size()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>一样定义个size不好嘛？<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">size</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br>}<br></code></pre><h2 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面的方法基本上有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">核心算法：</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href="https://mjava.top/java/java-arraylist-source-1" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>每次扩容为原来数组长度的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值</p></div>]]></content>
    
    <summary type="html">
    
      LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="源码解析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="ArrayDeque" scheme="https://mjava.top/tags/ArrayDeque/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】想了解LinkedList？看这篇文章就对了</title>
    <link href="https://mjava.top/java/java-linkedlist-source-1/"/>
    <id>https://mjava.top/java/java-linkedlist-source-1/</id>
    <published>2020-01-04T16:21:43.000Z</published>
    <updated>2020-01-09T08:18:24.464Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">本文基于JDK1.8</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>由于实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口，所以可以当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>使用。不过一般要用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>或<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>的时候推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,所以这里就不讲<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href="https://mjava.top/java/java-arraylist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>一样，讲些常用的方法。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部是由<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">双链表</strong>组成的，里面存放着一个个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>又包含三个元素(<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>):</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据</li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">链表的第一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，最后个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code></p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">我简单的画了一张图，可以看下</p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213058.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">本文内容</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104164627.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">相比于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Arraylist</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部变量就少得多，就只有三个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>存这当前元素的个数，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">first</code>指向链表的第一个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">last</code>指向列表的最后一个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104170249.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造方法</span></h3><h4 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre><h4 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">无参构造只是初始化了数据，并未做任何操作<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">(初始化  size=0  first=null   last=null)</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104172851.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造方法</span></h3><h4 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;oldList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre><h4 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104174143.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hget" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hgetintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get(int index)</span></h3><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p></blockquote><h4 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰2"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰3"</span>);<br>list.get(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">2</span>);<br></code></pre><h4 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183636.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkElementIndex(int index)</strong>检查越界</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183853.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183939.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">node(int index)</strong>查找Node</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200109160648.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hadd" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="haddee" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(E e)</span></h3><h4 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175255.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkLast(E e)</strong>连接最后一个元素</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175907.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">Node&lt;E&gt;</strong>内部类</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">就像开头说的，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>里有三个，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">static</span>&nbsp;<span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">class</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">Node</span>&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><h4 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">第一次添加时的流程示意图</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224556.jpg" alt="第一次添加时的流程示意图" title="第一次添加时的流程示意图" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">第一次添加时的流程示意图</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">不是第一次添加</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213234.jpg" alt="不是第一次添加" title="不是第一次添加" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">不是第一次添加</figcaption></figure><h3 id="haddintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(int index, E element)</span></h3><h4 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hk"</span>);<br></code></pre><h4 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104185743.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkPositionIndex(int index)</strong>检查是否越界</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>的，因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">linkedList</code>的索引设计也是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">0</code>开始的，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">所以size永远比索引大1</strong></p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190000.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190144.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104191607.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-17" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面说的可能有点绕，看看流程图就明白了，哈哈</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为第一个</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213757.jpg" alt="添加的位置为第一个" title="添加的位置为第一个" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为第一个</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为中间</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213437.jpg" alt="添加的位置为中间" title="添加的位置为中间" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为中间</figcaption></figure><h2 id="hset" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hsetintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set(int index, E element)</span></h3><h4 id="h-18" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.set(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">0</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br></code></pre><h4 id="h-19" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里大多调用的是和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">get()</code>里一样的方法</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104194247.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hremove" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hremoveintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(int index)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p><h4 id="h-20" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.remove(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br></code></pre><h4 id="h-21" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104205658.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104222250.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-22" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">第一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215754.jpg" alt="删除的是链表里的第一个元素" title="删除的是链表里的第一个元素" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">删除的是链表里的第一个元素</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">中间元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215947.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">最后一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104220851.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="hremoveobjecto" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(Object o)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个删除就比较<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">慢</code>了，它是从头开始一一对比，时间复杂度为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">O(n)</code>，这个删除也是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">只删除最早添加的数据</strong></p><h4 id="h-23" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.remove(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-24" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">unlink()</code>方法就是上面讲的那个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104223708.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hclear-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span></h3><h4 id="h-25" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.clear();<br></code></pre><h4 id="h-26" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224213.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-27" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，方便<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">GC</code>回收。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>]]></content>
    
    <summary type="html">
    
      LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="源码分析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="LinkedList" scheme="https://mjava.top/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】扒开ArrayList的外衣</title>
    <link href="https://mjava.top/java/java-arraylist-source-1/"/>
    <id>https://mjava.top/java/java-arraylist-source-1/</id>
    <published>2020-01-03T11:13:31.000Z</published>
    <updated>2020-01-03T11:24:15.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p></blockquote><h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p><p><img src="http://cdn.mjava.top/blog/20200103101050.png" alt></p><h2 id="方法变量"><a href="#方法变量" class="headerlink" title="方法变量"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p><p><img src="http://cdn.mjava.top/blog/Selection_005.png" alt></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h3><h4 id="传入数组的大小"><a href="#传入数组的大小" class="headerlink" title="传入数组的大小"></a>传入数组的大小</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_004.png" alt></p><h4 id="传入一个list对象"><a href="#传入一个list对象" class="headerlink" title="传入一个list对象"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color="orange">复制</font>到新的ArrayList对象</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"z"</span>,<span class="string">"m"</span>,<span class="string">"h"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p></blockquote><h5 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_006.png" alt></p><h3 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="源码解析-2"><a href="#源码解析-2" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/20200103112943.png" alt></p><h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"灰灰HK"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-3"><a href="#源码解析-3" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_007.png" alt></p><ul><li><font color="orange">ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li></ul><p><img src="http://cdn.mjava.top/blog/Selection_009.png" alt></p><ul><li><font color="orange">calculateCapacity(Object[] elementData, int minCapacity)</font></li></ul><p><img src="http://cdn.mjava.top/blog/Selection_010.png" alt></p><ul><li>再回到<font color="orange">ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li></ul><blockquote><p>比如第二次调用add方法，此时<code>size+1=2</code>, <code>elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_011.png" alt></p><ul><li><font color="orange">grow(int minCapacity)</font>扩容</li></ul><blockquote><p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c/cpp实现</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_012.png" alt></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p><ul><li><p>每次添加元素时判断数组容量是否充足</p></li><li><p><font color="orange">第一次</font>添加元素，把数组容量扩容到10</p></li><li><p>扩容时，除第一次，以后的每次扩容为<font color="orange">原大小的1.5倍</font></p></li><li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p></li></ul><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-4"><a href="#源码解析-4" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_013.png" alt></p><blockquote><p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p></blockquote><ul><li><font color="orange">rangeCheckForAdd(int index)</font>判断是否越界</li></ul><blockquote><p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_014.png" alt></p><ul><li><font color="orange">System.arraycopy()</font>拷贝数组</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>src    原数组对象</li><li>srcPos    原数组起始位置</li><li>dest    目标数组</li><li>destPos    目标数组起始位置</li><li>length    复制多少个数据</li></ul></blockquote><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>插入方法其主要步骤如下:</p><ul><li>检查插入的位置是否越界</li><li>检查数组容量是否充足，不充足进行扩容相关操作</li><li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li></ul><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><h3 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h3><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-5"><a href="#源码解析-5" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_015.png" alt></p><ul><li><font color="orange">rangeCheck(int index)</font>判断是否越界</li></ul><blockquote><p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color="orange">相当于</font>是开始的从1开始的</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="orange">elementData(int index)</font>直接返回对应下标的数组元素</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>get方法比较简单，主要步骤为：</p><ul><li>检查是否越界</li><li>返回对应元素</li></ul><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><h3 id="set-int-index-E-element"><a href="#set-int-index-E-element" class="headerlink" title="set(int index, E element)"></a>set(int index, E element)</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-6"><a href="#源码解析-6" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_016.png" alt></p><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><h3 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h3><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-7"><a href="#源码解析-7" class="headerlink" title="源码解析"></a>源码解析</h4><blockquote><p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_017.png" alt></p><h3 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h3><blockquote><p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color="orange">删除最早添加的元素</font></p></blockquote><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="string">"hk"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-8"><a href="#源码解析-8" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_018.png" alt></p><ul><li><font color="orange">fastRemove(int index)</font>删除元素</li></ul><blockquote><p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clear方法"><a href="#clear方法" class="headerlink" title="clear方法"></a>clear方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.clear();</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p><img src="http://cdn.mjava.top/blog/Selection_019.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p><p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;本文内容&quot;&gt;&lt;a href=&quot;#本文内容&quot; class=&quot;headerlink&quot; title=&quot;本文内容&quot;&gt;&lt;/a&gt;本文内容&lt;/h2&gt;&lt;p&gt;当然ArrayList里的方法不止这些，本文主要讲一些常用的方法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200103101050.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;方法变量&quot;&gt;&lt;a href=&quot;#方法变量&quot; class=&quot;headerlink&quot; title=&quot;方法变量&quot;&gt;&lt;/a&gt;方法变量&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Arraylist&lt;/code&gt;里的方法变量主要有以下几个&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/Selection_005.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h2&gt;&lt;h3 id=&quot;有参构造&quot;&gt;&lt;a href=&quot;#有参构造&quot; class=&quot;headerlink&quot; title=&quot;有参构造&quot;&gt;&lt;/a&gt;有参构造&lt;/h3&gt;&lt;h4 id=&quot;传入数组的大小&quot;&gt;&lt;a href=&quot;#传入数组的大小&quot; class=&quot;headerlink&quot; title=&quot;传入数组的大小&quot;&gt;&lt;/a&gt;传入数组的大小&lt;/h4&gt;&lt;h5 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="ArrayList" scheme="https://mjava.top/tags/ArrayList/"/>
    
      <category term="源码解析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【图】用图片告诉你Java中的位运算</title>
    <link href="https://mjava.top/java/java-base-wei/"/>
    <id>https://mjava.top/java/java-base-wei/</id>
    <published>2019-12-30T14:17:30.000Z</published>
    <updated>2019-12-31T07:33:55.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191230221924.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p><p>讲位操作之前,就必须要知道<font color="orange">原码、反码、补码</font></p><blockquote><p>其中正数的<font color="orange">原码=反码=补码</font></p></blockquote><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><a id="more"></a><blockquote><p>在机器的内存中,一个负数的表示是<font color="orange">这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p></blockquote><p>比如说-9在内存中的二进制码,这里用8位表示:</p><p><img src="http://cdn.mjava.top/20191230212102.png" alt></p><p>最后<font color="orange">-9在内存中的二进制值为11110111</font></p><blockquote><p>在二进制中,最高位为符号位,<font color="red">0代表正,1代表负</font></p></blockquote><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="左移和右移"><a href="#左移和右移" class="headerlink" title="左移和右移"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color="orange">4字节</font>,一个字节有<font color="orange">8位</font>,所以这边用32位表示一个数</p><h4 id="负数的左移和右移"><a href="#负数的左移和右移" class="headerlink" title="负数的左移和右移"></a>负数的左移和右移</h4><blockquote><p><font color="orange">这边负数表示是在内存中表示的二进制值</font></p><p>右移时:最高位<font color="orange">补符号位1</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212836.png" alt></p><h4 id="正数的左移和右移"><a href="#正数的左移和右移" class="headerlink" title="正数的左移和右移"></a>正数的左移和右移</h4><blockquote><p>右移时:最高位<font color="orange">补符号位0</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212951.png" alt></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><blockquote><p>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></p></blockquote><p><img src="http://cdn.mjava.top/20191230213359.png" alt></p><h3 id="amp-位与"><a href="#amp-位与" class="headerlink" title="&amp;(位与)"></a>&amp;(位与)</h3><blockquote><p>当相对应的位都为1时,等于1,否则等于0</p></blockquote><p>为了方便表示,接下来全部都用8位表示一个数</p><p><img src="http://cdn.mjava.top/20191230215214.png" alt></p><h3 id="位或"><a href="#位或" class="headerlink" title="|(位或)"></a>|(位或)</h3><blockquote><p>当相对应的位有一个为1时,等于1,否则等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230215609.png" alt></p><h3 id="异或"><a href="#异或" class="headerlink" title="^(异或)"></a>^(异或)</h3><blockquote><p>当相对应的位不同时,等于1,相同时等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230220948.png" alt></p><h3 id="取反"><a href="#取反" class="headerlink" title="~(取反)"></a>~(取反)</h3><blockquote><p>1等于0,0等于1</p></blockquote><p><img src="http://cdn.mjava.top/20191230220449.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>含义</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>左移</td><td>&lt;&lt;</td><td>末尾补0</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>负数:最高位<font color="orange">补符号位1</font>      正数:最高位<font color="orange">补符号位0</font></td></tr><tr><td>无符号右移</td><td>&gt;&gt;&gt;</td><td>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></td></tr><tr><td>&amp;(位与)</td><td>&amp;</td><td>当相对应的位都为1时,等于1,否则等于0</td></tr><tr><td>|(位或)</td><td>|</td><td>当相对应的位有一个为1时,等于1,否则等于0</td></tr><tr><td>^(异或)</td><td>^</td><td>当相对应的位 不同时,等于1  相同时,等于0</td></tr><tr><td>~(取反)</td><td>~</td><td>1等于0,0等于1</td></tr></tbody></table><blockquote><p>最后有个小技巧,<font color="orange">向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p></blockquote><p>$$<br>9向左移n位=9*2^n<br>$$</p><blockquote><p><font color="orange">向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p></blockquote><p>$$<br>9向右移n位=⌊9/2^n⌋<br>$$</p><p><font color="red">注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href="https://www.shuxuele.com/sets/function-floor-ceiling.html" rel="noopener" target="_blank">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191230221924.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;&lt;/p&gt;&lt;p&gt;讲位操作之前,就必须要知道&lt;font color=&quot;orange&quot;&gt;原码、反码、补码&lt;/font&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;其中正数的&lt;font color=&quot;orange&quot;&gt;原码=反码=补码&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;原码、反码、补码&quot;&gt;&lt;a href=&quot;#原码、反码、补码&quot; class=&quot;headerlink&quot; title=&quot;原码、反码、补码&quot;&gt;&lt;/a&gt;原码、反码、补码&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式【用好玩的故事讲清楚设计模式】</title>
    <link href="https://mjava.top/gof/gof-builder/"/>
    <id>https://mjava.top/gof/gof-builder/</id>
    <published>2019-12-26T22:50:31.000Z</published>
    <updated>2019-12-26T22:52:41.788Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191226220204.jpg" alt></p><blockquote><p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p><p>所有源代码都在这:<a href="https://github.com/z573419235/GofDemo" rel="noopener" target="_blank">https://github.com/z573419235/GofDemo</a></p><p>各位大佬记得点个星星哦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color="orange">当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color="orange">部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p><a id="more"></a><p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p><h2 id="土豪朋友开车厂"><a href="#土豪朋友开车厂" class="headerlink" title="土豪朋友开车厂"></a>土豪朋友开车厂</h2><p>​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.</p><p><img src="http://cdn.mjava.top/20191226171943.jpg" alt></p><p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车 产品类 定义汽车的构成</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方向盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String steering;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String tire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示一下汽车配置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"steering='"</span> + steering + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", frame='"</span> + frame + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tire='"</span> + tire + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p><p><img src="http://cdn.mjava.top/20191226172548.jpg" alt></p><p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color="orange">一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p><p>他给我介绍了一下他的两个专家:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宝马车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMWBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"宝马的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"宝马的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"宝马的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"宝马的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"奔驰的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"奔驰的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"奔驰的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"奔驰的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="orange">他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象建造者 定义造车的方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造的产品是车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">protected</span> Car car=<span class="keyword">new</span> Car();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到造好的车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">builderCar</span><span class="params">(AbstractBuild build)</span></span>&#123;</span><br><span class="line">        build.buildEngine();</span><br><span class="line">        build.buildFrame();</span><br><span class="line">        build.buildSteering();</span><br><span class="line">        build.buildTire();</span><br><span class="line">        <span class="keyword">return</span> build.getCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p><p><img src="http://cdn.mjava.top/20191226174032.gif" alt></p><p>说完,还向我展示了汽车是怎样造成的………..</p><p><img src="http://cdn.mjava.top/20191226174235.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实建造者模式和<font color="orange">工厂模式</font>还是挺像的,<font color="orange">建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color="orange">控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p><blockquote><p>建造者模式如果和<font color="orange">模板方法模式</font>搭配起来,<font color="orange">建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191226220204.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬&lt;/p&gt;
&lt;p&gt;所有源代码都在这:&lt;a href=&quot;https://github.com/z573419235/GofDemo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/z573419235/GofDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各位大佬记得点个星星哦&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;建造者模式用于实例化一个比较复杂的实体类,&lt;font color=&quot;orange&quot;&gt;当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程&lt;/font&gt;;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,&lt;font color=&quot;orange&quot;&gt;部件虽然不同,但是造车的方式基本都是差不多的步骤&lt;/font&gt;,这时候就可以用建造者模式来造一辆车了;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="https://mjava.top/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一个故事一个模式-原型模式</title>
    <link href="https://mjava.top/gof/gof-prototype/"/>
    <id>https://mjava.top/gof/gof-prototype/</id>
    <published>2019-12-25T15:34:48.000Z</published>
    <updated>2019-12-26T00:44:14.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191226084321.jpg" alt></p><blockquote><p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p><p>所有源代码都在这:<a href="https://github.com/z573419235/GofDemo" rel="noopener" target="_blank">https://github.com/z573419235/GofDemo</a></p><p>各位大佬记得点个星星哦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;</p><a id="more"></a><p>​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在<code>Java</code>中核心秘密就是<code>clone</code>这个方法,通过重新<code>Object</code>中的<code>clone</code>方法.来达到原型模式;而要重新<code>clone</code>方法就必须要实现<code>Cloneable</code>这个接口,不实现这个接口的话就会报<code>java.lang.CloneNotSupportedException</code>异常;</p><h2 id="我是鸣人"><a href="#我是鸣人" class="headerlink" title="我是鸣人"></a>我是鸣人</h2><p>​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面</p><p><img src="http://cdn.mjava.top/20191225222050.gif" alt></p><p>先来看看鸣人的原型实体类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 我是鸣人实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Naruto</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 姓名</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">"鸣人"</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 年龄</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age=<span class="number">13</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String task;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *爱好</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; hobby=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Naruto</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobby.add(<span class="string">"吃拉面"</span>);</span><br><span class="line">        <span class="keyword">this</span>.hobby.add(<span class="string">"泡温泉"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写Object类的clone方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Naruto <span class="title">clone</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Naruto naruto=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            naruto=(Naruto)<span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> naruto;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Naruto&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age='"</span> + age + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", task='"</span> + task + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", hobby="</span> + hobby +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个<code>@Data</code>注解就可以了;</p></blockquote><p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure><p>可以看到,鸣人本人的任务是去<font color="orange">吃拉面</font>,他的影分身的任务是留着教室<font color="orange">上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color="orange">原型模式</font>;</p><p><img src="http://cdn.mjava.top/20191225222314.gif" alt></p><h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color="orange">浅拷贝</font>和<font color="orange">深拷贝</font>;</p><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><blockquote><p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color="orange">和原型共用一个空间,没有给你分配新的内存</font>;</p></blockquote><p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        <span class="comment">//影分身不配有爱好</span></span><br><span class="line">        narutoYin.getHobby().clear();</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure><p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><blockquote><p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color="orange">分配新的内存空间</font></p></blockquote><p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p><p><img src="http://cdn.mjava.top/20191225220944.png" alt></p><p>在变一个看看:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> zheng</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//我是鸣人本人</span></span><br><span class="line">        Naruto naruto=<span class="keyword">new</span> Naruto();</span><br><span class="line">        <span class="comment">//我是影分身</span></span><br><span class="line">        Naruto narutoYin=naruto.clone();</span><br><span class="line"></span><br><span class="line">        narutoYin.setTask(<span class="string">"上课"</span>);</span><br><span class="line">        <span class="comment">//影分身不配有爱好</span></span><br><span class="line">        narutoYin.getHobby().clear();</span><br><span class="line">        naruto.setTask(<span class="string">"吃拉面"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"鸣人本人:"</span>+naruto.toString());</span><br><span class="line">        System.out.println(<span class="string">"影分身:"</span>+narutoYin.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//控制台输出</span></span><br><span class="line">鸣人本人:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class="line">影分身:Naruto&#123;name=<span class="string">'鸣人'</span>, age=<span class="string">'13'</span>, task=<span class="string">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure><p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p><p><img src="http://cdn.mjava.top/20191225222402.gif" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如<code>int</code>、<code>long</code>、<code>char</code>等都会被拷贝，但是对于<code>String</code>类型，<code>Java</code>就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把<code>String</code>当做基本类使用即可。注意:<font color="orange">使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191226084321.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬&lt;/p&gt;
&lt;p&gt;所有源代码都在这:&lt;a href=&quot;https://github.com/z573419235/GofDemo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/z573419235/GofDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各位大佬记得点个星星哦&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="https://mjava.top/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>更新驱动到mysql-connector-java-8遇到的一些问题</title>
    <link href="https://mjava.top/mysql/mysql-update-driver-connector-8/"/>
    <id>https://mjava.top/mysql/mysql-update-driver-connector-8/</id>
    <published>2019-12-25T09:07:12.000Z</published>
    <updated>2019-12-25T09:08:44.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="更新驱动到mysql-connector-java-8遇到的一些问题"><a href="#更新驱动到mysql-connector-java-8遇到的一些问题" class="headerlink" title="更新驱动到mysql-connector-java-8遇到的一些问题"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="POM"><a href="#POM" class="headerlink" title="POM"></a>POM</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure><p>翻译过来后就是:</p><p>加载类<code>com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code>com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p><h4 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h4><p>根据提示,解决方法有<font color="orange">两种</font>:</p><ul><li>更改<code>application.properties</code>文件</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">//改成下面这样</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><ul><li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li></ul><h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><h4 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p><h4 id="解决-1"><a href="#解决-1" class="headerlink" title="解决"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;更新驱动到mysql-connector-java-8遇到的一些问题&quot;&gt;&lt;a href=&quot;#更新驱动到mysql-connector-java-8遇到的一些问题&quot; class=&quot;headerlink&quot; title=&quot;更新驱动到mysql-connector-java-8遇到的一些问题&quot;&gt;&lt;/a&gt;更新驱动到mysql-connector-java-8遇到的一些问题&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;h3 id=&quot;POM&quot;&gt;&lt;a href=&quot;#POM&quot; class=&quot;headerlink&quot; title=&quot;POM&quot;&gt;&lt;/a&gt;POM&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;version&amp;gt;8.0.16&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://mjava.top/categories/MySQL/"/>
    
    
      <category term="Pit" scheme="https://mjava.top/tags/Pit/"/>
    
      <category term="MySQL" scheme="https://mjava.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Docker迁移根目录导致mysql权限问题</title>
    <link href="https://mjava.top/docker/docker-transfer-pit/"/>
    <id>https://mjava.top/docker/docker-transfer-pit/</id>
    <published>2019-12-20T07:04:16.000Z</published>
    <updated>2019-12-20T07:05:47.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p><p>迁移根目录我看的是这个文章：<a href="https://www.cnblogs.com/insist-forever/p/11739207.html" rel="noopener" target="_blank">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color="orange">rsync</font>这个命令，而是使用<font color="orange">cp -R</font>;</p><a id="more"></a><p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create/write to file ‘/tmp/ibTCv7Rw’ (Errcode: 13 - Permission denied)</p><p><img src="http://cdn.mjava.top/20191220143818.png" alt></p><p>期间按照网上的方法：说docker容器启动是添加–privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color="orange">都没用！！！！！！</font></p><blockquote><p>其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘/var/run/mysqld/mysqld.sock’ </p><p><img src="http://cdn.mjava.top/20191220144523.png" alt></p></blockquote><p>看来还是得从根源上解决问题啊！</p><h2 id="我的解决办法"><a href="#我的解决办法" class="headerlink" title="我的解决办法"></a>我的解决办法</h2><p>​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:</p><p><img src="http://cdn.mjava.top/20191220144841.png" alt></p><p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color="orange">cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；</p><p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．<img src="http://cdn.mjava.top/20191220145849.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h2&gt;&lt;p&gt;　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：&lt;/p&gt;&lt;p&gt;迁移根目录我看的是这个文章：&lt;a href=&quot;https://www.cnblogs.com/insist-forever/p/11739207.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;docker的存储目录迁移&lt;/a&gt;,　不过迁移的时候我没有使用&lt;font color=&quot;orange&quot;&gt;rsync&lt;/font&gt;这个命令，而是使用&lt;font color=&quot;orange&quot;&gt;cp -R&lt;/font&gt;;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://mjava.top/categories/Docker/"/>
    
    
      <category term="Docker" scheme="https://mjava.top/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://mjava.top/tags/Mysql/"/>
    
      <category term="Linux" scheme="https://mjava.top/tags/Linux/"/>
    
      <category term="Pit" scheme="https://mjava.top/tags/Pit/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列-模板方法模式</title>
    <link href="https://mjava.top/gof/gof-taemplate-method/"/>
    <id>https://mjava.top/gof/gof-taemplate-method/</id>
    <published>2019-12-19T16:04:28.000Z</published>
    <updated>2019-12-20T01:38:54.340Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191220000613.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="文前常规发言"><a href="#文前常规发言" class="headerlink" title="文前常规发言"></a>文前常规发言</h2><p>　　模板方法的设计<font color="orange">符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color="orange">一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p><a id="more"></a><p><img src="http://cdn.mjava.top/20191219215431.gif" alt></p><h2 id="阿狗卖电脑"><a href="#阿狗卖电脑" class="headerlink" title="阿狗卖电脑"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color="orange">实则是被公司裁员，被迫来卖电脑了</font>）；</p><p><img src="http://cdn.mjava.top/20191219220453.gif" alt></p><p>看看他的电脑店里都有什么</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *显卡</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color="orange">阿猫</font>和<font color="orange">大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p><p>看看阿猫：</p><p><img src="http://cdn.mjava.top/20191219222853.png" alt></p><p>在看看大牛的：</p><p><img src="http://cdn.mjava.top/20191219222925.png" alt></p><p>再看看他们怎么组装的吧：</p><p><img src="http://cdn.mjava.top/20191219223122.png" alt></p><h2 id="有想法的阿狗"><a href="#有想法的阿狗" class="headerlink" title="有想法的阿狗"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color="orange">模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color="orange">配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *显卡</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿狗帮客户装电脑</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhuZHuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿狗开始组装电脑＝＝＝＝＝＝"</span>);</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.dianYuan();</span><br><span class="line">        <span class="keyword">this</span>.neiCun();</span><br><span class="line">        <span class="keyword">this</span>.xianKa();</span><br><span class="line">        <span class="keyword">this</span>.yingPan();</span><br><span class="line">        <span class="keyword">this</span>.zhuBan();</span><br><span class="line">        <span class="keyword">this</span>.jiXiang();</span><br><span class="line">        System.out.println(<span class="string">"阿狗电脑组装完成＝＝＝＝＝＝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上次的阿猫又来买电脑了：</p><p><img src="http://cdn.mjava.top/20191219232821.png" alt></p><p>看看结果：</p><p><img src="http://cdn.mjava.top/20191219232931.png" alt></p><h2 id="客户反馈"><a href="#客户反馈" class="headerlink" title="客户反馈"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color="orange">有钱就赚原则</font>)，于是他又改了他店铺的模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿狗电脑店</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AGouShop</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *　显卡</span></span><br><span class="line"><span class="comment">     * ＂具体方法＂</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">xianKa</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"客户选了显卡"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否要显卡　　默认是要显卡的</span></span><br><span class="line"><span class="comment">     * ＂钩子方法＂</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTrue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *cpu</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cpu</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *电源</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">dianYuan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *主板</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">zhuBan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *硬盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yingPan</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *内存条</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">neiCun</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *机箱</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">jiXiang</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阿狗帮客户装电脑</span></span><br><span class="line"><span class="comment">     * 模板方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zhuZHuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"阿狗开始组装电脑＝＝＝＝＝＝"</span>);</span><br><span class="line">        <span class="keyword">this</span>.cpu();</span><br><span class="line">        <span class="keyword">this</span>.dianYuan();</span><br><span class="line">        <span class="keyword">this</span>.neiCun();</span><br><span class="line">        <span class="comment">//判断要不要显卡</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isTrue()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.xianKa();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.yingPan();</span><br><span class="line">        <span class="keyword">this</span>.zhuBan();</span><br><span class="line">        <span class="keyword">this</span>.jiXiang();</span><br><span class="line">        System.out.println(<span class="string">"阿狗电脑组装完成＝＝＝＝＝＝"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到上加了<font color="orange">具体方法</font>和<font color="orange">钩子方法</font></p></blockquote><p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p><p>阿猫默认要显卡：</p><p><img src="http://cdn.mjava.top/20191219234521.png" alt></p><p>大牛不要显卡：<img src="http://cdn.mjava.top/20191219234630.png" alt></p><p>看看他们的电脑吧：</p><p><img src="http://cdn.mjava.top/20191219234803.png" alt></p><h2 id="总结一下下"><a href="#总结一下下" class="headerlink" title="总结一下下"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p><ul><li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li><li>自己帮客户完成组装电脑：这里就用到了<font color="orange">模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li><li>客户有选择显卡的权利：这里用到了<font color="orange">模板方法模式</font>中的<font color="orange">钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color="orange">钩子方法</font>是<font color="orange">模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191220000613.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;文前常规发言&quot;&gt;&lt;a href=&quot;#文前常规发言&quot; class=&quot;headerlink&quot; title=&quot;文前常规发言&quot;&gt;&lt;/a&gt;文前常规发言&lt;/h2&gt;&lt;p&gt;　　模板方法的设计&lt;font color=&quot;orange&quot;&gt;符合迪米特法则&lt;/font&gt;，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办&lt;font color=&quot;orange&quot;&gt;一次&lt;/font&gt;手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法模式" scheme="https://mjava.top/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>恍然大悟，数组和链表的区别</title>
    <link href="https://mjava.top/algorithm/array-vs-linked/"/>
    <id>https://mjava.top/algorithm/array-vs-linked/</id>
    <published>2019-12-18T05:50:52.000Z</published>
    <updated>2019-12-18T05:52:24.538Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191218134901.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="文前发言"><a href="#文前发言" class="headerlink" title="文前发言"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color="orange">数组链表</font>结构，就是常说的<font color="orange">哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p><p><img src="http://cdn.mjava.top/20191218104007.jpg" alt></p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><blockquote><p>数组是我们平时用的最多的数据结构，它的特点是<font color="orange">查询数据快，插入数据慢</font>，查询的时间复杂度是<font color="orange">O(1)</font>,插入的时间复杂度是<font color="orange">O(n)</font>.</p></blockquote><a id="more"></a><p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color="orange">系统</font>)申请，要求学校给他们一个新的六人寝(<font color="orange">新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p><p><img src="http://cdn.mjava.top/20191218113521.png" alt></p><blockquote><p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color="orange">插入数据慢</font>)</p></blockquote><p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p><p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color="orange">查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p><p><img src="http://cdn.mjava.top/20191218114115.gif" alt></p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><blockquote><p>链表我们平时用的比较少，它的特点是:<font color="orange">插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color="orange">O(n)</font>，插入的时间复杂度是：<font color="orange">O(1)</font>，它的特点是和数组相反的；</p></blockquote><p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p><p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color="orange">＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color="orange">＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color="orange">毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color="orange">查询数据慢</font>）；</p><p><img src="http://cdn.mjava.top/20191218132932.png" alt></p><blockquote><p>可以发现，<font color="orange">每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color="orange">添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p></blockquote><h2 id="发个对比表格吧"><a href="#发个对比表格吧" class="headerlink" title="发个对比表格吧"></a>发个对比表格吧</h2><h3 id="时间复杂度对比表"><a href="#时间复杂度对比表" class="headerlink" title="时间复杂度对比表"></a>时间复杂度对比表</h3><table><thead><tr><th align="center"></th><th align="center">数组</th><th>链表</th></tr></thead><tbody><tr><td align="center">插入</td><td align="center">O(n) 慢</td><td>O(1) 快</td></tr><tr><td align="center">删除</td><td align="center">O(n) 慢</td><td>O(1) 快</td></tr><tr><td align="center">查询</td><td align="center">O(1) 快</td><td>O(n) 慢</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191218134901.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;文前发言&quot;&gt;&lt;a href=&quot;#文前发言&quot; class=&quot;headerlink&quot; title=&quot;文前发言&quot;&gt;&lt;/a&gt;文前发言&lt;/h2&gt;&lt;p&gt;　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫&lt;font color=&quot;orange&quot;&gt;数组链表&lt;/font&gt;结构，就是常说的&lt;font color=&quot;orange&quot;&gt;哈希表&lt;/font&gt;，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191218104007.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;数组是我们平时用的最多的数据结构，它的特点是&lt;font color=&quot;orange&quot;&gt;查询数据快，插入数据慢&lt;/font&gt;，查询的时间复杂度是&lt;font color=&quot;orange&quot;&gt;O(1)&lt;/font&gt;,插入的时间复杂度是&lt;font color=&quot;orange&quot;&gt;O(n)&lt;/font&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://mjava.top/categories/Algorithm/"/>
    
    
      <category term="数据结构" scheme="https://mjava.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列-抽象工厂模式</title>
    <link href="https://mjava.top/gof/gof-abstract-factory/"/>
    <id>https://mjava.top/gof/gof-abstract-factory/</id>
    <published>2019-12-16T13:17:23.000Z</published>
    <updated>2019-12-16T13:32:22.120Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191216212929.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="突然开始的正文"><a href="#突然开始的正文" class="headerlink" title="突然开始的正文"></a>突然开始的正文</h2><p>紧接着上一章的<a href="https://mjava.top/gof/gof-factory-method">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color="orange">AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color="orange">AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color="orange">工厂方法模式</font>升级到了<font color="orange">抽象工厂模式</font>；</p><a id="more"></a><p>话不多说，看两个模式的类图你就明白了：</p><h3 id="原本的工厂方法模式类图："><a href="#原本的工厂方法模式类图：" class="headerlink" title="原本的工厂方法模式类图："></a>原本的工厂方法模式类图：</h3><p><img src="http://cdn.mjava.top/20191216202720.png" alt="工厂方法模式"></p><h3 id="升级后的抽象工厂模式："><a href="#升级后的抽象工厂模式：" class="headerlink" title="升级后的抽象工厂模式："></a>升级后的抽象工厂模式：</h3><p><img src="http://cdn.mjava.top/20191216203329.png" alt="抽象工厂模式"></p><p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color="orange">抽象工厂模式</font>的产品减到<font color="orange">只有一个</font>的时候，他就又回到了<font color="orange">工厂方法模式</font>；</p><h2 id="好色的朋友买车了"><a href="#好色的朋友买车了" class="headerlink" title="好色的朋友买车了"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p><p><img src="http://cdn.mjava.top/20191216205803.png" alt></p><p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p><h2 id="措不及防的结束了"><a href="#措不及防的结束了" class="headerlink" title="措不及防的结束了"></a>措不及防的结束了</h2><p><img src="http://cdn.mjava.top/20191216205427.gif" alt></p><p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color="orange">品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color="orange">业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color="orange">业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191216212929.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;突然开始的正文&quot;&gt;&lt;a href=&quot;#突然开始的正文&quot; class=&quot;headerlink&quot; title=&quot;突然开始的正文&quot;&gt;&lt;/a&gt;突然开始的正文&lt;/h2&gt;&lt;p&gt;紧接着上一章的&lt;a href=&quot;https://mjava.top/gof/gof-factory-method&quot;&gt;工厂方法模式&lt;/a&gt;，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类&lt;font color=&quot;orange&quot;&gt;AllCarFactory&lt;/font&gt;，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后&lt;font color=&quot;orange&quot;&gt;AllCarFactory&lt;/font&gt;定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从&lt;font color=&quot;orange&quot;&gt;工厂方法模式&lt;/font&gt;升级到了&lt;font color=&quot;orange&quot;&gt;抽象工厂模式&lt;/font&gt;；&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="https://mjava.top/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列-工厂模式</title>
    <link href="https://mjava.top/gof/gof-factory-method/"/>
    <id>https://mjava.top/gof/gof-factory-method/</id>
    <published>2019-12-15T09:25:00.000Z</published>
    <updated>2019-12-15T10:23:28.609Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/gof-factory-method.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工厂模式有一下三种</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p><a id="more"></a><h2 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p><p>当我要买车的时候，我选了这两种车．</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个汽车接口</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 汽车能动</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大奔开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 五菱神车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"五菱神车开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选是选好了，可是要怎么得到呢？是不是下意识的<font color="orange">new</font>一个出来？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我要奔驰车</span></span><br><span class="line">Benz　myCar=<span class="keyword">new</span> Benz();</span><br></pre></td></tr></table></figure><p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color="orange">new</font>出来的嘛！！！！！</p><p><img src="http://cdn.mjava.top/20191215162632.gif" alt></p><p>这种事情当然是交给工厂去做嘛，叫工厂去<font color="orange">new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 静态工厂</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 简单工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"我要五菱神车"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"我要大奔驰"</span>.equals(type))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 买车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostumerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//跟车厂说一声我要五菱神车</span></span><br><span class="line">        Car wuling=CarFactory.getCar(<span class="string">"我要五菱神车"</span>);</span><br><span class="line">        <span class="comment">//跟车厂说一声我要大奔驰</span></span><br><span class="line">        Car Benz=CarFactory.getCar(<span class="string">"我要大奔驰"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//开着五菱神车去兜兜风</span></span><br><span class="line">        wuling.run();</span><br><span class="line">        <span class="comment">//开着大奔去兜兜风</span></span><br><span class="line">        Benz.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//五菱神车开动了</span></span><br><span class="line"><span class="comment">//大奔开动了</span></span><br></pre></td></tr></table></figure><p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p><p><img src="http://cdn.mjava.top/20191215163319.jpg" alt></p><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p><p><img src="http://cdn.mjava.top/20191215163907.gif" alt></p><p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p><p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产汽车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function">Car <span class="title">getCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *　汽车能跑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 劳斯莱斯汽车</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RollsRoyce</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 劳斯莱斯能跑起来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"劳斯莱斯开起来了！！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 劳斯莱斯汽车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RollsRoyceFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆劳斯莱斯</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RollsRoyce();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 五菱神车</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wuling</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 五菱神车能飙车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"五菱神车开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 五菱神车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WulingFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆五菱神车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Wuling();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再区看看奔驰车厂：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 奔驰汽车</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Benz</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 奔驰汽车能跑</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"大奔开动了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰汽车工厂</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">AllCarFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 生产一辆奔驰汽车</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p><p><img src="http://cdn.mjava.top/20191215170620.jpg" alt></p><p>看看我买车的过程：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 土豪买车记</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CostumerMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//去五菱车厂买车</span></span><br><span class="line">        Car wuling=<span class="keyword">new</span> WulingFactory().getCar();</span><br><span class="line">        <span class="comment">//去奔驰车厂买车</span></span><br><span class="line">        Car benz=<span class="keyword">new</span> BenzFactory().getCar();</span><br><span class="line">        <span class="comment">//去劳斯莱斯车厂买车</span></span><br><span class="line">        Car rollsRoyce=<span class="keyword">new</span> RollsRoyceFactory().getCar();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//开着三辆车去兜兜风</span></span><br><span class="line">        wuling.run();</span><br><span class="line">        benz.run();</span><br><span class="line">        rollsRoyce.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//五菱神车开动了</span></span><br><span class="line"><span class="comment">//大奔开动了</span></span><br><span class="line"><span class="comment">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color="orange">术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；</p><p>​    不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/gof-factory-method.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工厂模式有一下三种&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;简单工厂模式&lt;/li&gt;
&lt;li&gt;工厂方法模式&lt;/li&gt;
&lt;li&gt;抽象工厂模式&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂方法模式" scheme="https://mjava.top/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>OOP程序七大原则</title>
    <link href="https://mjava.top/gof/gof-oop-7-all/"/>
    <id>https://mjava.top/gof/gof-oop-7-all/</id>
    <published>2019-12-15T02:45:04.000Z</published>
    <updated>2019-12-15T02:46:17.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/autumn-4656877_1920.png" alt></p><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p><font color="orange">当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color="orange">替换</font>指的是：当有父类出现的地方，这个父类可以<font color="orange">替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p><a id="more"></a><h2 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color="orange">面对接口编程，不要面对具体实现编程</font>．</p><p><img src="http://cdn.mjava.top/3-1Q113131610L7.gif" alt="来自C语言中文网"></p><p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码来之＇C语言中文网＇</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DIPtest</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Customer wang=<span class="keyword">new</span> Customer();</span><br><span class="line">        System.out.println(<span class="string">"顾客购买以下商品："</span>); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> ShaoguanShop()); </span><br><span class="line">        wang.shopping(<span class="keyword">new</span> WuyuanShop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//商店</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span>; <span class="comment">//卖</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//韶关网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShaoguanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"韶关土特产：香菇、木耳……"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//婺源网店</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WuyuanShop</span> <span class="keyword">implements</span> <span class="title">Shop</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sell</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"婺源土特产：绿茶、酒糟鱼……"</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//顾客</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shopping</span><span class="params">(Shop shop)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//购物</span></span><br><span class="line">        System.out.println(shop.sell()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line">顾客购买以下商品：</span><br><span class="line">韶关土特产：香菇、木耳……</span><br><span class="line">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure><h2 id="单一职责"><a href="#单一职责" class="headerlink" title="单一职责"></a>单一职责</h2><p><font color="orange">单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><p><font color="orange">迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p><ol><li>从依赖者的角度来说，只依赖应该依赖的对象。</li><li>从被依赖者的角度说，只暴露应该暴露的方法。</li></ol><p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p><ul><li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li><li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li></ul><p>官方定义：<font color="orange">要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p><p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color="orange">里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p><p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href="https://blog.csdn.net/qq_31655965/article/details/54645220" rel="noopener" target="_blank">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color="orange">规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/autumn-4656877_1920.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;开闭原则&quot;&gt;&lt;a href=&quot;#开闭原则&quot; class=&quot;headerlink&quot; title=&quot;开闭原则&quot;&gt;&lt;/a&gt;开闭原则&lt;/h2&gt;&lt;p&gt;开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．&lt;/p&gt;&lt;h2 id=&quot;里氏替换原则&quot;&gt;&lt;a href=&quot;#里氏替换原则&quot; class=&quot;headerlink&quot; title=&quot;里氏替换原则&quot;&gt;&lt;/a&gt;里氏替换原则&lt;/h2&gt;&lt;p&gt;&lt;font color=&quot;orange&quot;&gt;当两个类有继承关系时，子类不能修改父类的方法和变量.  &lt;/font&gt;里氏替换中的&lt;font color=&quot;orange&quot;&gt;替换&lt;/font&gt;指的是：当有父类出现的地方，这个父类可以&lt;font color=&quot;orange&quot;&gt;替换&lt;/font&gt;成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="GOF" scheme="https://mjava.top/tags/GOF/"/>
    
      <category term="OOP" scheme="https://mjava.top/tags/OOP/"/>
    
  </entry>
  
</feed>
