<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>灰色Code</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mjava.top/"/>
  <updated>2020-06-22T08:30:17.581Z</updated>
  <id>https://mjava.top/</id>
  
  <author>
    <name>H&amp;K</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建线程的3种方式</title>
    <link href="https://mjava.top/java/thread/create-thread-3/"/>
    <id>https://mjava.top/java/thread/create-thread-3/</id>
    <published>2020-06-22T08:29:38.000Z</published>
    <updated>2020-06-22T08:30:17.581Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java线程状态变迁图"><a href="#Java线程状态变迁图" class="headerlink" title="Java线程状态变迁图"></a>Java线程状态变迁图</h2><p><img src="http://cdn.mjava.top/blog/20200602150941.jpeg" alt="Java线程状态变迁图"></p><h2 id="构造一个线程"><a href="#构造一个线程" class="headerlink" title="构造一个线程"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p><p><strong>Thread常见参数及设置方法:</strong></p><ul><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程是否是守护线程  默认false</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>     daemon = <span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//设置方法</span></span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread();</span><br><span class="line">thread.setDaemon(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程名字默认"Thread-" + nextThreadNum()</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> String name;</span><br><span class="line"><span class="comment">//设置方法</span></span><br><span class="line">Thread thread=<span class="keyword">new</span> Thread();</span><br><span class="line">thread.setName(<span class="string">"myThread"</span>); <span class="comment">//不能设置为null,会报异常</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程优先级  是否起作用和操作系统及虚拟机版本相关</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> priority;</span><br><span class="line"><span class="comment">//设置方法  范围:1-10  默认5</span></span><br><span class="line">myThread.setPriority(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h3 id="Thread源码构造方法"><a href="#Thread源码构造方法" class="headerlink" title="Thread源码构造方法"></a>Thread源码构造方法</h3><p>在Thread源码中,一共提供了<code>9种</code>构造方法.</p><p><img src="http://cdn.mjava.top/blog/20200602151437.png" alt></p><p>从这些构造方法中,大致可以分为<code>有Runnable构造参数</code>的,和<code>无Runnable构造参数</code>两大类,无Runnable构造参数的就需要去继承<code>Thread</code>来重写<code>run()</code>方法<font color="grey">(注:<code>Thread</code>也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</p><h3 id="无返回值的线程"><a href="#无返回值的线程" class="headerlink" title="无返回值的线程"></a>无返回值的线程</h3><p>可以看到,通过集成<code>Thread</code>类和实现<code>Runnable</code>接口的<code>run()</code>方法返回值都是<code>void</code>.这类是没有返回值的</p><h4 id="方法一-继承Thread类创建一个线程"><a href="#方法一-继承Thread类创建一个线程" class="headerlink" title="方法一:继承Thread类创建一个线程"></a>方法一:继承Thread类创建一个线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//继承Thread类,重写run方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"继承Thread,重写run方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyThread myThread=<span class="keyword">new</span> MyThread();</span><br><span class="line">        myThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二-实现Runnable接口创建线程"><a href="#方法二-实现Runnable接口创建线程" class="headerlink" title="方法二:实现Runnable接口创建线程"></a>方法二:实现Runnable接口创建线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRun</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现Runnable方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyRun myRun=<span class="keyword">new</span> MyRun();</span><br><span class="line">        Thread thread=<span class="keyword">new</span> Thread(myRun);</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="有返回值的线程"><a href="#有返回值的线程" class="headerlink" title="有返回值的线程"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p><h4 id="方法三-通过FutureTask创建一个线程"><a href="#方法三-通过FutureTask创建一个线程" class="headerlink" title="方法三:通过FutureTask创建一个线程"></a>方法三:通过FutureTask创建一个线程</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCall</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//计算1+1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyCall myCall=<span class="keyword">new</span> MyCall();</span><br><span class="line">        <span class="comment">//创建异步任务</span></span><br><span class="line">        FutureTask&lt;Integer&gt; futureTask=<span class="keyword">new</span> FutureTask&lt;&gt;(myCall);</span><br><span class="line">        Thread thread2=<span class="keyword">new</span> Thread(futureTask);</span><br><span class="line">        thread2.start();</span><br><span class="line">        <span class="comment">//获取线程执行结果</span></span><br><span class="line">        Integer res=futureTask.get();</span><br><span class="line">        System.out.println(res); <span class="comment">//输出2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Java线程状态变迁图&quot;&gt;&lt;a href=&quot;#Java线程状态变迁图&quot; class=&quot;headerlink&quot; title=&quot;Java线程状态变迁图&quot;&gt;&lt;/a&gt;Java线程状态变迁图&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200602150941.jpeg&quot; alt=&quot;Java线程状态变迁图&quot;&gt;&lt;/p&gt;&lt;h2 id=&quot;构造一个线程&quot;&gt;&lt;a href=&quot;#构造一个线程&quot; class=&quot;headerlink&quot; title=&quot;构造一个线程&quot;&gt;&lt;/a&gt;构造一个线程&lt;/h2&gt;&lt;p&gt;在线程执行&lt;code&gt;start()&lt;/code&gt;方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Thread常见参数及设置方法:&lt;/strong&gt;&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//线程是否是守护线程  默认false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;     daemon = &lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thread thread=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread.setDaemon(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//线程名字	默认&quot;Thread-&quot; + nextThreadNum()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Thread thread=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Thread();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;thread.setName(&lt;span class=&quot;string&quot;&gt;&quot;myThread&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//不能设置为null,会报异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//线程优先级  是否起作用和操作系统及虚拟机版本相关&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; priority;																&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//设置方法  范围:1-10  默认5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;myThread.setPriority(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JAVA" scheme="https://mjava.top/categories/JAVA/"/>
    
    
      <category term="多线程" scheme="https://mjava.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>吐血整理Git常用命令</title>
    <link href="https://mjava.top/tool/git-tool-command/"/>
    <id>https://mjava.top/tool/git-tool-command/</id>
    <published>2020-06-22T08:27:25.000Z</published>
    <updated>2020-06-22T08:28:15.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h2><h2 id="Git简介"><a href="#Git简介" class="headerlink" title="Git简介"></a>Git简介</h2><p>Git 是用于 Linux<a href="https://baike.baidu.com/item/内核" rel="noopener" target="_blank">内核</a>开发的<a href="https://baike.baidu.com/item/版本控制" rel="noopener" target="_blank">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href="https://baike.baidu.com/item/源代码" rel="noopener" target="_blank">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p><a id="more"></a><p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p><h2 id="git结构"><a href="#git结构" class="headerlink" title="git结构"></a>git结构</h2><blockquote><p>网上有 我就不画了</p></blockquote><p><img src="http://cdn.mjava.top/blog/20200605001853.png" alt="git结构图"></p><ul><li><p>workspace    相当于就是我们的本地电脑上的文件</p></li><li><p>Index    缓存区</p></li><li><p>Repository    本地仓库</p></li><li><p>Remote    远程仓库(github/gitlab/gitee)</p></li></ul><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p><p>所以我就整理了一下日常使用的命令</p><p>现在关注微信公招:<code>灰色Code</code></p><p>回复关键字:<code>git</code></p><p>就可以获取思维导图高清图片及导图源地址</p><p><img src="http://cdn.mjava.top/blog/20200605002904.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git常用命令&quot;&gt;&lt;a href=&quot;#Git常用命令&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令&quot;&gt;&lt;/a&gt;Git常用命令&lt;/h2&gt;&lt;h2 id=&quot;Git简介&quot;&gt;&lt;a href=&quot;#Git简介&quot; class=&quot;headerlink&quot; title=&quot;Git简介&quot;&gt;&lt;/a&gt;Git简介&lt;/h2&gt;&lt;p&gt;Git 是用于 Linux&lt;a href=&quot;https://baike.baidu.com/item/内核&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;内核&lt;/a&gt;开发的&lt;a href=&quot;https://baike.baidu.com/item/版本控制&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;版本控制&lt;/a&gt;工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使&lt;a href=&quot;https://baike.baidu.com/item/源代码&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;源代码&lt;/a&gt;的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tool" scheme="https://mjava.top/categories/Tool/"/>
    
    
      <category term="Git" scheme="https://mjava.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>创建一个自定义注解</title>
    <link href="https://mjava.top/spring/apring-aop-ann/"/>
    <id>https://mjava.top/spring/apring-aop-ann/</id>
    <published>2020-06-22T08:23:56.000Z</published>
    <updated>2020-06-22T08:25:48.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p><h2 id="写一个注解"><a href="#写一个注解" class="headerlink" title="写一个注解"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p><h3 id="创建注解类"><a href="#创建注解类" class="headerlink" title="创建注解类"></a>创建注解类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnn &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "d"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p><p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ElementType &#123;</span><br><span class="line">    <span class="comment">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class="line">    TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 字段声明（包括枚举常量）*/</span></span><br><span class="line">    FIELD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 方法声明*/</span></span><br><span class="line">    METHOD,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class="line">    PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 构造函数声明 */</span></span><br><span class="line">    CONSTRUCTOR,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 局部变量声明 */</span></span><br><span class="line">    LOCAL_VARIABLE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 注释类型声明 */</span></span><br><span class="line">    ANNOTATION_TYPE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 包声明 */</span></span><br><span class="line">    PACKAGE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型参数声明</span></span><br><span class="line"><span class="comment">     * java8新特性：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_PARAMETER,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任何类型声明 </span></span><br><span class="line"><span class="comment">     * java8新特性：</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TYPE_USE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> RetentionPolicy &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注释将被编译器丢弃。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SOURCE,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注释由编译器记录在类文件中</span></span><br><span class="line"><span class="comment">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLASS,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *注释由编译器记录在类文件中，并且</span></span><br><span class="line"><span class="comment">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNTIME</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="写一个切面类"><a href="#写一个切面类" class="headerlink" title="写一个切面类"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="创建切面类"><a href="#创建切面类" class="headerlink" title="创建切面类"></a>创建切面类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnnAop</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"@annotation(com.example.demo.annotation.MyAnn)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ann</span><span class="params">()</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"ann()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"打印：开始前"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterReturning</span>(value = <span class="string">"ann()"</span>,returning = <span class="string">"res"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">dochange</span><span class="params">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class="line">        logger.info(<span class="string">"AfterReturning通知开始-获取数据:&#123;&#125;"</span>,res);</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class="line">        <span class="comment">//添加新值</span></span><br><span class="line">        map.put(<span class="string">"s1"</span>,<span class="string">"我是在AOP中添加的新值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-AOP说明"><a href="#Spring-AOP说明" class="headerlink" title="Spring AOP说明"></a>Spring AOP说明</h3><blockquote><p>具体可以查阅Spring AOP相关资料</p></blockquote><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td><code>@Before</code></td><td>前置通知，在连接点方法前调用</td></tr><tr><td><code>@Around</code></td><td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td></tr><tr><td><code>@After</code></td><td>后置通知，在连接点方法后调用</td></tr><tr><td><code>@AfterReturning</code></td><td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td></tr><tr><td><code>@AfterThrowing</code></td><td>异常通知，当连接点方法异常时调用</td></tr></tbody></table><h2 id="使用自定义的注解"><a href="#使用自定义的注解" class="headerlink" title="使用自定义的注解"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务层</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@MyAnn</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt;  map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"t1"</span>,<span class="string">"我是在Service设置的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制层</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; s=testService.test();</span><br><span class="line">        logger.info(<span class="string">"控制层输出：&#123;&#125;"</span>,s.get(<span class="string">"s1"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class="line">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestService testService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt; s=<span class="keyword">this</span>.test2();</span><br><span class="line">        logger.info(<span class="string">"控制层输出：&#123;&#125;"</span>,s.get(<span class="string">"s1"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"sccess"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MyAnn</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map&lt;String,String&gt;  map=<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"t1"</span>,<span class="string">"我是在控制层设置的值"</span>);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure><p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p><p>具体参考资料：</p><ul><li><a href="https://blog.csdn.net/Daybreak1209/article/details/82982674" rel="noopener" target="_blank">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li><li><a href="https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase" rel="noopener" target="_blank">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li><li><a href="https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/" rel="noopener" target="_blank">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;平时在用springBoot的使用，常常会用到&lt;code&gt;@Service&lt;/code&gt;，&lt;code&gt;@Compent&lt;/code&gt;等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。&lt;/p&gt;&lt;h2 id=&quot;写一个注解&quot;&gt;&lt;a href=&quot;#写一个注解&quot; class=&quot;headerlink&quot; title=&quot;写一个注解&quot;&gt;&lt;/a&gt;写一个注解&lt;/h2&gt;&lt;p&gt;创建一个注解主要分两部分，一部分是创建&lt;strong&gt;注解类&lt;/strong&gt;，一部分是创建一个&lt;strong&gt;切面类&lt;/strong&gt;。&lt;/p&gt;&lt;h3 id=&quot;创建注解类&quot;&gt;&lt;a href=&quot;#创建注解类&quot; class=&quot;headerlink&quot; title=&quot;创建注解类&quot;&gt;&lt;/a&gt;创建注解类&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Target&lt;/span&gt;(&amp;#123;ElementType.METHOD&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@Retention&lt;/span&gt;(RetentionPolicy.RUNTIME)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;@interface&lt;/span&gt; MyAnn &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;String &lt;span class=&quot;title&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &quot;d&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring" scheme="https://mjava.top/categories/Spring/"/>
    
    
      <category term="Spring AOP" scheme="https://mjava.top/tags/Spring-AOP/"/>
    
      <category term="注解" scheme="https://mjava.top/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>JVM4种垃圾收集算法</title>
    <link href="https://mjava.top/java/jvm/jvm-gc-alg/"/>
    <id>https://mjava.top/java/jvm/jvm-gc-alg/</id>
    <published>2020-05-29T02:31:30.000Z</published>
    <updated>2020-05-29T02:34:07.798Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><ul><li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li><li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li></ul><a id="more"></a><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li><li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li><li><img src="http://cdn.mjava.top/blog/20200529100358.png" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528203926.jpeg" alt="标记清除算法"></p><h2 id="标记-复制算法"><a href="#标记-复制算法" class="headerlink" title="标记-复制算法"></a>标记-复制算法</h2><ul><li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p></li><li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p></li><li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p></li></ul><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ul><li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li><li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li><li><img src="http://cdn.mjava.top/blog/20200529100420.jpg" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528203952.jpeg" alt="标记复制算法"></p><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><ul><li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li><li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li></ul><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ul><li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li><li><img src="http://cdn.mjava.top/blog/20200529100506.jpg" alt></li></ul><p><img src="http://cdn.mjava.top/blog/20200528204014.jpeg" alt="标记整理算法"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p><blockquote><p><font color="red">老年代:新生代=2:1</font></p></blockquote><p><img src="http://cdn.mjava.top/blog/20200529101100.png" alt></p><h3 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h3><blockquote><p>堆大小默认比例:<font color="red">Eden:S0:S1=8:1:1</font></p><p>采用标记-复制算法</p></blockquote><p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)</strong>和<strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p><h3 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h3><blockquote><p>采用标记-整理法或标记-清理法</p></blockquote><p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。&lt;/p&gt;&lt;h2 id=&quot;标记-清除算法&quot;&gt;&lt;a href=&quot;#标记-清除算法&quot; class=&quot;headerlink&quot; title=&quot;标记-清除算法&quot;&gt;&lt;/a&gt;标记-清除算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;标记过程&lt;/strong&gt;就是对象是否属于垃圾的判定过程(&lt;strong&gt;采用可达分析算法GC Roots&lt;/strong&gt;)&lt;/li&gt;
&lt;li&gt;算法分为&lt;strong&gt;“标记”&lt;/strong&gt;和&lt;strong&gt;“清除”&lt;/strong&gt;两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，&lt;strong&gt;也可以反过来&lt;/strong&gt;，标记存活的对象，统一回收所有未被标记的对象。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://mjava.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://mjava.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JAVA四种引用方法使用和对比</title>
    <link href="https://mjava.top/java/jvm/jvm-object-four-quote/"/>
    <id>https://mjava.top/java/jvm/jvm-object-four-quote/</id>
    <published>2020-05-29T02:22:07.000Z</published>
    <updated>2020-05-29T02:37:29.280Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/blog/20200526225718" alt></p><h2 id="强引用（Strongly-Reference）"><a href="#强引用（Strongly-Reference）" class="headerlink" title="强引用（Strongly Reference）"></a>强引用（Strongly Reference）</h2><blockquote><p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p><p><font color="red">回收时机:强引用关系不存在时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id="软引用（Soft-Reference）"><a href="#软引用（Soft-Reference）" class="headerlink" title="软引用（Soft Reference）"></a>软引用（Soft Reference）</h2><blockquote><p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p><p><font color="red">回收时机:发送内存溢出异常前</font></p></blockquote><a id="more"></a><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//软引用</span></span><br><span class="line"></span><br><span class="line">SoftReference&lt;Object&gt; srf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">SoftReference&lt;Object&gt; srf = <span class="keyword">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj=<span class="keyword">null</span>;  <span class="comment">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure><h3 id="弱引用（Weak-Reference）"><a href="#弱引用（Weak-Reference）" class="headerlink" title="弱引用（Weak Reference）"></a>弱引用（Weak Reference）</h3><blockquote><p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p><p><font color="red">回收时机:下一次垃圾回收时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弱引用</span></span><br><span class="line"></span><br><span class="line">WeakReference&lt;Object&gt; wrf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">WeakReference&lt;Object&gt; wrf = <span class="keyword">new</span> WeakReference&lt;Object&gt;(<span class="keyword">new</span> Object());</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure><h3 id="虚引用（Phantom-Reference）"><a href="#虚引用（Phantom-Reference）" class="headerlink" title="虚引用（Phantom Reference）"></a>虚引用（Phantom Reference）</h3><blockquote><p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p><p><font color="red">回收时机:随时</font></p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//虚引用</span></span><br><span class="line">PhantomReference&lt;Object&gt; prf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(<span class="keyword">new</span> Object(), <span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br><span class="line"></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"></span><br><span class="line">Object obj=<span class="keyword">new</span> Object();</span><br><span class="line">PhantomReference&lt;Object&gt; prf = <span class="keyword">new</span> PhantomReference&lt;Object&gt;(obj, <span class="keyword">new</span> ReferenceQueue&lt;&gt;());</span><br><span class="line">obj=<span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200526225718&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;强引用（Strongly-Reference）&quot;&gt;&lt;a href=&quot;#强引用（Strongly-Reference）&quot; class=&quot;headerlink&quot; title=&quot;强引用（Strongly Reference）&quot;&gt;&lt;/a&gt;强引用（Strongly Reference）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;回收时机:强引用关系不存在时&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Object obj=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Object();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&quot;软引用（Soft-Reference）&quot;&gt;&lt;a href=&quot;#软引用（Soft-Reference）&quot; class=&quot;headerlink&quot; title=&quot;软引用（Soft Reference）&quot;&gt;&lt;/a&gt;软引用（Soft Reference）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。&lt;/p&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;回收时机:发送内存溢出异常前&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://mjava.top/categories/JVM/"/>
    
      <category term="JAVA" scheme="https://mjava.top/categories/JVM/JAVA/"/>
    
    
      <category term="JVM" scheme="https://mjava.top/tags/JVM/"/>
    
      <category term="JAVA" scheme="https://mjava.top/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JVM判断对象是否还活着的两种方法</title>
    <link href="https://mjava.top/java/jvm/jvm-object-is-alive/"/>
    <id>https://mjava.top/java/jvm/jvm-object-is-alive/</id>
    <published>2020-05-29T02:18:30.000Z</published>
    <updated>2020-05-29T02:21:26.351Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><blockquote><p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p></blockquote><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>原理简单,判定效率高</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>不能用于复杂的环境中,比如对象的互相引用问题</li></ul><h2 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h2><a id="more"></a><blockquote><p>Java虚拟机使用此算法来判断对象是否存活</p></blockquote><p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p><p><img src="http://cdn.mjava.top/blog/20200526224246.jpeg" alt></p><p>Java中作为GC Roots的对象:</p><ul><li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p></li><li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p></li><li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p></li><li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p></li><li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p></li><li><p>所有被同步锁（synchronized关键字）持有的对象。</p></li><li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p></li><li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;引用计数法&quot;&gt;&lt;a href=&quot;#引用计数法&quot; class=&quot;headerlink&quot; title=&quot;引用计数法&quot;&gt;&lt;/a&gt;引用计数法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Java虚拟机&lt;strong&gt;并不是&lt;/strong&gt;通过引用计数算法来判断对象是否存活的。&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。&lt;/p&gt;&lt;h3 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;原理简单,判定效率高&lt;/li&gt;
&lt;/ul&gt;&lt;h3 id=&quot;缺点&quot;&gt;&lt;a href=&quot;#缺点&quot; class=&quot;headerlink&quot; title=&quot;缺点&quot;&gt;&lt;/a&gt;缺点&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;不能用于复杂的环境中,比如对象的互相引用问题&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;可达性分析算法&quot;&gt;&lt;a href=&quot;#可达性分析算法&quot; class=&quot;headerlink&quot; title=&quot;可达性分析算法&quot;&gt;&lt;/a&gt;可达性分析算法&lt;/h2&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://mjava.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://mjava.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM运行时数据区域</title>
    <link href="https://mjava.top/java/jvm/jvm-running-data-area/"/>
    <id>https://mjava.top/java/jvm/jvm-running-data-area/</id>
    <published>2020-05-26T08:35:47.000Z</published>
    <updated>2020-05-26T08:36:31.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JVM运行时数据区域"><a href="#JVM运行时数据区域" class="headerlink" title="JVM运行时数据区域"></a>JVM运行时数据区域</h1><p><img src="http://cdn.mjava.top/blog/20200526000623.jpeg" alt="Java虚拟机运行时数据区"></p><h3 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h3><ul><li><p>线程私有</p></li><li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p></li><li><p>它可以看作是当前线程所执行的字节码的行号指示器</p></li><li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p></li></ul><a id="more"></a><blockquote><p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p><p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p><p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p><p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p><p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p><p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 </p></blockquote><h3 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h3><ul><li>线程私有</li><li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li><li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color="red">HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li><li><strong>-Xss5m</strong>:    设置5m的栈容量</li><li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li></ul><h3 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h3><ul><li><p>线程私有</p></li><li><p>与Java虚拟机栈相似</p></li><li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p></li><li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p></li><li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p></li></ul><h3 id="Java堆"><a href="#Java堆" class="headerlink" title="Java堆"></a>Java堆</h3><ul><li>线程共享</li><li>所有的Java对象实例不一定都在Java堆上分配内存</li><li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li><li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li><li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li></ul><h3 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h3><ul><li><p>线程共享</p></li><li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p></li><li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p></li><li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p><ul><li>-XX:MaxPermSize    设置永久代内存上限</li><li>-XX:PermSize    设置永久代内存</li></ul></li><li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p></li></ul><ul><li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p></li><li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JVM运行时数据区域&quot;&gt;&lt;a href=&quot;#JVM运行时数据区域&quot; class=&quot;headerlink&quot; title=&quot;JVM运行时数据区域&quot;&gt;&lt;/a&gt;JVM运行时数据区域&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200526000623.jpeg&quot; alt=&quot;Java虚拟机运行时数据区&quot;&gt;&lt;/p&gt;&lt;h3 id=&quot;程序计数器&quot;&gt;&lt;a href=&quot;#程序计数器&quot; class=&quot;headerlink&quot; title=&quot;程序计数器&quot;&gt;&lt;/a&gt;程序计数器&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;线程私有&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;唯一一个没有规定 OutOfMemoryError 异常 的区域&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它可以看作是当前线程所执行的字节码的行号指示器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://mjava.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://mjava.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>JVM逃逸分析技术</title>
    <link href="https://mjava.top/java/jvm/jvm-javastack-EscapeAnalysis/"/>
    <id>https://mjava.top/java/jvm/jvm-javastack-EscapeAnalysis/</id>
    <published>2020-05-26T08:02:00.000Z</published>
    <updated>2020-05-26T08:05:40.964Z</updated>
    
    <content type="html"><![CDATA[<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p><p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>开启逃逸分析：-XX:+DoEscapeAnalysis</li><li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li><li>显示分析结果：-XX:+PrintEscapeAnalysis</li><li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li></ul><a id="more"></a><h2 id="逃逸程度"><a href="#逃逸程度" class="headerlink" title="逃逸程度"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p><h3 id="方法逃逸"><a href="#方法逃逸" class="headerlink" title="方法逃逸"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class="line"><span class="comment">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class="line"><span class="comment">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">craeteStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">     StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     sb.append(s1);</span><br><span class="line">     sb.append(s2);</span><br><span class="line">     <span class="keyword">return</span> sb;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">     StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">     sb.append(s1);</span><br><span class="line">     sb.append(s2);</span><br><span class="line">     <span class="keyword">return</span> sb.toString();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="线程逃逸"><a href="#线程逃逸" class="headerlink" title="线程逃逸"></a>线程逃逸</h3><ul><li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li></ul><h2 id="逃逸分析优化"><a href="#逃逸分析优化" class="headerlink" title="逃逸分析优化"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p><h3 id="栈上分配（Stack-Allocations）"><a href="#栈上分配（Stack-Allocations）" class="headerlink" title="栈上分配（Stack Allocations）"></a>栈上分配（Stack Allocations）</h3><ul><li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li><li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li><li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li></ul><h3 id="标量替换（Scalar-Replacement）"><a href="#标量替换（Scalar-Replacement）" class="headerlink" title="标量替换（Scalar Replacement）"></a>标量替换（Scalar Replacement）</h3><ul><li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li><li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li><li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li><li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li><li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li><li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li></ul><h3 id="同步消除（Synchronization-Elimination）"><a href="#同步消除（Synchronization-Elimination）" class="headerlink" title="同步消除（Synchronization Elimination）"></a>同步消除（Synchronization Elimination）</h3><blockquote><p>也叫锁消除</p></blockquote><ul><li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li><li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li><li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存&lt;/p&gt;&lt;p&gt;简单来讲就是，Java Hotspot 虚拟机可以分析&lt;strong&gt;新创建对象&lt;/strong&gt;的使用范围，并决定是否在 Java 堆上分配内存的一项技术。&lt;/p&gt;&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;开启逃逸分析：-XX:+DoEscapeAnalysis&lt;/li&gt;
&lt;li&gt;关闭逃逸分析：-XX:-DoEscapeAnalysis&lt;/li&gt;
&lt;li&gt;显示分析结果：-XX:+PrintEscapeAnalysis&lt;/li&gt;
&lt;li&gt;逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="JVM" scheme="https://mjava.top/categories/JVM/"/>
    
    
      <category term="JVM" scheme="https://mjava.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>基于SpringCloud搭建Spring-security-oauth认证服务器</title>
    <link href="https://mjava.top/archive/web-security/spring-security-oauth-server-demo/"/>
    <id>https://mjava.top/archive/web-security/spring-security-oauth-server-demo/</id>
    <published>2020-05-19T12:25:06.000Z</published>
    <updated>2020-05-19T12:28:02.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p><p>所以事先要准备好：</p><ul><li>Redis</li><li>Mysql</li></ul><p>并且Mysql执行<a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql" rel="noopener" target="_blank">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> </span><br><span class="line">oauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">(<span class="string">"sunline"</span>,<span class="string">"&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG"</span>,<span class="string">"password"</span>,<span class="string">"true"</span>);</span><br></pre></td></tr></table></figure><blockquote><p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>{bcrypt}</code></p></blockquote><h2 id="开始搭建"><a href="#开始搭建" class="headerlink" title="开始搭建"></a>开始搭建</h2><h3 id="导入pom依赖"><a href="#导入pom依赖" class="headerlink" title="导入pom依赖"></a>导入pom依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--security-oauth--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--redis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    </span><br><span class="line">&lt;!--mysql--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class="line">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#datasource</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">zmh</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">zmh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#redis</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">9991</span></span><br><span class="line"><span class="meta">server.servlet.context-path</span>=<span class="string">/oauthServer</span></span><br></pre></td></tr></table></figure><h3 id="创建用户详情服务类"><a href="#创建用户详情服务类" class="headerlink" title="创建用户详情服务类"></a>创建用户详情服务类</h3><p><img src="http://cdn.mjava.top/blog/20200519194059.png" alt></p><h4 id="创建权限控制类"><a href="#创建权限控制类" class="headerlink" title="创建权限控制类"></a>创建权限控制类</h4><p><img src="http://cdn.mjava.top/blog/20200519194128.png" alt></p><h3 id="创建认证授权类"><a href="#创建认证授权类" class="headerlink" title="创建认证授权类"></a>创建认证授权类</h3><p><img src="http://cdn.mjava.top/blog/20200519194207.png" alt></p><h2 id="获取令牌"><a href="#获取令牌" class="headerlink" title="获取令牌"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194446.png" alt></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accessToken"</span>: <span class="string">"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086"</span>,</span><br><span class="line">    <span class="attr">"expiration"</span>: <span class="string">"2020-05-19T21:11:39.883+0000"</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: [</span><br><span class="line">        <span class="string">"all"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tokenType"</span>: <span class="string">"bearer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="访问资源"><a href="#访问资源" class="headerlink" title="访问资源"></a>访问资源</h3><p>带上获取到的令牌</p><p><img src="http://cdn.mjava.top/blog/20200519194803.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备阶段&quot;&gt;&lt;/a&gt;准备阶段&lt;/h2&gt;&lt;p&gt;这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；&lt;/p&gt;&lt;p&gt;所以事先要准备好：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;li&gt;Mysql&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;并且Mysql执行&lt;a href=&quot;https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Spring-security-oauth初始化Sql&lt;/a&gt;这个SQL，初始化Spring-security-oauth所需要的表。然后执行&lt;/p&gt;
    
    </summary>
    
    
      <category term="web-security" scheme="https://mjava.top/categories/web-security/"/>
    
    
      <category term="OAuth" scheme="https://mjava.top/tags/OAuth/"/>
    
      <category term="spring-security" scheme="https://mjava.top/tags/spring-security/"/>
    
  </entry>
  
  <entry>
    <title>SSO单点登录和CAS框架</title>
    <link href="https://mjava.top/archive/web-security/sso-and-cas/"/>
    <id>https://mjava.top/archive/web-security/sso-and-cas/</id>
    <published>2020-05-14T11:27:14.000Z</published>
    <updated>2020-05-14T11:29:21.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SSO单点登录"><a href="#SSO单点登录" class="headerlink" title="SSO单点登录"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href="https://zh.wikipedia.org/wiki/存取控制" rel="noopener" target="_blank">访问控制</a>的属性。当拥有这项属性时，当用户<a href="https://zh.wikipedia.org/wiki/登入" rel="noopener" target="_blank">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href="https://zh.wikipedia.org/wiki/轻型目录访问协议" rel="noopener" target="_blank">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p><a id="more"></a><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>使用单点登录的好处包括：</p><ul><li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li><li>减少因不同的用户名和密码组合而带来的<a href="https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1" rel="noopener" target="_blank">密码疲劳</a>。</li><li>减少为相同的身份重新输入密码所花费的时间。</li><li>因减少与密码相关的调用IT<a href="https://zh.wikipedia.org/wiki/服务台" rel="noopener" target="_blank">服务台</a>的次数而降低IT成本。<a href="https://zh.wikipedia.org/wiki/單一登入#cite_note-1" rel="noopener" target="_blank">[1]</a></li></ul><p>SSO为所有其它应用程序和系统，以集中的<a href="https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1" rel="noopener" target="_blank">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p><h2 id="CAS框架"><a href="#CAS框架" class="headerlink" title="CAS框架"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p><h3 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h3><ul><li><p>CAS是由<a href="https://zh.wikipedia.org/wiki/耶鲁大学" rel="noopener" target="_blank">耶鲁大学</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1" rel="noopener" target="_blank">[1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p></li><li><p>2004年12月，CAS成为<a href="https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1" rel="noopener" target="_blank">Jasig</a><a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2" rel="noopener" target="_blank">[2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p></li><li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p></li><li><p>2006年12月，<a href="https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1" rel="noopener" target="_blank">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。<a href="https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3" rel="noopener" target="_blank">[3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p></li><li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p></li><li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SSO单点登录&quot;&gt;&lt;a href=&quot;#SSO单点登录&quot; class=&quot;headerlink&quot; title=&quot;SSO单点登录&quot;&gt;&lt;/a&gt;SSO单点登录&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;单点登录&lt;/strong&gt;（英语：Single sign-on，缩写为 SSO），又译为&lt;strong&gt;单一签入&lt;/strong&gt;，一种对于许多相互关连，但是又是各自独立的软件系统，提供&lt;a href=&quot;https://zh.wikipedia.org/wiki/存取控制&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;访问控制&lt;/a&gt;的属性。当拥有这项属性时，当用户&lt;a href=&quot;https://zh.wikipedia.org/wiki/登入&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;登录&lt;/a&gt;时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以&lt;a href=&quot;https://zh.wikipedia.org/wiki/轻型目录访问协议&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;轻型目录访问协议&lt;/a&gt;（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，&lt;strong&gt;单一退出&lt;/strong&gt;（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。&lt;/p&gt;
    
    </summary>
    
    
      <category term="WebSecurity" scheme="https://mjava.top/categories/WebSecurity/"/>
    
    
      <category term="SSO" scheme="https://mjava.top/tags/SSO/"/>
    
      <category term="CAS框架" scheme="https://mjava.top/tags/CAS%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>OAuth2.0与JWT</title>
    <link href="https://mjava.top/archive/web-security/oauth-and-jwt/"/>
    <id>https://mjava.top/archive/web-security/oauth-and-jwt/</id>
    <published>2020-05-12T06:59:43.000Z</published>
    <updated>2020-05-12T07:04:08.543Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><ul><li>客户端：相当于访问受保护资源的软件</li><li>授权服务器：授予客户端令牌的服务</li><li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li><li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li></ul><a id="more"></a><h3 id="授权类型"><a href="#授权类型" class="headerlink" title="授权类型"></a>授权类型</h3><h4 id="授权码许可类型"><a href="#授权码许可类型" class="headerlink" title="授权码许可类型"></a>授权码许可类型<img src="http://cdn.mjava.top/blog/20200512090246.jpg" alt="授权码许可类型"></h4><hr><h4 id="隐式许可类型"><a href="#隐式许可类型" class="headerlink" title="隐式许可类型"></a>隐式许可类型<img src="http://cdn.mjava.top/blog/20200512135621.jpg" alt="隐式许可类型"></h4><hr><h4 id="客户端凭证许可类型"><a href="#客户端凭证许可类型" class="headerlink" title="客户端凭证许可类型"></a>客户端凭证许可类型<img src="http://cdn.mjava.top/blog/20200512135605.jpg" alt="客户端凭证许可类型"></h4><hr><h4 id="资源拥有者凭证许可类型-账号密码模式"><a href="#资源拥有者凭证许可类型-账号密码模式" class="headerlink" title="资源拥有者凭证许可类型(账号密码模式)"></a>资源拥有者凭证许可类型(账号密码模式)<img src="http://cdn.mjava.top/blog/20200512135635.jpg" alt="资源拥有者凭证许可类型(账号密码模式)"></h4><hr><h4 id="断言许可类型"><a href="#断言许可类型" class="headerlink" title="断言许可类型"></a>断言许可类型<img src="http://cdn.mjava.top/blog/20200512135531.jpg" alt="断言许可类型"></h4><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p><p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"alg"</span>: <span class="string">"HS256"</span>,</span><br><span class="line">  <span class="attr">"typ"</span>: <span class="string">"JWT"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p><ul><li>注册声明：JWT官方提供的声明，参考资料:<a href="https://tools.ietf.org/html/rfc7519#section-4.1" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.1</a></li><li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href="https://tools.ietf.org/html/rfc7519#section-4.2" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.2</a></li><li>私有声明：完全用户自定义，参考资料<a href="https://tools.ietf.org/html/rfc7519#section-4.3" rel="noopener" target="_blank">https://tools.ietf.org/html/rfc7519#section-4.3</a></li></ul><p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;OAuth2-0&quot;&gt;&lt;a href=&quot;#OAuth2-0&quot; class=&quot;headerlink&quot; title=&quot;OAuth2.0&quot;&gt;&lt;/a&gt;OAuth2.0&lt;/h2&gt;&lt;p&gt;OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求&lt;code&gt;令牌&lt;/code&gt;，并用这个令牌来访问资源拥有者的资源。&lt;/p&gt;&lt;h3 id=&quot;角色&quot;&gt;&lt;a href=&quot;#角色&quot; class=&quot;headerlink&quot; title=&quot;角色&quot;&gt;&lt;/a&gt;角色&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;客户端：相当于访问受保护资源的软件&lt;/li&gt;
&lt;li&gt;授权服务器：授予客户端令牌的服务&lt;/li&gt;
&lt;li&gt;资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端&lt;/li&gt;
&lt;li&gt;受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Web-Security" scheme="https://mjava.top/categories/Web-Security/"/>
    
    
      <category term="OAuth2.0" scheme="https://mjava.top/tags/OAuth2-0/"/>
    
      <category term="JWT" scheme="https://mjava.top/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>fastDFS安装使用教程</title>
    <link href="https://mjava.top/linux/linux-fastdfs-install/"/>
    <id>https://mjava.top/linux/linux-fastdfs-install/</id>
    <published>2020-05-07T05:34:10.000Z</published>
    <updated>2020-05-07T07:29:32.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="FastDFS简介"><a href="#FastDFS简介" class="headerlink" title="FastDFS简介"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><a id="more"></a><ul><li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p></li><li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p></li><li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p></li><li><p>结构图<img src="http://cdn.mjava.top/blog/20200507152801.webp" alt></p></li></ul><ul><li>上传文件流程<img src="http://cdn.mjava.top/blog/20200507152857.webp" alt></li></ul><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><table><thead><tr><th>系统及软件版本</th><th>Git开源地址</th></tr></thead><tbody><tr><td>Centos 7</td><td>#</td></tr><tr><td>libfastcommon V1.0.43</td><td><a href="https://github.com/happyfish100/fastdfs" rel="noopener" target="_blank">https://github.com/happyfish100/fastdfs</a></td></tr><tr><td>fastdfs V6.06</td><td><a href="https://github.com/happyfish100/libfastcommon" rel="noopener" target="_blank">https://github.com/happyfish100/libfastcommon</a></td></tr></tbody></table><blockquote><p>我虚拟机装的Centos7的ip地址是172.16.54.137</p></blockquote><h2 id="安装前工作"><a href="#安装前工作" class="headerlink" title="安装前工作"></a>安装前工作</h2><h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><blockquote><p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service firewalld stop</span><br></pre></td></tr></table></figure><h3 id="下载所需安装包"><a href="#下载所需安装包" class="headerlink" title="下载所需安装包"></a>下载所需安装包</h3><ul><li>libfastcommon</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure><ul><li>fastDFS</li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure><h3 id="安装fastDFS环境"><a href="#安装fastDFS环境" class="headerlink" title="安装fastDFS环境"></a>安装fastDFS环境</h3><ul><li>解压安装<code>libfastcommon</code></li></ul><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><h2 id="安装fastDFS"><a href="#安装fastDFS" class="headerlink" title="安装fastDFS"></a>安装fastDFS</h2><h3 id="解压安装"><a href="#解压安装" class="headerlink" title="解压安装"></a>解压安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure><blockquote><p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p><ul><li>client.conf.sample    fastDFS客户端配置文件</li><li>storage.conf.sample</li><li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li><li>tracker.conf.sample</li></ul></blockquote><h3 id="配置并启动Tracker"><a href="#配置并启动Tracker" class="headerlink" title="配置并启动Tracker"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure><p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Tracker</span></span><br><span class="line">service fdfs_trackerd start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Tracker</span></span><br><span class="line">service fdfs_trackerd stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure><h3 id="配置并启动Storage"><a href="#配置并启动Storage" class="headerlink" title="配置并启动Storage"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure><p>修改<code>storage.conf</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/storage</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">存放文件地址</span></span><br><span class="line">store_path0=/data/fastdfs/file</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应的文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure><p>服务命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动Storage</span></span><br><span class="line">service fdfs_storaged start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭Storage</span></span><br><span class="line">service fdfs_storaged stop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开机自启</span></span><br><span class="line">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure><h3 id="上传文件测试"><a href="#上传文件测试" class="headerlink" title="上传文件测试"></a>上传文件测试</h3><blockquote><p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p></blockquote><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">复制一份客户端配置文件</span></span><br><span class="line">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure><p>修改<code>client.config</code>配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">base_path=/data/fastdfs/client</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更改为你的tracker地址</span></span><br><span class="line">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure><p>创建对应文件夹</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure><p>使用方法</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">上传成功后返回</span></span><br><span class="line">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><p><img src="http://cdn.mjava.top/blog/20200506215501.png" alt></p><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><blockquote><p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p></blockquote><p>首先创建一个文件夹，存放nginx的配置文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建文件夹</span></span><br><span class="line">mkdir -p /data/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">进入文件夹并下载nginx配置文件</span></span><br><span class="line">cd /data/nginx &amp;&amp; wget http://cdn.mjava.top/file/nginx.conf</span><br></pre></td></tr></table></figure><blockquote><p>配置文件已经修改过了，直接下载即可使用</p></blockquote><p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure><p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class="line">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p><p><img src="http://cdn.mjava.top/blog/20200507132841.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;FastDFS简介&quot;&gt;&lt;a href=&quot;#FastDFS简介&quot; class=&quot;headerlink&quot; title=&quot;FastDFS简介&quot;&gt;&lt;/a&gt;FastDFS简介&lt;/h2&gt;&lt;p&gt;FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &amp;lt; file_size &amp;lt;500MB）为载体的在线服务。&lt;/p&gt;&lt;p&gt;FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://mjava.top/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://mjava.top/tags/Linux/"/>
    
      <category term="fastDFS" scheme="https://mjava.top/tags/fastDFS/"/>
    
  </entry>
  
  <entry>
    <title>插入emoji到mysql时提示了一个表里不存在的字段的错误</title>
    <link href="https://mjava.top/mysql/mysql-utf8mb4-error/"/>
    <id>https://mjava.top/mysql/mysql-utf8mb4-error/</id>
    <published>2020-04-29T09:16:27.000Z</published>
    <updated>2020-04-29T09:18:36.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1.问题描述"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\xF0\x9F\x98\x98' for column 'user_name' at row 14</span><br></pre></td></tr></table></figure><a id="more"></a><p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p><h2 id="２-解决方案"><a href="#２-解决方案" class="headerlink" title="２.解决方案"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p><p><img src="http://cdn.mjava.top/blog/20200429171012.png" alt></p><p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p><p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-问题描述&quot;&gt;&lt;a href=&quot;#1-问题描述&quot; class=&quot;headerlink&quot; title=&quot;1.问题描述&quot;&gt;&lt;/a&gt;1.问题描述&lt;/h2&gt;&lt;p&gt;由于公司前端有需求，需要在&lt;code&gt;tiny_user_info&lt;/code&gt;表的&lt;code&gt;nickname&lt;/code&gt;这个字段里存入emoji表情，于是我熟练地将这个字段修改为&lt;code&gt;utf8mb4&lt;/code&gt;，改好后测试插入一条带emoji数据。于是报了这个错误：&lt;/p&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: &#39;\xF0\x9F\x98\x98&#39; for column &#39;user_name&#39; at row 14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://mjava.top/categories/MySQL/"/>
    
    
      <category term="Pit" scheme="https://mjava.top/tags/Pit/"/>
    
      <category term="MySQL" scheme="https://mjava.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】手写平衡二叉树（AVL）</title>
    <link href="https://mjava.top/algorithm/algorithm-avltree-01/"/>
    <id>https://mjava.top/algorithm/algorithm-avltree-01/</id>
    <published>2020-02-01T07:56:00.000Z</published>
    <updated>2020-02-04T03:24:07.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="【数据结构】手写平衡二叉树（AVL）"><a href="#【数据结构】手写平衡二叉树（AVL）" class="headerlink" title="【数据结构】手写平衡二叉树（AVL）"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src="http://cdn.mjava.top/blog/20200201165139.jpg" alt></p><blockquote><p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p><p>本文源代码：<a href="https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java" rel="noopener" target="_blank">手写AVL树</a></p></blockquote><h2 id="什么是平衡二叉树？"><a href="#什么是平衡二叉树？" class="headerlink" title="什么是平衡二叉树？"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href="https://baike.baidu.com/item/平衡二叉树/10421057" rel="noopener" target="_blank">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p><a id="more"></a><h3 id="平衡二叉树基本特点"><a href="#平衡二叉树基本特点" class="headerlink" title="平衡二叉树基本特点"></a>平衡二叉树基本特点</h3><ul><li>左右子树深度差不能大于1</li><li>左边子树永远比根节点小</li><li>右边子树永远比根节点大</li></ul><h3 id="平衡二叉树基本结构及操作"><a href="#平衡二叉树基本结构及操作" class="headerlink" title="平衡二叉树基本结构及操作"></a>平衡二叉树基本结构及操作</h3><ul><li>左左结构——右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153234.jpg" alt="左左结构"></p><ul><li>右右结构——左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153301.jpg" alt="右右结构"></p><ul><li>左右结构——左子先左旋，然后整体右旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153329.jpg" alt="左右结构"></p><ul><li>右左结构——右子先右旋，然后整体左旋</li></ul><p><img src="http://cdn.mjava.top/blog/20200201153403.jpg" alt="右左结构"></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AVLTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Node rootNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//二叉树节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> Node parent; <span class="comment">//父</span></span><br><span class="line">        <span class="keyword">public</span> Node left;<span class="comment">//左子树</span></span><br><span class="line">        <span class="keyword">public</span> Node right;<span class="comment">//右子树</span></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> data;<span class="comment">//存放的数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> depth;<span class="comment">//深度</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> balance;<span class="comment">//平衡因子</span></span><br><span class="line"><span class="comment">//有参构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data=data;</span><br><span class="line">            <span class="keyword">this</span>.depth=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">this</span>.balance=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>暴露一个方法给外部调用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**添加数据方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">this</span>.rootNode=<span class="keyword">new</span> Node(data);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.insert(rootNode,data);</span><br><span class="line">        <span class="comment">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.rootNode.parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rootNode=<span class="keyword">this</span>.rootNode.parent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际内部是调用另一个<code>insert</code>方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Node root,<span class="keyword">int</span> data)</span></span>&#123;</span><br><span class="line">    <span class="comment">//插入的数据比根小</span></span><br><span class="line">    <span class="keyword">if</span> (data&lt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">            root.left=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.left.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.left,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//插入的数据比根大</span></span><br><span class="line">    <span class="keyword">if</span> (data&gt;root.data)&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.right==<span class="keyword">null</span>) &#123;</span><br><span class="line">            root.right=<span class="keyword">new</span> Node(data);</span><br><span class="line">            root.right.parent=root;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.insert(root.right,data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root.balance&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断左子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.left.balance&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.leftTurn(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.rightTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.balance&lt;-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="comment">//判断右子的平衡因子</span></span><br><span class="line">        <span class="keyword">if</span> (root.right.balance&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.rightTurn(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leftTurn(root);</span><br><span class="line">    &#125;</span><br><span class="line">    root.depth=<span class="keyword">this</span>.getDepth(root);</span><br><span class="line">    root.balance=<span class="keyword">this</span>.getBalance(root);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="右旋"><a href="#右旋" class="headerlink" title="右旋"></a>右旋</h3><blockquote><p>右旋的操作如下</p><ul><li>我父变成左子的父</li><li>左子变成我的父</li><li>我变成左子的右子</li><li>左子的右子变成我的左子</li><li>(当左子的右子存在时)我变成左子的右子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rightTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node leftSon=node.left;</span><br><span class="line">    Node leftSon_rightSon=leftSon.right;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            <span class="comment">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class="line">            parent.left=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            <span class="comment">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class="line">            parent.right=leftSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    leftSon.parent=parent;</span><br><span class="line">    node.parent=leftSon;</span><br><span class="line">    leftSon.right=node;</span><br><span class="line">    node.left=leftSon_rightSon;</span><br><span class="line">    <span class="comment">//如果左子的右子确实存在的</span></span><br><span class="line">    <span class="keyword">if</span> (leftSon_rightSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">//我变成左子的右子的父</span></span><br><span class="line">        leftSon_rightSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重新计算深度和平衡因子</span></span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    leftSon.depth=<span class="keyword">this</span>.getDepth(leftSon);</span><br><span class="line">    leftSon.balance=<span class="keyword">this</span>.getBalance(leftSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="左旋"><a href="#左旋" class="headerlink" title="左旋"></a>左旋</h3><blockquote><p>左旋的操作如下</p><ul><li>我的父变右子的父</li><li>右子变成我的父</li><li>我变成右子的左子</li><li>右子的左子变成我的右子</li><li>(当右子的左子存在时)我变成右子的左子的父</li><li>计算左右节点的深度</li><li>计算深度差</li></ul></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">leftTurn</span><span class="params">(@NotNull Node node)</span></span>&#123;</span><br><span class="line">    Node parent=node.parent;</span><br><span class="line">    Node rightSon=node.right;</span><br><span class="line">    Node rightSon_leftSon=rightSon.left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.left)&#123;</span><br><span class="line">            parent.left=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node==parent.right)&#123;</span><br><span class="line">            parent.right=rightSon;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rightSon.parent=parent;</span><br><span class="line">    node.parent=rightSon;</span><br><span class="line">    rightSon.left=node;</span><br><span class="line">    node.right=rightSon_leftSon;</span><br><span class="line">    <span class="keyword">if</span> (rightSon_leftSon!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightSon_leftSon.parent=node;</span><br><span class="line">    &#125;</span><br><span class="line">    node.depth=<span class="keyword">this</span>.getDepth(node);</span><br><span class="line">    node.balance=<span class="keyword">this</span>.getBalance(node);</span><br><span class="line">    rightSon.depth=<span class="keyword">this</span>.getDepth(rightSon);</span><br><span class="line">    rightSon.balance=<span class="keyword">this</span>.getBalance(rightSon);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算深度"><a href="#计算深度" class="headerlink" title="计算深度"></a>计算深度</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算深度*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getDepth</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left==<span class="keyword">null</span> &amp;&amp; node.right!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right==<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (node.right!=<span class="keyword">null</span> &amp;&amp; node.left!=<span class="keyword">null</span>) &#123;</span><br><span class="line">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class="line">    &#125;</span><br><span class="line">    depth++;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算平衡因子"><a href="#计算平衡因子" class="headerlink" title="计算平衡因子"></a>计算平衡因子</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**计算左右深度差*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getBalance</span><span class="params">(Node node)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> leftDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> rightDepth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(node.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        leftDepth=node.left.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(node.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        rightDepth=node.right.depth;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *      左减右</span></span><br><span class="line"><span class="comment">         * 为负数：右边子树高</span></span><br><span class="line"><span class="comment">         * 为正数: 左边子树高</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">    <span class="keyword">return</span> leftDepth-rightDepth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="附言"><a href="#附言" class="headerlink" title="附言"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p><ul><li><p><a href="https://visualgo.net/zh" rel="noopener" target="_blank">visualgo在线</a></p></li><li><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html" rel="noopener" target="_blank">数据结构可视化</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;【数据结构】手写平衡二叉树（AVL）&quot;&gt;&lt;a href=&quot;#【数据结构】手写平衡二叉树（AVL）&quot; class=&quot;headerlink&quot; title=&quot;【数据结构】手写平衡二叉树（AVL）&quot;&gt;&lt;/a&gt;【数据结构】手写平衡二叉树（AVL）&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200201165139.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬&lt;/p&gt;
&lt;p&gt;本文源代码：&lt;a href=&quot;https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;手写AVL树&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;什么是平衡二叉树？&quot;&gt;&lt;a href=&quot;#什么是平衡二叉树？&quot; class=&quot;headerlink&quot; title=&quot;什么是平衡二叉树？&quot;&gt;&lt;/a&gt;什么是平衡二叉树？&lt;/h2&gt;&lt;p&gt;平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵&lt;a href=&quot;https://baike.baidu.com/item/平衡二叉树/10421057&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;平衡二叉树&lt;/a&gt;。AVL树查找的时间复杂度为O(logN)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://mjava.top/categories/Algorithm/"/>
    
    
      <category term="数据结构" scheme="https://mjava.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="AVL" scheme="https://mjava.top/tags/AVL/"/>
    
      <category term="平衡二叉树" scheme="https://mjava.top/tags/%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="二叉树" scheme="https://mjava.top/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>【转】免费可商用，最值得收藏的10个插画素材网站</title>
    <link href="https://mjava.top/recommend/recommend-tool-1/"/>
    <id>https://mjava.top/recommend/recommend-tool-1/</id>
    <published>2020-01-16T01:24:52.000Z</published>
    <updated>2020-01-16T01:32:59.820Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转自<a href="http://liujinkai.com/2019/10/18/10-best-free-illustration/" rel="noopener" target="_blank">凯凯刘</a></p></blockquote><p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p><a id="more"></a><h2 id="IRA-Design"><a href="#IRA-Design" class="headerlink" title="IRA Design"></a>IRA Design</h2><p>网站：<a href="https://iradesign.io/" rel="noopener" target="_blank">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p><p><img src="http://cdn.mjava.top/blog/20200116092835.png" alt></p><h2 id="Absurd-Design"><a href="#Absurd-Design" class="headerlink" title="Absurd Design"></a>Absurd Design</h2><p>网站：<a href="https://absurd.design/" rel="noopener" target="_blank">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p><p><img src="http://cdn.mjava.top/blog/20200116092907.png" alt></p><h2 id="Ouch"><a href="#Ouch" class="headerlink" title="Ouch!"></a>Ouch!</h2><p>网站：<a href="https://icons8.com/ouch" rel="noopener" target="_blank">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p><p><img src="http://cdn.mjava.top/blog/20200116092945.png" alt></p><h2 id="unDraw"><a href="#unDraw" class="headerlink" title="unDraw"></a>unDraw</h2><p>网站：<a href="https://undraw.co/" rel="noopener" target="_blank">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p><p><img src="http://cdn.mjava.top/blog/20200116093011.png" alt></p><h2 id="Pngtree"><a href="#Pngtree" class="headerlink" title="Pngtree"></a>Pngtree</h2><p>网站：<a href="https://pngtree.com/" rel="noopener" target="_blank">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p><p><img src="http://cdn.mjava.top/blog/20200116093038.png" alt></p><h2 id="Drawkit"><a href="#Drawkit" class="headerlink" title="Drawkit"></a>Drawkit</h2><p>网站：<a href="https://www.drawkit.io/" rel="noopener" target="_blank">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p><p><img src="http://cdn.mjava.top/blog/20200116093103.png" alt></p><h2 id="Humaaans"><a href="#Humaaans" class="headerlink" title="Humaaans"></a>Humaaans</h2><p>网站：<a href="https://www.humaaans.com/" rel="noopener" target="_blank">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p><p><img src="http://cdn.mjava.top/blog/20200116093137.png" alt></p><h2 id="Manypixels"><a href="#Manypixels" class="headerlink" title="Manypixels"></a>Manypixels</h2><p>网站：<a href="https://www.manypixels.co/gallery/" rel="noopener" target="_blank">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093201.png" alt></p><h2 id="Lukaszadam"><a href="#Lukaszadam" class="headerlink" title="Lukaszadam"></a>Lukaszadam</h2><p>网站：<a href="https://lukaszadam.com/illustrations" rel="noopener" target="_blank">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p><p><img src="http://cdn.mjava.top/blog/20200116093226.png" alt></p><h2 id="Pixabay"><a href="#Pixabay" class="headerlink" title="Pixabay"></a>Pixabay</h2><p>网站：<a href="https://pixabay.com/illustrations/search/" rel="noopener" target="_blank">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p><p><img src="http://cdn.mjava.top/blog/20200116093253.png" alt></p>]]></content>
    
    <summary type="html">
    
      现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。
    
    </summary>
    
    
      <category term="Recommend" scheme="https://mjava.top/categories/Recommend/"/>
    
    
      <category term="UI" scheme="https://mjava.top/tags/UI/"/>
    
      <category term="推荐" scheme="https://mjava.top/tags/%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】你真的了解ArrayDeque嘛？</title>
    <link href="https://mjava.top/java/java-arraydeque-source-1/"/>
    <id>https://mjava.top/java/java-arraydeque-source-1/</id>
    <published>2020-01-08T06:00:51.000Z</published>
    <updated>2020-01-09T08:14:16.745Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上篇文章说<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>也可以实现<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,因为他层是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">数组</strong>，而队列和栈都是只要<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>都是通过实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口来获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口通过继承<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">双端队列</code>，由此可以获得<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>的功能。为了空间能得到充分利用，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>使用了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>；还有<a href="https://mjava.top/java/java-linkedlist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">LinkedList</a>可以插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值，而<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的。</p><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是双端队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">一般队列是这样的：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104246.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">双端队列是这样的</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104215.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">什么是循环队列？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108104300.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p></blockquote><h2 id="hdeque" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">Deque有什么？</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">话不多说，看图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107134323.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107232905.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这边队列的每种功能都有两个方法，其中<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">remove()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">element()</code>如果操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">offer()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">poll()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peek()</code>操作失败会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">返回null或者false</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">其实真正用到的就<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addLast()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">pollFirst</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">getFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addFirst()</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">peekFirst</code>；</p><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">ArrayDeque内部就只有4个变量，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">对象数组element[]</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">头指针head</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">尾指针tail</strong>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200107235523.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">构造方法和其他集合一样，有<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">有参构造</strong>和<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">无参构造</strong></p><h3 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">很简单，直接初始化一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">容量为16</strong>的对象数组</p><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">16</span>];<br>}<br></code></pre><h3 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造</span></h3><h4 id="hint" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入参数为int数</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">void</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">allocateElements</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">calculateSize(int numElements)</strong>调整传入的值大小</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003104.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">循环队列</code>这个算法</strong></p><h4 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">传入的参数为集合对象</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">ArrayDeque</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">第一步调用了和上面一样的方法，这里多了个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">addAll()</code>方法</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">addAll(Collection<!--? extends E--> c)</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108003710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这边复制时并没有用和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">System.arraycopy()</code>方法，而是采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">for循环</code>来调用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值的，而其他集合里面有的是可以传<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>的，所以这边采用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>一个一个的加，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">add()</code>方法如果传入的值为空的话，就会<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p></blockquote><h2 id="haddlast" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addLast()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">核心算法</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">举一些例子：当<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">8</span></span></span></span>，<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span><span class="mrel" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">=</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">7</span></span></span></span></p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">0&amp;7=0</span></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108095155.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">doubleCapacity()</strong>扩容为原来的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108103710.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">方便理解，我画下上扩容的流程图，比如head在中间：</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108112208.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hpollfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">pollFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">移除头部数据</p><h3 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114243.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">删除的时候并没有像<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>一样移动数据，而只是移动了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的位置</p></blockquote><h3 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108114844.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hgetfirstpeekfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">getFirst()和peekFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这两个方法都是一样的，都是直接返回<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的数据，区别就是一个会抛异常，一个不会</p><h3 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码分析</span></h3><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">getFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">getFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-meta" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">@SuppressWarnings</span>(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"unchecked"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">if</span>&nbsp;(result&nbsp;==&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">throw</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;result;<br>}<br></code></pre><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">peekFirst()</strong></li></ul><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;E&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">peekFirst</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-comment" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre><h2 id="haddfirst" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">addFirst()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108131919.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里还是用了上面讲了位与算法，算出<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>的值，然后插入数据</p><h3 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">流程图</span></h3><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108133154.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">源码解析</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">清空这个操作是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>指向的元素开始删除，直到<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">head</code>=<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">tail</code>，清空完成；</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200108134034.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hsize" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">size()</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayList</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>一样定义个size不好嘛？<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-function" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">public</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">int</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">size</span><span class="hljs-params" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br>}<br></code></pre><h2 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面的方法基本上有<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href="https://mjava.top/java/java-base-wei/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">位运算</a>这篇文章；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">核心算法：</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>右边为<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span>时，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为0时，结果为0；当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">&amp;</code>左边的数为负数时，-1=<span class="katex" style="font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;"><span class="katex-mathml" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;"></span><span class="katex-html" aria-hidden="true" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">2</span><span class="msupsub" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;"><span class="vlist-t" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;"><span class="vlist-r" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;"><span class="vlist" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;"><span class="pstrut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight" style="color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;"><span class="mord mathit mtight" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;">n</span></span></span></span></span></span></span></span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span><span class="mbin" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">−</span><span class="mspace" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;"></span></span><span class="base" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;"><span class="strut" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;"></span><span class="mord" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">1</span></span></span></span></strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href="https://mjava.top/java/java-arraylist-source-1" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>每次扩容为原来数组长度的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">2倍</strong></p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>不能插入<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>值</p></div>]]></content>
    
    <summary type="html">
    
      LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="源码解析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
      <category term="ArrayDeque" scheme="https://mjava.top/tags/ArrayDeque/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】想了解LinkedList？看这篇文章就对了</title>
    <link href="https://mjava.top/java/java-linkedlist-source-1/"/>
    <id>https://mjava.top/java/java-linkedlist-source-1/</id>
    <published>2020-01-04T16:21:43.000Z</published>
    <updated>2020-01-09T08:18:24.464Z</updated>
    
    <content type="html"><![CDATA[<div class="output_wrapper" id="output_wrapper_id" style="font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;"><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">本文基于JDK1.8</p></blockquote><h2 id="h" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">前言</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>由于实现了<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Deque</code>这个接口，所以可以当<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>使用。不过一般要用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">栈</code>或<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">队列</code>的时候推荐使用<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">ArrayDeque</code>,所以这里就不讲<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href="https://mjava.top/java/java-arraylist-source-1/" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;">ArrayList</a>一样，讲些常用的方法。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部是由<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">双链表</strong>组成的，里面存放着一个个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>又包含三个元素(<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code>,<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>):</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据</li><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">链表的第一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">prev</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，最后个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">next</code>为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code></p></blockquote><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">我简单的画了一张图，可以看下</p><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213058.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">本文内容</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104164627.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-2" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">内部变量</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">相比于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Arraylist</code>，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>内部变量就少得多，就只有三个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>存这当前元素的个数，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">first</code>指向链表的第一个，<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">last</code>指向列表的最后一个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104170249.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-3" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">构造方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="h-4" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">无参构造方法</span></h3><h4 id="h-5" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre><h4 id="h-6" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">无参构造只是初始化了数据，并未做任何操作<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">(初始化  size=0  first=null   last=null)</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104172851.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="h-7" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">有参构造方法</span></h3><h4 id="h-8" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;oldList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre><h4 id="h-9" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104174143.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hget" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hgetintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">get(int index)</span></h3><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p></blockquote><h4 id="h-10" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰2"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰3"</span>);<br>list.get(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">2</span>);<br></code></pre><h4 id="h-11" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183636.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkElementIndex(int index)</strong>检查越界</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183853.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104183939.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">node(int index)</strong>查找Node</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200109160648.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hadd" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="haddee" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(E e)</span></h3><h4 id="h-12" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-13" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175255.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkLast(E e)</strong>连接最后一个元素</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104175907.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">Node&lt;E&gt;</strong>内部类</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">就像开头说的，每个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>里有三个，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">prev:</strong>指向前一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code>，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">item:</strong>存放存入的数据，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">next:</strong>指向下一个<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">Node</code></p></blockquote><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">private</span>&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">static</span>&nbsp;<span class="hljs-class" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;"><span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">class</span>&nbsp;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">Node</span>&lt;<span class="hljs-title" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre><h4 id="h-14" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">第一次添加时的流程示意图</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224556.jpg" alt="第一次添加时的流程示意图" title="第一次添加时的流程示意图" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">第一次添加时的流程示意图</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">不是第一次添加</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213234.jpg" alt="不是第一次添加" title="不是第一次添加" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">不是第一次添加</figcaption></figure><h3 id="haddintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">add(int index, E element)</span></h3><h4 id="h-15" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.add(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hk"</span>);<br></code></pre><h4 id="h-16" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码分析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104185743.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">checkPositionIndex(int index)</strong>检查是否越界</li></ul><blockquote style="line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;">  <p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">size</code>的，因为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">linkedList</code>的索引设计也是从<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">0</code>开始的，<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">所以size永远比索引大1</strong></p></blockquote><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190000.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104190144.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104191607.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-17" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">上面说的可能有点绕，看看流程图就明白了，哈哈</p><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为第一个</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213757.jpg" alt="添加的位置为第一个" title="添加的位置为第一个" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为第一个</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">添加的位置为中间</span></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104213437.jpg" alt="添加的位置为中间" title="添加的位置为中间" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">添加的位置为中间</figcaption></figure><h2 id="hset" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hsetintindexeelement" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">set(int index, E element)</span></h3><h4 id="h-18" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.set(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">0</span>,<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br></code></pre><h4 id="h-19" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这里大多调用的是和<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">get()</code>里一样的方法</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104194247.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hremove" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hremoveintindex" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(int index)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p><h4 id="h-20" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"灰"</span>);<br>list.remove(<span class="hljs-number" style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;">1</span>);<br></code></pre><h4 id="h-21" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104205658.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;"><strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">item</code></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104222250.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h4 id="h-22" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">流程图</span></h4><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">第一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215754.jpg" alt="删除的是链表里的第一个元素" title="删除的是链表里的第一个元素" style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;">删除的是链表里的第一个元素</figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">中间元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104215947.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><ul style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;"><li style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;">删除的是链表里的<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">最后一个元素</strong></li></ul><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104220851.jpg" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h3 id="hremoveobjecto" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">remove(Object o)</span></h3><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">这个删除就比较<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">慢</code>了，它是从头开始一一对比，时间复杂度为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">O(n)</code>，这个删除也是<strong style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);">只删除最早添加的数据</strong></p><h4 id="h-23" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.remove(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br></code></pre><h4 id="h-24" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">unlink()</code>方法就是上面讲的那个</p><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104223708.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="hclear" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear方法</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><h3 id="hclear-1" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">clear()</span></h3><h4 id="h-25" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">代码实现</span></h4><pre style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);"><code class="java language-java hljs" style="overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;">List&lt;String&gt;&nbsp;list=<span class="hljs-keyword" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class="hljs-string" style="font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;">"hui"</span>);<br>list.clear();<br></code></pre><h4 id="h-26" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;"><span style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;">源码解析</span></h4><figure style="font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;"><img src="http://cdn.mjava.top/blog/20200104224213.png" alt title style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;"><figcaption style="line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;"></figcaption></figure><h2 id="h-27" style="color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;"><span style="font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;">总结</span><span style="display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;"> </span></h2><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;"><code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">null</code>，方便<code style="font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);">GC</code>回收。</p><p style="font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>]]></content>
    
    <summary type="html">
    
      LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="源码分析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="LinkedList" scheme="https://mjava.top/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>【源码解析】扒开ArrayList的外衣</title>
    <link href="https://mjava.top/java/java-arraylist-source-1/"/>
    <id>https://mjava.top/java/java-arraylist-source-1/</id>
    <published>2020-01-03T11:13:31.000Z</published>
    <updated>2020-01-03T11:24:15.667Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p></blockquote><h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p><p><img src="http://cdn.mjava.top/blog/20200103101050.png" alt></p><h2 id="方法变量"><a href="#方法变量" class="headerlink" title="方法变量"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p><p><img src="http://cdn.mjava.top/blog/Selection_005.png" alt></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h3 id="有参构造"><a href="#有参构造" class="headerlink" title="有参构造"></a>有参构造</h3><h4 id="传入数组的大小"><a href="#传入数组的大小" class="headerlink" title="传入数组的大小"></a>传入数组的大小</h4><h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_004.png" alt></p><h4 id="传入一个list对象"><a href="#传入一个list对象" class="headerlink" title="传入一个list对象"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color="orange">复制</font>到新的ArrayList对象</p><h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class="string">"z"</span>,<span class="string">"m"</span>,<span class="string">"h"</span>));</span><br></pre></td></tr></table></figure><blockquote><p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p></blockquote><h5 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h5><p><img src="http://cdn.mjava.top/blog/Selection_006.png" alt></p><h3 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p><h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="源码解析-2"><a href="#源码解析-2" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/20200103112943.png" alt></p><h2 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p><h3 id="add-E-e"><a href="#add-E-e" class="headerlink" title="add(E e)"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p><h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"灰灰HK"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-3"><a href="#源码解析-3" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_007.png" alt></p><ul><li><font color="orange">ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li></ul><p><img src="http://cdn.mjava.top/blog/Selection_009.png" alt></p><ul><li><font color="orange">calculateCapacity(Object[] elementData, int minCapacity)</font></li></ul><p><img src="http://cdn.mjava.top/blog/Selection_010.png" alt></p><ul><li>再回到<font color="orange">ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li></ul><blockquote><p>比如第二次调用add方法，此时<code>size+1=2</code>, <code>elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_011.png" alt></p><ul><li><font color="orange">grow(int minCapacity)</font>扩容</li></ul><blockquote><p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c/cpp实现</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_012.png" alt></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p><ul><li><p>每次添加元素时判断数组容量是否充足</p></li><li><p><font color="orange">第一次</font>添加元素，把数组容量扩容到10</p></li><li><p>扩容时，除第一次，以后的每次扩容为<font color="orange">原大小的1.5倍</font></p></li><li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p></li></ul><h3 id="add-int-index-E-element"><a href="#add-int-index-E-element" class="headerlink" title="add(int index, E element)"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p><h4 id="代码实现-4"><a href="#代码实现-4" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.add(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-4"><a href="#源码解析-4" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_013.png" alt></p><blockquote><p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p></blockquote><ul><li><font color="orange">rangeCheckForAdd(int index)</font>判断是否越界</li></ul><blockquote><p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_014.png" alt></p><ul><li><font color="orange">System.arraycopy()</font>拷贝数组</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> length)</span></span></span><br></pre></td></tr></table></figure><blockquote><ul><li>src    原数组对象</li><li>srcPos    原数组起始位置</li><li>dest    目标数组</li><li>destPos    目标数组起始位置</li><li>length    复制多少个数据</li></ul></blockquote><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>插入方法其主要步骤如下:</p><ul><li>检查插入的位置是否越界</li><li>检查数组容量是否充足，不充足进行扩容相关操作</li><li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li></ul><h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><h3 id="get-int-index"><a href="#get-int-index" class="headerlink" title="get(int index)"></a>get(int index)</h3><h4 id="代码实现-5"><a href="#代码实现-5" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.get(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-5"><a href="#源码解析-5" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_015.png" alt></p><ul><li><font color="orange">rangeCheck(int index)</font>判断是否越界</li></ul><blockquote><p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color="orange">相当于</font>是开始的从1开始的</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><font color="orange">elementData(int index)</font>直接返回对应下标的数组元素</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>get方法比较简单，主要步骤为：</p><ul><li>检查是否越界</li><li>返回对应元素</li></ul><h2 id="set方法"><a href="#set方法" class="headerlink" title="set方法"></a>set方法</h2><h3 id="set-int-index-E-element"><a href="#set-int-index-E-element" class="headerlink" title="set(int index, E element)"></a>set(int index, E element)</h3><h4 id="代码实现-6"><a href="#代码实现-6" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.set(<span class="number">0</span>,<span class="string">"灰灰"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-6"><a href="#源码解析-6" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_016.png" alt></p><h2 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h2><h3 id="remove-int-index"><a href="#remove-int-index" class="headerlink" title="remove(int index)"></a>remove(int index)</h3><h4 id="代码实现-7"><a href="#代码实现-7" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-7"><a href="#源码解析-7" class="headerlink" title="源码解析"></a>源码解析</h4><blockquote><p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p></blockquote><p><img src="http://cdn.mjava.top/blog/Selection_017.png" alt></p><h3 id="remove-Object-o"><a href="#remove-Object-o" class="headerlink" title="remove(Object o)"></a>remove(Object o)</h3><blockquote><p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color="orange">删除最早添加的元素</font></p></blockquote><h4 id="代码实现-8"><a href="#代码实现-8" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.remove(<span class="string">"hk"</span>);</span><br></pre></td></tr></table></figure><h4 id="源码解析-8"><a href="#源码解析-8" class="headerlink" title="源码解析"></a>源码解析</h4><p><img src="http://cdn.mjava.top/blog/Selection_018.png" alt></p><ul><li><font color="orange">fastRemove(int index)</font>删除元素</li></ul><blockquote><p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="clear方法"><a href="#clear方法" class="headerlink" title="clear方法"></a>clear方法</h2><h3 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h3><h4 id="代码实现-9"><a href="#代码实现-9" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"hk"</span>);</span><br><span class="line">list.clear();</span><br></pre></td></tr></table></figure><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p><img src="http://cdn.mjava.top/blog/Selection_019.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p><p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;本文内容&quot;&gt;&lt;a href=&quot;#本文内容&quot; class=&quot;headerlink&quot; title=&quot;本文内容&quot;&gt;&lt;/a&gt;本文内容&lt;/h2&gt;&lt;p&gt;当然ArrayList里的方法不止这些，本文主要讲一些常用的方法&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/20200103101050.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;方法变量&quot;&gt;&lt;a href=&quot;#方法变量&quot; class=&quot;headerlink&quot; title=&quot;方法变量&quot;&gt;&lt;/a&gt;方法变量&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Arraylist&lt;/code&gt;里的方法变量主要有以下几个&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/blog/Selection_005.png&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;构造方法&quot;&gt;&lt;a href=&quot;#构造方法&quot; class=&quot;headerlink&quot; title=&quot;构造方法&quot;&gt;&lt;/a&gt;构造方法&lt;/h2&gt;&lt;h3 id=&quot;有参构造&quot;&gt;&lt;a href=&quot;#有参构造&quot; class=&quot;headerlink&quot; title=&quot;有参构造&quot;&gt;&lt;/a&gt;有参构造&lt;/h3&gt;&lt;h4 id=&quot;传入数组的大小&quot;&gt;&lt;a href=&quot;#传入数组的大小&quot; class=&quot;headerlink&quot; title=&quot;传入数组的大小&quot;&gt;&lt;/a&gt;传入数组的大小&lt;/h4&gt;&lt;h5 id=&quot;代码实现&quot;&gt;&lt;a href=&quot;#代码实现&quot; class=&quot;headerlink&quot; title=&quot;代码实现&quot;&gt;&lt;/a&gt;代码实现&lt;/h5&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;List&amp;lt;String&amp;gt; list=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;&amp;gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
      <category term="ArrayList" scheme="https://mjava.top/tags/ArrayList/"/>
    
      <category term="源码解析" scheme="https://mjava.top/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>【图】用图片告诉你Java中的位运算</title>
    <link href="https://mjava.top/java/java-base-wei/"/>
    <id>https://mjava.top/java/java-base-wei/</id>
    <published>2019-12-30T14:17:30.000Z</published>
    <updated>2019-12-31T07:33:55.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191230221924.jpg" alt></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p><p>讲位操作之前,就必须要知道<font color="orange">原码、反码、补码</font></p><blockquote><p>其中正数的<font color="orange">原码=反码=补码</font></p></blockquote><h2 id="原码、反码、补码"><a href="#原码、反码、补码" class="headerlink" title="原码、反码、补码"></a>原码、反码、补码</h2><a id="more"></a><blockquote><p>在机器的内存中,一个负数的表示是<font color="orange">这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p></blockquote><p>比如说-9在内存中的二进制码,这里用8位表示:</p><p><img src="http://cdn.mjava.top/20191230212102.png" alt></p><p>最后<font color="orange">-9在内存中的二进制值为11110111</font></p><blockquote><p>在二进制中,最高位为符号位,<font color="red">0代表正,1代表负</font></p></blockquote><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="左移和右移"><a href="#左移和右移" class="headerlink" title="左移和右移"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color="orange">4字节</font>,一个字节有<font color="orange">8位</font>,所以这边用32位表示一个数</p><h4 id="负数的左移和右移"><a href="#负数的左移和右移" class="headerlink" title="负数的左移和右移"></a>负数的左移和右移</h4><blockquote><p><font color="orange">这边负数表示是在内存中表示的二进制值</font></p><p>右移时:最高位<font color="orange">补符号位1</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212836.png" alt></p><h4 id="正数的左移和右移"><a href="#正数的左移和右移" class="headerlink" title="正数的左移和右移"></a>正数的左移和右移</h4><blockquote><p>右移时:最高位<font color="orange">补符号位0</font></p><p>左移时:末尾补0</p></blockquote><p><img src="http://cdn.mjava.top/20191230212951.png" alt></p><h3 id="无符号右移"><a href="#无符号右移" class="headerlink" title="无符号右移"></a>无符号右移</h3><blockquote><p>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></p></blockquote><p><img src="http://cdn.mjava.top/20191230213359.png" alt></p><h3 id="amp-位与"><a href="#amp-位与" class="headerlink" title="&amp;(位与)"></a>&amp;(位与)</h3><blockquote><p>当相对应的位都为1时,等于1,否则等于0</p></blockquote><p>为了方便表示,接下来全部都用8位表示一个数</p><p><img src="http://cdn.mjava.top/20191230215214.png" alt></p><h3 id="位或"><a href="#位或" class="headerlink" title="|(位或)"></a>|(位或)</h3><blockquote><p>当相对应的位有一个为1时,等于1,否则等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230215609.png" alt></p><h3 id="异或"><a href="#异或" class="headerlink" title="^(异或)"></a>^(异或)</h3><blockquote><p>当相对应的位不同时,等于1,相同时等于0</p></blockquote><p><img src="http://cdn.mjava.top/20191230220948.png" alt></p><h3 id="取反"><a href="#取反" class="headerlink" title="~(取反)"></a>~(取反)</h3><blockquote><p>1等于0,0等于1</p></blockquote><p><img src="http://cdn.mjava.top/20191230220449.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><table><thead><tr><th>含义</th><th>运算符</th><th>说明</th></tr></thead><tbody><tr><td>左移</td><td>&lt;&lt;</td><td>末尾补0</td></tr><tr><td>右移</td><td>&gt;&gt;</td><td>负数:最高位<font color="orange">补符号位1</font>      正数:最高位<font color="orange">补符号位0</font></td></tr><tr><td>无符号右移</td><td>&gt;&gt;&gt;</td><td>无论是正数还是负数,右移<font color="orange">最高位一律补0</font></td></tr><tr><td>&amp;(位与)</td><td>&amp;</td><td>当相对应的位都为1时,等于1,否则等于0</td></tr><tr><td>|(位或)</td><td>|</td><td>当相对应的位有一个为1时,等于1,否则等于0</td></tr><tr><td>^(异或)</td><td>^</td><td>当相对应的位 不同时,等于1  相同时,等于0</td></tr><tr><td>~(取反)</td><td>~</td><td>1等于0,0等于1</td></tr></tbody></table><blockquote><p>最后有个小技巧,<font color="orange">向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p></blockquote><p>$$<br>9向左移n位=9*2^n<br>$$</p><blockquote><p><font color="orange">向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p></blockquote><p>$$<br>9向右移n位=⌊9/2^n⌋<br>$$</p><p><font color="red">注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href="https://www.shuxuele.com/sets/function-floor-ceiling.html" rel="noopener" target="_blank">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191230221924.jpg&quot; alt&gt;&lt;/p&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;&lt;/p&gt;&lt;p&gt;讲位操作之前,就必须要知道&lt;font color=&quot;orange&quot;&gt;原码、反码、补码&lt;/font&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;其中正数的&lt;font color=&quot;orange&quot;&gt;原码=反码=补码&lt;/font&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;原码、反码、补码&quot;&gt;&lt;a href=&quot;#原码、反码、补码&quot; class=&quot;headerlink&quot; title=&quot;原码、反码、补码&quot;&gt;&lt;/a&gt;原码、反码、补码&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://mjava.top/categories/Java/"/>
    
    
      <category term="Java" scheme="https://mjava.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之建造者模式【用好玩的故事讲清楚设计模式】</title>
    <link href="https://mjava.top/gof/gof-builder/"/>
    <id>https://mjava.top/gof/gof-builder/</id>
    <published>2019-12-26T22:50:31.000Z</published>
    <updated>2019-12-26T22:52:41.788Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://cdn.mjava.top/20191226220204.jpg" alt></p><blockquote><p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p><p>所有源代码都在这:<a href="https://github.com/z573419235/GofDemo" rel="noopener" target="_blank">https://github.com/z573419235/GofDemo</a></p><p>各位大佬记得点个星星哦</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color="orange">当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color="orange">部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p><a id="more"></a><p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p><h2 id="土豪朋友开车厂"><a href="#土豪朋友开车厂" class="headerlink" title="土豪朋友开车厂"></a>土豪朋友开车厂</h2><p>​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.</p><p><img src="http://cdn.mjava.top/20191226171943.jpg" alt></p><p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车 产品类 定义汽车的构成</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方向盘</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String steering;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String engine;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">private</span> String tire;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 展示一下汽车配置</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"&#123;"</span> +</span><br><span class="line">                <span class="string">"steering='"</span> + steering + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", engine='"</span> + engine + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", frame='"</span> + frame + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tire='"</span> + tire + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p><p><img src="http://cdn.mjava.top/20191226172548.jpg" alt></p><p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color="orange">一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p><p>他给我介绍了一下他的两个专家:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 宝马车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BMWBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"宝马的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"宝马的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"宝马的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"宝马的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 奔驰车建造者</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setEngine(<span class="string">"奔驰的发动机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setSteering(<span class="string">"奔驰的方向盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setFrame(<span class="string">"奔驰的车架"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        car.setTire(<span class="string">"奔驰的轮胎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="orange">他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象建造者 定义造车的方法</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractBuild</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造的产品是车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="keyword">protected</span> Car car=<span class="keyword">new</span> Car();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造发动机</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildEngine</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildSteering</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造车架</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildFrame</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 造轮胎</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">buildTire</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 得到造好的车</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Boss</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">builderCar</span><span class="params">(AbstractBuild build)</span></span>&#123;</span><br><span class="line">        build.buildEngine();</span><br><span class="line">        build.buildFrame();</span><br><span class="line">        build.buildSteering();</span><br><span class="line">        build.buildTire();</span><br><span class="line">        <span class="keyword">return</span> build.getCar();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p><p><img src="http://cdn.mjava.top/20191226174032.gif" alt></p><p>说完,还向我展示了汽车是怎样造成的………..</p><p><img src="http://cdn.mjava.top/20191226174235.png" alt></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实建造者模式和<font color="orange">工厂模式</font>还是挺像的,<font color="orange">建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color="orange">控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p><blockquote><p>建造者模式如果和<font color="orange">模板方法模式</font>搭配起来,<font color="orange">建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://cdn.mjava.top/20191226220204.jpg&quot; alt&gt;&lt;/p&gt;&lt;blockquote&gt;
&lt;p&gt;积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬&lt;/p&gt;
&lt;p&gt;所有源代码都在这:&lt;a href=&quot;https://github.com/z573419235/GofDemo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/z573419235/GofDemo&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;各位大佬记得点个星星哦&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;建造者模式用于实例化一个比较复杂的实体类,&lt;font color=&quot;orange&quot;&gt;当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程&lt;/font&gt;;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,&lt;font color=&quot;orange&quot;&gt;部件虽然不同,但是造车的方式基本都是差不多的步骤&lt;/font&gt;,这时候就可以用建造者模式来造一辆车了;&lt;/p&gt;
    
    </summary>
    
    
      <category term="GOF" scheme="https://mjava.top/categories/GOF/"/>
    
    
      <category term="设计模式" scheme="https://mjava.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="https://mjava.top/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
