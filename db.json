{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","path":"baidu-verify-9BFFE2B7F8.txt","modified":1,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/nrmuse.png","path":"images/nrmuse.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate.png","path":"images/vuecreate.png","modified":1,"renderable":0},{"_id":"source/images/nrmls.png","path":"images/nrmls.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate2.png","path":"images/vuecreate2.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate3.png","path":"images/vuecreate3.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_16_16_7-3.svg","path":"images/logo_16_16_7-3.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_256_256_116-7.svg","path":"images/logo_256_256_116-7.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_16_16_7-3.png","path":"images/logo_16_16_7-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_32_32_14-6.png","path":"images/logo_32_32_14-6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_32_32_14-6.svg","path":"images/logo_32_32_14-6.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_180_180_82.svg","path":"images/logo_180_180_82.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_512_512_233-5.svg","path":"images/logo_512_512_233-5.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_bak.svg","path":"images/logo_bak.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1}],"Cache":[{"_id":"source/ea667b0f708cd4ded0b79ebbdd99373a.html","hash":"8285746bede8562c1bc26a88041d01ca82127d20","modified":1573745067447},{"_id":"source/google3412bb4ed05ed7b3.html","hash":"764f986c687c9e72dde57885f0122fb31022ad55","modified":1603438448097},{"_id":"source/404.md","hash":"9e6f55d7c01343e1ffd36d55860587fd269d6cb6","modified":1565538056161},{"_id":"source/CNAME","hash":"6ac1a441d26185b407703ab9ffa5959860e49773","modified":1567499036664},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","hash":"50cc3c23409426c3e28cf8800423ecda502f1eb8","modified":1573740556097},{"_id":"source/root.txt","hash":"51c99f66271aedfff930264c82fdbe9b4d05b67e","modified":1574392658514},{"_id":"source/robots.txt","hash":"c18cc8be26a5c74b1c2f6ee7775647c07197ab67","modified":1573792794334},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1573713420554},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1573713420554},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1573713420554},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1573713420554},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1573713420554},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1573713420554},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1573713420554},{"_id":"themes/next/README.md","hash":"a0430372844df9caea6e9bf96492775ed42a4578","modified":1573713420554},{"_id":"themes/next/package.json","hash":"b7fd0a53c7cb4c40c6f236065bfed34e6188e786","modified":1573713420562},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1573713420554},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1573713420558},{"_id":"themes/next/_config.yml","hash":"5fd199417dafe5ffb9c33788e3e8c4b57f1524f1","modified":1588909773556},{"_id":"source/_data/friends.json","hash":"855ca7e4e0c1c862e50b76ecfb4184cc39df46fe","modified":1572424650083},{"_id":"source/_data/musics.json","hash":"b7b2bea12131e17849a781cf379ce62776513270","modified":1572424606783},{"_id":"source/about/index.md","hash":"6ac84d6e965e43adf038c725696b0d092e1c539a","modified":1565538056161},{"_id":"source/_data/url.yml","hash":"130b11df7a8a42f800e103e994c948f2130785e3","modified":1567670838571},{"_id":"source/categories/index.md","hash":"5c03e8bf8ebfd90090c540be943e1433aadb685a","modified":1574332247873},{"_id":"source/friends/index.md","hash":"75fb0e0cea8341302f9dd72c6cdab156ead139d3","modified":1565538056161},{"_id":"source/images/nrmuse.png","hash":"c7bc96979ddcd9e1c9b7de09d98f510b76c89940","modified":1567670142956},{"_id":"source/images/vuecreate.png","hash":"f85fb6b87192b4bb5521c29a3e1932888c18609b","modified":1567668935851},{"_id":"source/images/nrmls.png","hash":"4b5016f2b844e38a61bd1fb44cc6dd7c44be123e","modified":1567670007657},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573713420538},{"_id":"source/tags/index.md","hash":"0f067daff94309177dc8d71f9ecbf4a7c8d616e8","modified":1574332230853},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1573713420538},{"_id":"themes/next/.git/FETCH_HEAD","hash":"de4c539ec0b20b7915d6a9382d61549b0bb1bfe3","modified":1588909530066},{"_id":"themes/next/.git/index","hash":"ef18359c5efb08f2cd95a07e584df4f79c8cc22b","modified":1576042940086},{"_id":"themes/next/.git/packed-refs","hash":"e80cae5e36d800818aa2643d241c009f8cae362c","modified":1573713420534},{"_id":"source/images/vuecreate2.png","hash":"b270c1135532825f1be47c229fa78eb14bcfa499","modified":1567669323828},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1573713408142},{"_id":"themes/next/.git/ORIG_HEAD","hash":"e2c4f0f617e999a7e88046088cad6d575de491fc","modified":1588909530082},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"838201a0284e90843cd8e762e290c9bd7f10e993","modified":1573713420554},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1573713420554},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1573713420554},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1573713420554},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1573713420554},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1573713420554},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1573713420554},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1573713420554},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1573713420554},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1573713420554},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1573713420554},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1573713420554},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1573713420554},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1573713420558},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1573713420558},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1573713420558},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1573713420558},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1573713420558},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1573713420558},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1573713420558},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1573713420558},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1573713420558},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1573713420558},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1573713420558},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1573713420558},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1573713420554},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1573713420558},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1573713420558},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1573713420558},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1573713420558},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1573713420558},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1573713420558},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1573713420558},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1573713420558},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1573713420558},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1573713420558},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1573713420558},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1573713420558},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1573713420558},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1573713420558},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1573713420558},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1573713420558},{"_id":"themes/next/layout/archive.swig","hash":"59155648f6306888077d1f1d635f63177b36148d","modified":1573713420562},{"_id":"themes/next/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1573713420558},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1573713420562},{"_id":"themes/next/layout/index.swig","hash":"92822212a07206bf8832c0b405d18810ae0949c9","modified":1573786340342},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1573713420562},{"_id":"themes/next/layout/post.swig","hash":"a98d603684f2ab4591da8518d3d911b0b0ca25d2","modified":1573787024986},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1573713420562},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1574330338377},{"_id":"source/images/vuecreate3.png","hash":"18ad1a8dba3920753ec8b0441cbc057b99cade1f","modified":1567669445975},{"_id":"source/_posts/algorithm/algorithm-recursive-01.md","hash":"2b286fda02c79701d7218bd33293bc7ba9c4b84e","modified":1575714760434},{"_id":"source/_posts/algorithm/array-vs-linked.md","hash":"1102bc9e9cd78edff77fa5f612603f7d62e992a2","modified":1576648344538},{"_id":"source/_posts/algorithm/algorithm-avltree-01.md","hash":"48620687d6d75e5070fbfcd139325fe078472d3e","modified":1580786647080},{"_id":"source/_posts/docker/docker-mysql.md","hash":"d0b3d7e1c847fa4a8728203feadb975b8802ed26","modified":1575714760434},{"_id":"source/_posts/docker/docker-transfer-pit.md","hash":"78e04b3538a80ce9af20bed0eecef83c508f59f9","modified":1576825547073},{"_id":"source/_posts/gof/gof-abstract-factory.md","hash":"87b48eef4490fd5c5dbee34f9651624531aa124a","modified":1576503142120},{"_id":"source/_posts/gof/gof-builder.md","hash":"760b4b626b4bfab7be07963a6d3155769b282f50","modified":1577400761788},{"_id":"source/_posts/gof/gof-factory-method.md","hash":"1367794e7558fd6bf1ed5750a3ae21c8bba801d7","modified":1576405408609},{"_id":"source/_posts/gof/gof-taemplate-method.md","hash":"d4ff1127b447bb0eea5fa0ebcd2fa7b004eb16e4","modified":1576805934340},{"_id":"source/_posts/gof/gof-oop-7-all.md","hash":"7a5e5066b37cc65bfa44b32a95d5be7f6bdd9e0e","modified":1576377977186},{"_id":"source/_posts/gof/gof-singleton.md","hash":"30cddcd0bdf124aead85342e868072024f99b3d4","modified":1576405501060},{"_id":"source/_posts/gof/gof-prototype.md","hash":"f2a9837a51ef94933cd63e25c6e4488c8008838d","modified":1577321054868},{"_id":"source/_posts/jenkins/build-jenkins-ci-cd.md","hash":"eb111fa32374e4a542b4d0a06f6c78332524255b","modified":1575714760434},{"_id":"source/_posts/jenkins/build-jenkins-docker.md","hash":"90e805bcf5bdba885da4824112145d3de838df30","modified":1575714760434},{"_id":"source/_posts/jenkins/build-jenkins-mavne.md","hash":"c0b09c7ccc1b363989357c3bdfd031e544a2e0d0","modified":1575714760434},{"_id":"source/_posts/jenkins/build-jenkins-sonarqube.md","hash":"f37b7caa11ba4265dcfeab4263132b18f1d6b994","modified":1576226595999},{"_id":"source/_posts/jenkins/problem-jenkins-01.md","hash":"5eb6cf6e419ee52b76ee5b703de4ed9ebb2654bb","modified":1575714760434},{"_id":"source/_posts/java/java-8-stream-method.md","hash":"936349a4acbeb50c1dc2c8040a94abd75f77249c","modified":1575943005635},{"_id":"source/_posts/jenkins/problem-jenkins-02.md","hash":"94bc6c81cf6e16d618afa674ec99abf266c6c73e","modified":1575714760434},{"_id":"source/_posts/java/java-array-init.md","hash":"85995b4a0a9f03679016e42477d168982857ca74","modified":1575859465415},{"_id":"source/_posts/java/java-arraylist-source-1.md","hash":"19d0ba0b743a177ff244627e6c46ab0fdad036bb","modified":1578050655667},{"_id":"source/_posts/java/java-base-data-pack.md","hash":"afdd3d3fcebead8cdb8ec7e39fb7002194899f4c","modified":1600240198425},{"_id":"source/_posts/java/java-base-wei.md","hash":"d1d9ee1e211d73b63e29260ef9146b570a20e254","modified":1577777635103},{"_id":"source/_posts/java/java-isnull-four.md","hash":"b3393fcb504a687fb782728ec0723256ac1ba115","modified":1575714760434},{"_id":"source/_posts/java/java-equals.md","hash":"6a3f4d08afb15480038263aa8624369f2596bd3b","modified":1575714760434},{"_id":"source/_posts/java/jdkproxy-cglib.md","hash":"886e419f0ac2588859a104d4b527e4a3cda0bbf5","modified":1600240226665},{"_id":"source/_posts/java/nacos-post-error.md","hash":"fac1d611ab4471ad417450457868bac7fb1a4098","modified":1573746823558},{"_id":"source/_posts/java/problem-java-base64.md","hash":"423d236fa289c5bd0f1f9a185c6a6a10cff941ef","modified":1573716813765},{"_id":"source/_posts/java/mdc-test.md","hash":"9ab339b4c3f949492db4e57366b2097d7bb6b374","modified":1600240293870},{"_id":"source/_posts/linux/build-docker-pi.md","hash":"f7bd3e6cf1b94a922c350abe8c0224f0893f6c05","modified":1573716878183},{"_id":"source/_posts/linux/linux-fastdfs-install.md","hash":"daace46c24bbbaec5bc8b94dd80dc4a0ee20b7fc","modified":1588836572971},{"_id":"source/_posts/linux/problem-jdk-timezone.md","hash":"3170b50dea6e6c832306747b81885c2ae921832d","modified":1573715696331},{"_id":"source/_posts/mysql/mysql-update-driver-connector-8.md","hash":"1719dcaa6795575545c096178b92a7b31ca3d65a","modified":1577264924979},{"_id":"source/_posts/mysql/mysql-utf8mb4-error.md","hash":"55f1a794f1044c147585a9a06d459b1a7a607f21","modified":1588151916500},{"_id":"source/_posts/rocketmq/rocketmq-cluster-build.md","hash":"5d992b8e9bb016fd09bdf811cbe81fa70b39b635","modified":1575714760434},{"_id":"source/_posts/recommend/git-commend-note.md","hash":"ec644b774eaa829a8b06d9af3f4c1e622d65ec38","modified":1600240643786},{"_id":"source/_posts/vue/vue-cli3-11-problem.md","hash":"6c4f20413d88487d55371da3e119a0d938d08bec","modified":1573738717918},{"_id":"source/_posts/spring/apring-aop-ann.md","hash":"0f3b2f35cee9918a7a1247cd3577e9ee7dbb3013","modified":1592814348845},{"_id":"source/_posts/spring/fegin-resttemplate-addheard.md","hash":"3d05ce1296dcff27e37b177e35032868e168a16a","modified":1600240576005},{"_id":"source/_posts/spring/spring-boot-resttemplate-example.md","hash":"fbfb25931165c3596f31806bbe4dd78337d214df","modified":1575714760434},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1573713408146},{"_id":"source/_posts/recommend/recommend-tool-1.md","hash":"729a616d8609112ed8da3be1ff67adfa91763b05","modified":1579138379820},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1573713408146},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1573713408146},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1573713408146},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1573713408142},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1573713408146},{"_id":"themes/next/.git/logs/HEAD","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1573713408146},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a0601577b77b8ad89742dc99f98edebf9cc45c10","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"35a9e1469962a9a163abd0b83677a412516272ef","modified":1573713420554},{"_id":"source/_posts/tool/git-tool-command.md","hash":"b4b933910731ed3b7f4900e01b896adfa33c2205","modified":1592814495899},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1573713420558},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1573713420558},{"_id":"themes/next/docs/ru/README.md","hash":"7302b2e5318c0c13e6484aa6487be29599ebc2b2","modified":1573713420558},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"3ef324cee2761da762eaa5d8d9b9f9601dc264bc","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1766bd2e528ec148d3c5dd55e6be55449fcda94e","modified":1573713420558},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1573713420558},{"_id":"themes/next/layout/_macro/post.swig","hash":"73659d188030dbc0e0efb939118dc08b46dd430d","modified":1573713420558},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1573713420558},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1573713420558},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1573713420562},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1573713420562},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1573713420562},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1573713420562},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1573713420562},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1573713420562},{"_id":"themes/next/scripts/helpers/engine.js","hash":"b357cbc5d5b39b1bb5221149e7d358135a7ba56d","modified":1573713420562},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1573713420562},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"e60e6c0aaa979d42b01685ba2a03a76fa6e059e2","modified":1573713420562},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1573713420562},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1573713420562},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1573713420558},{"_id":"themes/next/layout/_partials/footer.swig","hash":"121babde9356c5bbe11d463593f1c057bec2f147","modified":1580739803895},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1573713420558},{"_id":"themes/next/scripts/events/index.js","hash":"ac2945693791e62a3046248f2a511afadcaebc16","modified":1573713420562},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1573713420558},{"_id":"themes/next/scripts/filters/locals.js","hash":"2601d05d44ad2b59370477cb8f61dd95898a1a9c","modified":1573713420562},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1573713420562},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1573713420562},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1573713420562},{"_id":"themes/next/scripts/filters/post.js","hash":"3c1e483c2c4a1c5a2f9a99b81ce0fda5fd21926b","modified":1573713420562},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1573713420562},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1573713420562},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1573713420562},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1573713420562},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1573713420562},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1573713420562},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8f86694a57d30685c4ced381f1ed09e8114dbb6e","modified":1573713420562},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1573713420562},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1573713420562},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1573713420562},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1573713420566},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1573713420566},{"_id":"themes/next/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1573713420566},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1573713420566},{"_id":"themes/next/source/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1573713420566},{"_id":"themes/next/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1573713420566},{"_id":"themes/next/source/js/utils.js","hash":"a2984bf0631756a904cd43f8e3a8f6fb15b9ceb5","modified":1573713420566},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573713420566},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573713420566},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1573713420566},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573713420566},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573713420566},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573713420566},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573713420566},{"_id":"themes/next/source/images/logo_16_16_7-3.svg","hash":"cc1ff6e3dd1a82b703ed71a084de10a46e29edcf","modified":1574325685207},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573713420566},{"_id":"themes/next/source/images/logo_256_256_116-7.svg","hash":"e5dc902cd8f7e2b89aefb9579978aa998fc083fd","modified":1574325887642},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573713420566},{"_id":"themes/next/source/images/logo_16_16_7-3.png","hash":"1aba4261552797bf81a44ebfaf3a17eb93e887ca","modified":1574326889819},{"_id":"themes/next/source/images/logo_32_32_14-6.png","hash":"85e3d17c0b5731ba32d1059c0cb77aeb2c31a26d","modified":1574326929516},{"_id":"themes/next/source/images/logo_32_32_14-6.svg","hash":"356c9c77914260098e02fee9887fcd1802fe419b","modified":1574325790152},{"_id":"themes/next/source/images/logo_180_180_82.svg","hash":"6143c45a71228aec5c8907a6a9da4206165ffcd2","modified":1574326366061},{"_id":"themes/next/source/images/logo_512_512_233-5.svg","hash":"9708ed7eb3f9960f0c7b718a64286e15cc307415","modified":1574325981887},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573713420566},{"_id":"source/_posts/java/java-arraydeque-source-1.md","hash":"1d22582e8dd47601fe96375bdaf293bf2297245d","modified":1578557656745},{"_id":"themes/next/source/images/logo_bak.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1573713420566},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573713420566},{"_id":"source/_posts/java/java-linkedlist-source-1.md","hash":"9e604d119ee025b0b46b2d58e5ddadf31b08dcb7","modified":1578557904464},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573713420566},{"_id":"source/_posts/archive/web-security/oauth-and-jwt.md","hash":"b7dd2c5a28a9aeff4dc15629407f8f59f357fac1","modified":1600240390375},{"_id":"source/_posts/archive/web-security/sso-and-cas.md","hash":"8f932d84dd73e1f32be32d91db78b5941015bec7","modified":1589455761654},{"_id":"source/_posts/archive/web-security/spring-security-oauth-server-demo.md","hash":"ec1d9bbae88c707906aa2926a65967016bc23d9f","modified":1600240377335},{"_id":"source/_posts/java/jvm/java-class-init.md","hash":"77d5b6b3f049da10d8f95bbee36a79ec5b666ba7","modified":1600239826641},{"_id":"source/_posts/java/jvm/java-class-load-1.md","hash":"2dd13e5e51fd9c3a2f6e8109ab247179ba6228f1","modified":1600239813377},{"_id":"source/_posts/java/jvm/java-jvm-stack-1.md","hash":"6ba3cbf60689af7b31c20070d695036e50a1e4c1","modified":1600240007327},{"_id":"source/_posts/java/jvm/jvm-gc-alg.md","hash":"a87f611afdc9bd82b1cee108f4837bf8560181ec","modified":1590719647798},{"_id":"source/_posts/java/jvm/java-class-load-2.md","hash":"dfa4dd6b6b2636ab8a9a7a57fbd8e53c6f234098","modified":1600239900922},{"_id":"source/_posts/java/jvm/jvm-javastack-EscapeAnalysis.md","hash":"7f43219d4f898a991be24b1f4fe319b406ee7069","modified":1590480340964},{"_id":"source/_posts/java/jvm/jvm-object-four-quote.md","hash":"3e7fd831ab9eec00a2699420bae6ee603cc30774","modified":1590719849280},{"_id":"source/_posts/java/jvm/jvm-object-is-alive.md","hash":"08f890ecd4ac52fc80168f44963b1531f039af55","modified":1590718886351},{"_id":"themes/next/.git/objects/pack/pack-35137d689491f4c8d46aae0acc32569bd86fbc13.idx","hash":"ea965694b83ba24c5d9f6730e33749c547ea9fb4","modified":1580737995306},{"_id":"themes/next/.git/objects/pack/pack-6352177680c274272fcbdd02075364b7dac1e354.idx","hash":"7a102a7c98c2d73363daa04ce0b8e8847b9da25a","modified":1588909530050},{"_id":"source/_posts/java/jvm/jvm-running-data-area.md","hash":"0baf10d9701756b375e3b49e9fc7e3001a08cbad","modified":1590482191663},{"_id":"source/_posts/java/thread/create-thread-3.md","hash":"ed63e4997aa618e8444947ea92221c1e59db9feb","modified":1592814617581},{"_id":"themes/next/.git/refs/heads/master","hash":"e2c4f0f617e999a7e88046088cad6d575de491fc","modified":1573713420538},{"_id":"themes/next/.git/refs/tags/v7.6.0","hash":"48b43ab84fc77e4de9217c6f781177781d29fa31","modified":1580737995358},{"_id":"themes/next/.git/refs/tags/v7.7.0","hash":"b36294c4a5df9cb1df8e582752dee5d4821aad00","modified":1580737995362},{"_id":"themes/next/.git/refs/tags/v7.7.2","hash":"009d0ad4b1814ac22aec724d24d85c08030e174b","modified":1588909530066},{"_id":"themes/next/.git/refs/tags/v7.7.1","hash":"88c02f7029cb659858b0e0554b79fa64e9f64494","modified":1580737995362},{"_id":"themes/next/.git/refs/tags/v7.8.0","hash":"2a4c19ef63045d5f503b7e462250df801e8bf80d","modified":1588909530066},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1573713420562},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"246ff123cbaa507f23514c0c51c6cc006685898e","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"194201cce870c1af6f5123a62cb766cd24e46217","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1573713420562},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1573713420562},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1573713420562},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1573713420562},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"7f2941d119abca6627561fb010dad96fa48d2092","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1573713420562},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1573713420558},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0f4565e123e2ceccaff08316bc38151cda7fcbc4","modified":1573713420558},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1573713420558},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"becfa683c3e5409e20cdb7b1dc8a6db331bddefe","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1573713420558},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d4f94b643ac87d4d858cd8a6f70e030613f98b48","modified":1573713420558},{"_id":"themes/next/scripts/events/lib/config.js","hash":"246e55d48f2f3ef510c11594c7c08ddb93ac0928","modified":1573713420562},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d84b7606df9d52d3296bd98482ede39fad55d8c3","modified":1573713420562},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1573713420562},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1573713420558},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1573713420562},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1573713420558},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1573713420566},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e76e0e411c9892004e73e1bb7b3c1cca2191eedc","modified":1573713420566},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1573713420566},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1573713420566},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573713420570},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573713420570},{"_id":"themes/next/.git/refs/remotes/origin/cdn","hash":"23fdaf87369768022f24935266c99f594921ab3f","modified":1580737995338},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1573713420538},{"_id":"themes/next/.git/refs/remotes/origin/funding","hash":"d17cb32981a871894dc3c24c91d3c6346b60b3cb","modified":1580737995338},{"_id":"themes/next/.git/refs/remotes/origin/i18n","hash":"4117c696ba23fa14fc6a37d1e1cbddf4f569828b","modified":1588909530058},{"_id":"themes/next/.git/refs/remotes/origin/logo","hash":"e8ea5f7bd7e91d1805e56416bfe0fde4dc23eaee","modified":1588909530058},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"8df4d68e6c89f5df6e79d0c664e9003b2f945089","modified":1588909530054},{"_id":"themes/next/.git/refs/remotes/origin/next-config","hash":"27aab5b980657829997e7e3763af68c4eb5389a0","modified":1580737995338},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4341f0e057b42e8c47629bb3196fca3b49f0cc19","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"08c2679a31f195940fe1e6c76e64799fb21cda99","modified":1573713420566},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1573713420562},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1573713420566},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1573713420562},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2067e15799a3a3cda8bfe7782d67a4dc42f1ef79","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f3c5f1dadc01042381444102d35174dacc6f079a","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c59226767164285d6708d8762f937f93bab264ca","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573713420570},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.git/logs/refs/remotes/origin/i18n","hash":"315d9dfee80d70062c2ff3262bc8bdc39256de31","modified":1588909530058},{"_id":"themes/next/.git/logs/refs/remotes/origin/cdn","hash":"7c028f9f3bf3a285bd28ee13b3653b9189b7fcea","modified":1580737995338},{"_id":"themes/next/.git/logs/refs/remotes/origin/funding","hash":"5cfcc608afefbb58f9d78d9cdf260cc2c7e3b15a","modified":1580737995338},{"_id":"themes/next/.git/logs/refs/remotes/origin/next-config","hash":"20b8532c6579681a8e4da2b5c34d9a01c131a452","modified":1580737995338},{"_id":"themes/next/.git/logs/refs/remotes/origin/logo","hash":"3f5cc39d542e6d981283004645bc0d81d80bce11","modified":1588909530058},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"1010139ff6450f2ee106d843942941794d6c5b7c","modified":1588909530058},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"3566136c06d96b34e1e7a3eca72fb0f40a63af80","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f8ba308231cf81453e41457796e94f1ce886d855","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"13d6737e3e85c62626fa8467533a8bdcc2f55410","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"cc4beedb56c37246d9e0f74e4b2cc34231dabc65","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"2b536832cfc81667dadd9603c8c700e44d458261","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"4b980363822c24b3ad85c271719210a8ad2b646e","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"879f9cec9c88d65b2e31af4346b2bc0f6941f05d","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"068b304be305fbfd0220276d56b93cefd968f0b6","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"419fa6cfc103d08dfd6a385ab7f24468c644d581","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573713420570},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573713420570},{"_id":"themes/next/.git/objects/pack/pack-35137d689491f4c8d46aae0acc32569bd86fbc13.pack","hash":"92a8887bce1b2bc72f6d5c393f80b3751cba98b9","modified":1580737995250},{"_id":"themes/next/.git/objects/pack/pack-6a1c0dbbd040071fcc9bde9e78ce12bc59cd04ef.idx","hash":"2af6b92a3fca10e77b5982a927434049da1d4308","modified":1573713420518},{"_id":"themes/next/.git/objects/pack/pack-6352177680c274272fcbdd02075364b7dac1e354.pack","hash":"fdf16ec969ce8edd4d61a41a8d6ab86e17cafc4a","modified":1588909530046},{"_id":"themes/next/.git/objects/pack/pack-6a1c0dbbd040071fcc9bde9e78ce12bc59cd04ef.pack","hash":"dbd40786ba7ec55cfcab42d83811725b0dc01ea2","modified":1573713420514},{"_id":"public/baidusitemap.xml","hash":"2bb71a8a6d19fcc4de8bcc9cff25d559099b6842","modified":1603438558370},{"_id":"public/atom.xml","hash":"3a27240beb7b600921b17dffb489cb162029130e","modified":1603438558415},{"_id":"public/search.xml","hash":"f147c2f1d30b279748f4c0649d98d91876cfe332","modified":1603438558591},{"_id":"public/sitemap.xml","hash":"d60d1b44c7a9ac3c4f69e09f523467d78a27a460","modified":1603438558594},{"_id":"public/ea667b0f708cd4ded0b79ebbdd99373a.html","hash":"a579f51b54854b8288246a2461ec1950ac18f3af","modified":1603438558622},{"_id":"public/404.html","hash":"7b9d4dd2b43f72e63a60e88a2360067587d0c9ff","modified":1603438558622},{"_id":"public/google3412bb4ed05ed7b3.html","hash":"f5cc989024efea8f84ed031a49ec200590ed267c","modified":1603438558622},{"_id":"public/about/index.html","hash":"33e5345aa9d2247f04ac96dd4f72f3ecc8fdbad5","modified":1603438558623},{"_id":"public/categories/index.html","hash":"c5f65c4f0571a96663a0f759a640bf49d4e44c8d","modified":1603438558623},{"_id":"public/tags/index.html","hash":"8e7f79b83d4200afc40b0787d9a281e80992707a","modified":1603438558623},{"_id":"public/friends/index.html","hash":"c1f723c88ddfc8da7075e23c450c3dbebd8cb184","modified":1603438558623},{"_id":"public/java/java-8-stream-method/index.html","hash":"384dd6b14386841a3a580ca9d2b7df3059086c9e","modified":1603438558623},{"_id":"public/archives/page/6/index.html","hash":"e999c13b8aaea9ea36bf7e6ca8a4837287458060","modified":1603438558623},{"_id":"public/archives/2019/08/index.html","hash":"e132b81d0eb0f266ecbfd8322ba52006370e1855","modified":1603438558623},{"_id":"public/archives/2019/09/index.html","hash":"d1acce6f6b7b6c8849649fbf47af44288f19473b","modified":1603438558623},{"_id":"public/archives/2019/10/index.html","hash":"7d84491e4551dfdb9dfe364ef514ea75970a86bf","modified":1603438558623},{"_id":"public/archives/2019/11/index.html","hash":"1a3edf76a4c9efdba90efe1b676e8c4f319ae9c7","modified":1603438558623},{"_id":"public/archives/2019/12/page/2/index.html","hash":"23051f7c5eed642a88f940016d7f9516f96a7881","modified":1603438558623},{"_id":"public/archives/2020/page/3/index.html","hash":"0f28334a970fae8770163c5e732aca1ba55f00a9","modified":1603438558623},{"_id":"public/archives/2020/01/index.html","hash":"529f23e01f1a2285fee9f6b1bb8265240fbdb790","modified":1603438558623},{"_id":"public/archives/2020/02/index.html","hash":"17fbbcd9a6167134b11170f0e9c2f1f6a40a1c5d","modified":1603438558623},{"_id":"public/archives/2020/04/index.html","hash":"2a2966c09737053b365777d71ee4d841f28e4923","modified":1603438558623},{"_id":"public/archives/2020/05/index.html","hash":"317e0c60c60ec4937cdc69222ced70e5b3f3bd19","modified":1603438558623},{"_id":"public/archives/2020/06/index.html","hash":"ed02a386999435c4d32f0fad35d61c87be2b7b93","modified":1603438558623},{"_id":"public/archives/2020/09/index.html","hash":"9d732dc4b899ec18fd6fdb736950327b667b2852","modified":1603438558623},{"_id":"public/categories/Algorithm/index.html","hash":"a02aa9d1f7ea88c71d3e66f6e79fd9a1cb1ace52","modified":1603438558623},{"_id":"public/categories/Docker/index.html","hash":"c64b14342ee905a4360c2070c715b12da809a832","modified":1603438558623},{"_id":"public/categories/GOF/index.html","hash":"a05c88e111b9a42970c2ee781d69348041c0008d","modified":1603438558623},{"_id":"public/categories/Jenkins/index.html","hash":"0372f6b596a59dcc7efea39f59043c4d4ec8afd9","modified":1603438558623},{"_id":"public/categories/Java/page/2/index.html","hash":"10eb7421cf35740dcfc7a4e4407f4284e605bf98","modified":1603438558623},{"_id":"public/categories/Linux/index.html","hash":"420c7034d6edb35c1025cb8a5076dccb14d69a92","modified":1603438558623},{"_id":"public/categories/MySQL/index.html","hash":"e20d09a5ceeb0a4ec40da48d63612efafb93ccbb","modified":1603438558623},{"_id":"public/categories/RocketMq/index.html","hash":"0f6ef509a477923da8b5038cf4c8c35edc262962","modified":1603438558624},{"_id":"public/categories/Vue/index.html","hash":"7e5611084c2b245669ea23c2327733259d722683","modified":1603438558624},{"_id":"public/categories/Spring/index.html","hash":"f91056420ef4cbef437e5ddf4318aec8f7196673","modified":1603438558624},{"_id":"public/categories/Recommend/index.html","hash":"0c50142cfe191b20eca9a39727bc89bcff9df1f8","modified":1603438558624},{"_id":"public/categories/Tool/index.html","hash":"67951c6110e6ca42301eb047d0f35df6b0da0bdf","modified":1603438558624},{"_id":"public/categories/WebSecurity/index.html","hash":"cd2733b3c9ed547dd054922022b793f3122cb8ab","modified":1603438558624},{"_id":"public/categories/JVM/index.html","hash":"b0a74b467ba400739c4afdea59a5b107b27000aa","modified":1603438558624},{"_id":"public/categories/JVM/JAVA/index.html","hash":"034845730e74324b52c98b963f5bf6ab52b80a57","modified":1603438558624},{"_id":"public/categories/JAVA/index.html","hash":"1ac91a2dbddfadccd5307d292040da6c33e9e1a8","modified":1603438558624},{"_id":"public/tags/数据结构/index.html","hash":"350c0720308a49b14ca722a8b48d53e220cf46ac","modified":1603438558624},{"_id":"public/tags/Java/page/2/index.html","hash":"da1191a65072c155fdddf38138c3d4731e5de13c","modified":1603438558624},{"_id":"public/tags/Recursive/index.html","hash":"49a34cfcc41567354e54780a89ed2294726fb762","modified":1603438558624},{"_id":"public/tags/Algorithm/index.html","hash":"756ca11d6ec41b970aedc603a71ee027a21cf32a","modified":1603438558624},{"_id":"public/tags/Json/index.html","hash":"ff0ed5241d6f8ab50c3875d93c89118201afb4c9","modified":1603438558624},{"_id":"public/tags/AVL/index.html","hash":"f496049ecf9a8e2dfe5fe50c7fc852cabb6336de","modified":1603438558624},{"_id":"public/tags/平衡二叉树/index.html","hash":"4fbd3dfc8a0d60361db452291cbc63173fa9797b","modified":1603438558624},{"_id":"public/tags/二叉树/index.html","hash":"a957a3f03e90fc5883692828c0b27bb84441169d","modified":1603438558624},{"_id":"public/tags/Docker/index.html","hash":"6b1f9662ec1384d501ecc48c3dde15b8f8f60a85","modified":1603438558624},{"_id":"public/tags/Mysql/index.html","hash":"4d1da555972da378a595c1b646be80d53a7725f7","modified":1603438558624},{"_id":"public/tags/Linux/index.html","hash":"5e78471d9462bdb7d38fa96b5b5f34e12f7302c0","modified":1603438558624},{"_id":"public/tags/Pit/index.html","hash":"e941ef80d46a40f5e1882b78e0bc0ee617e01ea3","modified":1603438558624},{"_id":"public/tags/设计模式/index.html","hash":"e88973733eaf9af20ca348cc3e6d4a73c7857b3c","modified":1603438558624},{"_id":"public/tags/抽象工厂模式/index.html","hash":"ef4e470768c8a2252179c150aaded1913dd18535","modified":1603438558624},{"_id":"public/tags/建造者模式/index.html","hash":"58d0c5ace4ab4553cbd785d2aeea61106e40e8e7","modified":1603438558624},{"_id":"public/tags/工厂方法模式/index.html","hash":"d2c9d4dcd91971a0baf3e8057b9677474e0cf230","modified":1603438558625},{"_id":"public/tags/模板方法模式/index.html","hash":"005464ccb30792f6ef2e03340493540152ef3499","modified":1603438558625},{"_id":"public/tags/GOF/index.html","hash":"fe019c6aa4e50783e727df11e06c560258b996ee","modified":1603438558626},{"_id":"public/tags/OOP/index.html","hash":"1acdf716f7fe050735b28c367b30691ed60552a2","modified":1603438558626},{"_id":"public/tags/Singleton/index.html","hash":"69a2f8ba03220d9c10625133e1fbdd3ac435c36f","modified":1603438558626},{"_id":"public/tags/原型模式/index.html","hash":"9bdc624040592011f653700acdda0b7e407b2140","modified":1603438558626},{"_id":"public/tags/Jenkins/index.html","hash":"2a4cf9d2a0bc1c16d29765abfc44bd0b26d9ba53","modified":1603438558626},{"_id":"public/tags/SonarQube/index.html","hash":"744fc040aee1018a5386259654f8e970100a9e19","modified":1603438558626},{"_id":"public/tags/ArrayList/index.html","hash":"3b0981c0ab90549c079ef78992f37f70ee47534f","modified":1603438558626},{"_id":"public/tags/源码解析/index.html","hash":"92dcdd314bc520454e98483de80c7817c2d33339","modified":1603438558626},{"_id":"public/tags/Nacos/index.html","hash":"ebb8e2edde67e6cd7f726f5f6e694b4f7fb0ef36","modified":1603438558626},{"_id":"public/tags/Base64/index.html","hash":"a9a16b6e4fc1b636e96aa20126f34cc132d19dfa","modified":1603438558626},{"_id":"public/tags/Logback/index.html","hash":"eec8e84cb4db76a92fef6aec14bb19fe7cf54725","modified":1603438558626},{"_id":"public/tags/MDC/index.html","hash":"76ad552ddf006c3e7f63fc69dae01200666b81e0","modified":1603438558626},{"_id":"public/tags/RaspberryPi/index.html","hash":"3d1a0dd9fee1456bd14ab76bc1601d6d3e4a2618","modified":1603438558626},{"_id":"public/tags/fastDFS/index.html","hash":"cc3106f0863add8b6d1fb379c5e8dc903eff5d49","modified":1603438558626},{"_id":"public/tags/MySQL/index.html","hash":"3cc6ef66132aeca29a4d65c526d6a44c864721cc","modified":1603438558626},{"_id":"public/tags/RocketMQ/index.html","hash":"99f6da7c09e8aed0e49e53e0e2bbf49092e48be3","modified":1603438558626},{"_id":"public/tags/Vue/index.html","hash":"50044b1ca725bb861f72d652b72ab6cee40a900d","modified":1603438558626},{"_id":"public/tags/Git/index.html","hash":"fc6ef42fdccf18951b6f3afee2ea925922362cb6","modified":1603438558626},{"_id":"public/tags/Spring-AOP/index.html","hash":"71622c5a9b731bc831d4cb9ccbe137ccd0707724","modified":1603438558626},{"_id":"public/tags/注解/index.html","hash":"77e29ffece0031ddbb5e3c72d452e46643b7e625","modified":1603438558626},{"_id":"public/tags/Fegin/index.html","hash":"31bf02648ed93180dfb1ad0fccabf7017666bad7","modified":1603438558626},{"_id":"public/tags/Resttemplate/index.html","hash":"5cfb2ffc5c3727748b2b154a9ec9b6a8ff3792d6","modified":1603438558626},{"_id":"public/tags/UI/index.html","hash":"a9d074c530a9ade68f4e7064af500539171c7d78","modified":1603438558626},{"_id":"public/tags/推荐/index.html","hash":"2128ec4028b089a1fd1f5f47226774fcaf480ef0","modified":1603438558626},{"_id":"public/tags/SpringBoot/index.html","hash":"7f77db25ce5cc4fd384f79da275b92697236304d","modified":1603438558627},{"_id":"public/tags/源码分析/index.html","hash":"c8eccb4fb1b39889db5f93f1380f38556c12c8e4","modified":1603438558627},{"_id":"public/tags/LinkedList/index.html","hash":"0cba102831c0a57ba7050e7513636d2d82e04707","modified":1603438558627},{"_id":"public/tags/ArrayDeque/index.html","hash":"74ff7e5045ddee0aebef9db89efb31721fb12b08","modified":1603438558627},{"_id":"public/tags/SSO/index.html","hash":"1b5a96a66db441d1308c9476d78e4074655627af","modified":1603438558627},{"_id":"public/tags/CAS框架/index.html","hash":"62c477b4cc0be7af11b5abafbc2c047da8b402ef","modified":1603438558627},{"_id":"public/tags/OAuth2-0/index.html","hash":"c8ffa79b0c7484d74102c2431004b79e4ed4e330","modified":1603438558627},{"_id":"public/tags/JWT/index.html","hash":"0b96a3d2ea50a95826f03a26c21b88ac740c9500","modified":1603438558627},{"_id":"public/tags/OAuth/index.html","hash":"8a93ad208f5278721433ec0ac1a7fd12200ad9b1","modified":1603438558627},{"_id":"public/tags/spring-security/index.html","hash":"3fc15f3663415f10f54b5ef366f9ba25a1815c11","modified":1603438558627},{"_id":"public/tags/JVM/index.html","hash":"82c480d3f6818b82fc3bd81c1813671fa3da9abf","modified":1603438558627},{"_id":"public/tags/JAVA/index.html","hash":"5da9418290aad534c143ca898631f2b06f94210f","modified":1603438558627},{"_id":"public/tags/多线程/index.html","hash":"f81248e23c04a55b3d08f3147e800aeb9295b4eb","modified":1603438558627},{"_id":"public/recommend/git-commend-note/index.html","hash":"adcfe81e25acf7602b849d87da521c23e34fc6c3","modified":1603438558627},{"_id":"public/spring/fegin-resttemplate-addheard/index.html","hash":"ad9e8d03cb965a5bcfbe82c0142bc2ecad7e95bf","modified":1603438558627},{"_id":"public/java/mdc-test/index.html","hash":"b43ffc08d56d252d4041927e8414602fe6c47d3f","modified":1603438558627},{"_id":"public/java/jdkproxy-cglib/index.html","hash":"a16aa6bdc62ec141ea4f30dd1f65a66d483650c3","modified":1603438558627},{"_id":"public/java/java-base-data-pack/index.html","hash":"505b501af9cbc7807924bf8119c81a3fc3e08368","modified":1603438558627},{"_id":"public/java/jvm/java-jvm-stack-1/index.html","hash":"61e5fccf4f0b0a1b5db8c376845f0334f0174736","modified":1603438558627},{"_id":"public/java/jvm/java-class-load-2/index.html","hash":"d845d4d348e20b1d5e40fc09d6629c8b0b4d04e7","modified":1603438558627},{"_id":"public/java/jvm/java-class-load-1/index.html","hash":"8a5faf7b2f4d050d4e36ba493b2d0d0d288c9304","modified":1603438558628},{"_id":"public/java/jvm/java-class-init/index.html","hash":"17eaaa787d939b47e43660f5d8833d9b80865c30","modified":1603438558628},{"_id":"public/java/thread/create-thread-3/index.html","hash":"3416ccdf7ee0a539a30b3b50d19f3066ba904446","modified":1603438558628},{"_id":"public/tool/git-tool-command/index.html","hash":"8baba9255097e5bcb12ad22f44a9837ac95c291e","modified":1603438558628},{"_id":"public/spring/apring-aop-ann/index.html","hash":"7bb2ef927d53478414a78e617a506422723ab31f","modified":1603438558628},{"_id":"public/java/jvm/jvm-gc-alg/index.html","hash":"3ca68010e5f1412052cc2136642bfc5cab8a1dfc","modified":1603438558628},{"_id":"public/java/jvm/jvm-object-four-quote/index.html","hash":"4ac4703226283c3c8e78d695800b73672ee0c9e8","modified":1603438558628},{"_id":"public/java/jvm/jvm-object-is-alive/index.html","hash":"3e5f699039a461af6b0c03899e81d7a027e3e0c6","modified":1603438558628},{"_id":"public/java/jvm/jvm-running-data-area/index.html","hash":"278cd2a788fbdad479bd0f85df1a2fc536dee303","modified":1603438558628},{"_id":"public/java/jvm/jvm-javastack-EscapeAnalysis/index.html","hash":"e12ac5cd4f6c0dc00ab25cf2affe76e22ac8327e","modified":1603438558628},{"_id":"public/archive/web-security/spring-security-oauth-server-demo/index.html","hash":"dbe4f8a3f9c4931f17a23d661d26040628577e6e","modified":1603438558628},{"_id":"public/archive/web-security/sso-and-cas/index.html","hash":"6e31de6bed89a878dfba368ce4c23f43db8796c6","modified":1603438558628},{"_id":"public/archive/web-security/oauth-and-jwt/index.html","hash":"f3b3eb0f7e3a0bfe92268e150b3eb95cbe97a591","modified":1603438558628},{"_id":"public/linux/linux-fastdfs-install/index.html","hash":"365721c5109090dc530e839051ff7b250b8515e4","modified":1603438558628},{"_id":"public/mysql/mysql-utf8mb4-error/index.html","hash":"38acbefaa80faeafb22692d259e11260e05d4484","modified":1603438558628},{"_id":"public/algorithm/algorithm-avltree-01/index.html","hash":"e83b9796207b3986914fb0cd922a6ebe75c2f27f","modified":1603438558628},{"_id":"public/recommend/recommend-tool-1/index.html","hash":"2c8884f8a1f53ec97feaf96ea7a905fe15e517e0","modified":1603438558628},{"_id":"public/java/java-arraydeque-source-1/index.html","hash":"4ff252f5be7c8746de0110ac032179fe44964e71","modified":1603438558628},{"_id":"public/java/java-linkedlist-source-1/index.html","hash":"3abac8a880a9272fd37f71732d41cfad440c4c69","modified":1603438558628},{"_id":"public/java/java-arraylist-source-1/index.html","hash":"5ce46652f58927208788fa52a73d88c8fc7e3667","modified":1603438558628},{"_id":"public/java/java-base-wei/index.html","hash":"081373a69d502b02fffc69c2445f28ffe8dd09b0","modified":1603438558628},{"_id":"public/gof/gof-builder/index.html","hash":"6390ca2770419fa5e70056e840d92e38f43fbdf2","modified":1603438558628},{"_id":"public/gof/gof-prototype/index.html","hash":"080f42da690fa545ce90413a99d22de12b1843e9","modified":1603438558628},{"_id":"public/mysql/mysql-update-driver-connector-8/index.html","hash":"ea9c6630aef76cfddb1f24173bde7d392b5b287d","modified":1603438558628},{"_id":"public/docker/docker-transfer-pit/index.html","hash":"373a1316629089558a58df3369400b6fc7d6dddc","modified":1603438558628},{"_id":"public/gof/gof-taemplate-method/index.html","hash":"d6dc5a9decb8cf68d6e115fedd4c0431db46f9bf","modified":1603438558628},{"_id":"public/algorithm/array-vs-linked/index.html","hash":"001c391d32d8778dd0e6275e25e0079bf980fc67","modified":1603438558628},{"_id":"public/gof/gof-abstract-factory/index.html","hash":"f0b649e8686b8d9b11228fa80fa39a6cf86056a0","modified":1603438558629},{"_id":"public/gof/gof-factory-method/index.html","hash":"7f99517817198af2bba43fe2544cbe049eb4a3f4","modified":1603438558629},{"_id":"public/gof/gof-oop-7-all/index.html","hash":"4be0b8404790e323a5491893628ef96f694f8eff","modified":1603438558629},{"_id":"public/jenkins/build-jenkins-sonarqube/index.html","hash":"56a26769c77d74a37b6ae758a8103744c34e1f4e","modified":1603438558629},{"_id":"public/java/java-array-init/index.html","hash":"0abfcfb7b80865b3f51e12faa617a6543ed9de82","modified":1603438558629},{"_id":"public/spring/spring-boot-resttemplate-example/index.html","hash":"a3e3c7f6db9eb379d14d8af96e146b77b1a7a3f2","modified":1603438558629},{"_id":"public/java/nacos-post-error/index.html","hash":"8b4f7435fc560db44c3a4bb03e33e1ec5c04642b","modified":1603438558629},{"_id":"public/jenkins/problem-jenkins-01/index.html","hash":"4cafe1b838436c8205ae7e84013326b63454279d","modified":1603438558629},{"_id":"public/jenkins/build-jenkins-ci-cd/index.html","hash":"45086def14d3e3b616221910e15a4310954f46dc","modified":1603438558629},{"_id":"public/jenkins/build-jenkins-mavne/index.html","hash":"29f357054de8d169ce41834556d78a76bb9b5340","modified":1603438558629},{"_id":"public/jenkins/problem-jenkins-02/index.html","hash":"e445cfff2451c2381df3463e0c24fd274086a380","modified":1603438558629},{"_id":"public/jenkins/build-jenkins-docker/index.html","hash":"e5807450c99496c9bd098890f3b870224c0215e1","modified":1603438558629},{"_id":"public/gof/gof-singleton/index.html","hash":"d6106d66073bb473886c9c8a0c4f49694d531403","modified":1603438558629},{"_id":"public/rocketmq/rocketmq-cluster-build/index.html","hash":"ef85d13baf7e24bed5e69daa637edd0d7f62769d","modified":1603438558629},{"_id":"public/vue/vue-cli3-11-problem/index.html","hash":"8caa9c93a0ed984e585198ce8a9df7375347f878","modified":1603438558629},{"_id":"public/docker/docker-mysql/index.html","hash":"7e24fc613689122c97c8eb88dec1e5032f5f026e","modified":1603438558629},{"_id":"public/linux/build-docker-pi/index.html","hash":"f348487027e75076377d6d29129fa78f490e600b","modified":1603438558629},{"_id":"public/linux/problem-jdk-timezone/index.html","hash":"e4ee0bda6697db6fa198d6de51dd6e7cca110ced","modified":1603438558629},{"_id":"public/java/java-equals/index.html","hash":"35abd4d72dd20ddd44d53c7f0cad0736bed4b693","modified":1603438558629},{"_id":"public/java/java-isnull-four/index.html","hash":"4c69cf0d6550493473da070e8052f1a6038eaf21","modified":1603438558629},{"_id":"public/algorithm/algorithm-recursive-01/index.html","hash":"9bfb7598a0bde3cf2fea03d9eb37772a33045dfb","modified":1603438558629},{"_id":"public/java/problem-java-base64/index.html","hash":"84e8250131f62e05d6e65bb0808b30bea5c8d752","modified":1603438558629},{"_id":"public/archives/index.html","hash":"8426bd1fe87efab7da37e818be7ca26e92d8e3bc","modified":1603438558629},{"_id":"public/archives/page/2/index.html","hash":"d57de4c099ac2ba6e55092916e62824d4b53d575","modified":1603438558629},{"_id":"public/archives/page/3/index.html","hash":"6a1dccb5a2fc880d7aa815622c599bf2b1e205f0","modified":1603438558629},{"_id":"public/archives/page/4/index.html","hash":"01d3a2fca86ce9792a929fa3631165bd651a97b7","modified":1603438558629},{"_id":"public/archives/page/5/index.html","hash":"4a40d0aca5dd14ff312f71ac56624855d7e9349f","modified":1603438558629},{"_id":"public/archives/2019/index.html","hash":"47481e704c2d375e945d0a0340c3b0ad0a94ce31","modified":1603438558629},{"_id":"public/archives/2019/page/2/index.html","hash":"80a0140bee340fea061908c836d381732642a50a","modified":1603438558630},{"_id":"public/archives/2019/page/3/index.html","hash":"0aceb2ff66d0e2d542eba54522e6cde2187d32c5","modified":1603438558630},{"_id":"public/archives/2019/12/index.html","hash":"5e52019ea7e1bbc50ab86d3f6eca95eeece02737","modified":1603438558630},{"_id":"public/archives/2020/index.html","hash":"ffaa45ccf6516dd9b246e7a466bc168ad2f9c78a","modified":1603438558630},{"_id":"public/archives/2020/page/2/index.html","hash":"d32ed726649cdbba4ec064d92f4bd064945eba37","modified":1603438558630},{"_id":"public/categories/Java/index.html","hash":"3ab80d19383b5434acc88cffdfb73ab444ffd61f","modified":1603438558630},{"_id":"public/index.html","hash":"5cde81b0858819925662f9ab4cda75ef4b2abe2d","modified":1603438558630},{"_id":"public/page/2/index.html","hash":"5c046649a7d2b4aec1d0fcdd3e952d3f062e5f2c","modified":1603438558630},{"_id":"public/page/3/index.html","hash":"9763ec6011e96952167782cd786ba6293f212e61","modified":1603438558630},{"_id":"public/page/4/index.html","hash":"31689db5f74ef92f34e3920df93bd3a4770a82f4","modified":1603438558630},{"_id":"public/page/5/index.html","hash":"07553acf20f93bd7021c92615968479c42de2bf8","modified":1603438558630},{"_id":"public/page/6/index.html","hash":"17f735f4d29bca4f7834ac787d00fd1b77e858bc","modified":1603438558630},{"_id":"public/tags/Java/index.html","hash":"49352b8dc1e16d2579760946e36aaf3a9b2af6a9","modified":1603438558630},{"_id":"public/CNAME","hash":"6ac1a441d26185b407703ab9ffa5959860e49773","modified":1603438558637},{"_id":"public/baidu-verify-9BFFE2B7F8.txt","hash":"50cc3c23409426c3e28cf8800423ecda502f1eb8","modified":1603438558638},{"_id":"public/root.txt","hash":"51c99f66271aedfff930264c82fdbe9b4d05b67e","modified":1603438558638},{"_id":"public/robots.txt","hash":"c18cc8be26a5c74b1c2f6ee7775647c07197ab67","modified":1603438558638},{"_id":"public/images/nrmuse.png","hash":"c7bc96979ddcd9e1c9b7de09d98f510b76c89940","modified":1603438558638},{"_id":"public/images/vuecreate.png","hash":"f85fb6b87192b4bb5521c29a3e1932888c18609b","modified":1603438558638},{"_id":"public/images/nrmls.png","hash":"4b5016f2b844e38a61bd1fb44cc6dd7c44be123e","modified":1603438558638},{"_id":"public/images/vuecreate2.png","hash":"b270c1135532825f1be47c229fa78eb14bcfa499","modified":1603438558638},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1603438558638},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1603438558638},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1603438558638},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1603438558638},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1603438558638},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1603438558638},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1603438558638},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1603438558638},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1603438558638},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1603438558638},{"_id":"public/images/logo_16_16_7-3.svg","hash":"cc1ff6e3dd1a82b703ed71a084de10a46e29edcf","modified":1603438558638},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1603438558638},{"_id":"public/images/logo_256_256_116-7.svg","hash":"e5dc902cd8f7e2b89aefb9579978aa998fc083fd","modified":1603438558638},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1603438558638},{"_id":"public/images/logo_16_16_7-3.png","hash":"1aba4261552797bf81a44ebfaf3a17eb93e887ca","modified":1603438558638},{"_id":"public/images/logo_32_32_14-6.png","hash":"85e3d17c0b5731ba32d1059c0cb77aeb2c31a26d","modified":1603438558639},{"_id":"public/images/logo_32_32_14-6.svg","hash":"356c9c77914260098e02fee9887fcd1802fe419b","modified":1603438558639},{"_id":"public/images/logo_180_180_82.svg","hash":"6143c45a71228aec5c8907a6a9da4206165ffcd2","modified":1603438558639},{"_id":"public/images/logo_512_512_233-5.svg","hash":"9708ed7eb3f9960f0c7b718a64286e15cc307415","modified":1603438558639},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1603438558639},{"_id":"public/images/logo_bak.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1603438558639},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1603438558639},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1603438558639},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1603438558639},{"_id":"public/css/prism-tomorrow.css","hash":"3b99487dfc9b4e51e9105a93743b92a761840e34","modified":1603438558639},{"_id":"public/images/vuecreate3.png","hash":"18ad1a8dba3920753ec8b0441cbc057b99cade1f","modified":1603438559049},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1603438559049},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1603438559050},{"_id":"public/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1603438559054},{"_id":"public/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1603438559054},{"_id":"public/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1603438559054},{"_id":"public/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1603438559054},{"_id":"public/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1603438559054},{"_id":"public/js/utils.js","hash":"a2984bf0631756a904cd43f8e3a8f6fb15b9ceb5","modified":1603438559054},{"_id":"public/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1603438559054},{"_id":"public/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1603438559054},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1603438559054},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1603438559054},{"_id":"public/css/main.css","hash":"29af38103c0e3b2708bdf73cddd4e9c95f894d91","modified":1603438559054},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1603438559054},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1603438559054},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1603438559054},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1603438559054},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1603438559054}],"Category":[{"name":"Algorithm","_id":"ckglxx01w0009w2g5zxxrzats"},{"name":"Docker","_id":"ckglxx025000ow2g5pshjl7ma"},{"name":"GOF","_id":"ckglxx029000yw2g56ts28tbk"},{"name":"Jenkins","_id":"ckglxx02q0027w2g5rrlob9pr"},{"name":"Java","_id":"ckglxx02z0032w2g5muaoanbp"},{"name":"Linux","_id":"ckglxx03a004gw2g5d8mxhh67"},{"name":"MySQL","_id":"ckglxx03c004rw2g50swzlwxl"},{"name":"RocketMq","_id":"ckglxx03u006dw2g50aqd3qux"},{"name":"Vue","_id":"ckglxx03x006iw2g5mpnkm1r3"},{"name":"Spring","_id":"ckglxx03z006qw2g5p4k9ctij"},{"name":"Recommend","_id":"ckglxx0420070w2g53cef29sm"},{"name":"Tool","_id":"ckglxx0420074w2g5gnyqwjr6"},{"name":"WebSecurity","_id":"ckglxx04q0080w2g5he6ccuez"},{"name":"JVM","_id":"ckglxx04x008fw2g52qr2g74o"},{"name":"JAVA","parent":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx055009aw2g5v23bqeyu"},{"name":"JAVA","_id":"ckglxx056009hw2g5cfkvh9o1"}],"Data":[{"_id":"friends","data":[]},{"_id":"musics","data":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}]},{"_id":"url","data":{"url":"http://rs.mjava.top:81"}}],"Page":[{"_content":"ea667b0f708cd4ded0b79ebbdd99373a","source":"ea667b0f708cd4ded0b79ebbdd99373a.html","raw":"ea667b0f708cd4ded0b79ebbdd99373a","date":"2019-11-15T01:46:17.652Z","updated":"2019-11-14T15:24:27.447Z","path":"ea667b0f708cd4ded0b79ebbdd99373a.html","title":"","comments":1,"layout":"page","_id":"ckglxwzz10000w2g5bqrqmy6f","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"404.html","comments":1,"_id":"ckglxwzz30001w2g5kxjehucd","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"_content":"google-site-verification: google3412bb4ed05ed7b3.html","source":"google3412bb4ed05ed7b3.html","raw":"google-site-verification: google3412bb4ed05ed7b3.html","date":"2020-10-23T07:35:29.582Z","updated":"2020-10-23T07:34:08.097Z","path":"google3412bb4ed05ed7b3.html","title":"","comments":1,"layout":"page","_id":"ckglxwzz30002w2g56wyn5ng7","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"title":"about","date":"2019-08-04T14:52:47.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-08-04 22:52:47\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"about/index.html","comments":1,"_id":"ckglxx00o0003w2g58r2xci36","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"title":"分类","date":"2019-08-04T14:50:38.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-04 22:50:38\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2019-11-21T10:30:47.873Z","path":"categories/index.html","_id":"ckglxx00o0004w2g5oj8az8ac","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"title":"标签","date":"2019-08-04T14:52:11.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-08-04 22:52:11\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-11-21T10:30:30.853Z","path":"tags/index.html","_id":"ckglxx00p0005w2g5gmyppsvu","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""},{"title":"friends","date":"2019-08-04T14:53:14.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-08-04 22:53:14\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"friends/index.html","comments":1,"_id":"ckglxx00r0006w2g5wp4r9oia","content":"","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":""}],"Post":[{"title":"恍然大悟，数组和链表的区别","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-18T05:50:52.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![](http://cdn.mjava.top/20191218134901.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 文前发言\n\n　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；\n\n![](http://cdn.mjava.top/20191218104007.jpg)\n\n## 数组\n\n> 数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.\n\n\n\n牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；\n\n![](http://cdn.mjava.top/20191218113521.png)\n\n> 之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)\n\n \n\n有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；\n\n\n\n有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！\n\n![](http://cdn.mjava.top/20191218114115.gif)\n\n## 链表\n\n> 链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；\n\n\n\n　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．\n\n　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；\n\n![](http://cdn.mjava.top/20191218132932.png)\n\n> 可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；\n\n\n\n## 发个对比表格吧\n\n### 时间复杂度对比表\n\n| |数组 | 链表|\n| :--: | :--------------: | ---- |\n| 插入 | O(n) 慢 | O(1) 快 |\n| 删除 | O(n) 慢 | O(1) 快 |\n| 查询 | O(1) 快 | O(n) 慢 |\n\n","source":"_posts/algorithm/array-vs-linked.md","raw":"---\ntitle: 恍然大悟，数组和链表的区别\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-18 13:50:52\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 数据结构\ncategories:\n- Algorithm\n---\n\n\n\n![](http://cdn.mjava.top/20191218134901.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 文前发言\n\n　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=orange>数组链表</font>结构，就是常说的<font color=orange>哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；\n\n![](http://cdn.mjava.top/20191218104007.jpg)\n\n## 数组\n\n> 数组是我们平时用的最多的数据结构，它的特点是<font color=orange>查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=orange>O(1)</font>,插入的时间复杂度是<font color=orange>O(n)</font>.\n\n\n\n牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=orange>系统</font>)申请，要求学校给他们一个新的六人寝(<font color=orange>新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；\n\n![](http://cdn.mjava.top/20191218113521.png)\n\n> 之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=orange>插入数据慢</font>)\n\n \n\n有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；\n\n\n\n有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=orange>查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！\n\n![](http://cdn.mjava.top/20191218114115.gif)\n\n## 链表\n\n> 链表我们平时用的比较少，它的特点是:<font color=orange>插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=orange>O(n)</font>，插入的时间复杂度是：<font color=orange>O(1)</font>，它的特点是和数组相反的；\n\n\n\n　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．\n\n　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=orange>＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=orange>＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=orange>毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=orange>查询数据慢</font>）；\n\n![](http://cdn.mjava.top/20191218132932.png)\n\n> 可以发现，<font color=orange>每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=orange>添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；\n\n\n\n## 发个对比表格吧\n\n### 时间复杂度对比表\n\n| |数组 | 链表|\n| :--: | :--------------: | ---- |\n| 插入 | O(n) 慢 | O(1) 快 |\n| 删除 | O(n) 慢 | O(1) 快 |\n| 查询 | O(1) 快 | O(n) 慢 |\n\n","slug":"algorithm/array-vs-linked","published":1,"updated":"2019-12-18T05:52:24.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx01q0007w2g599ydep82","content":"<p><img src=\"http://cdn.mjava.top/20191218134901.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"文前发言\"><a href=\"#文前发言\" class=\"headerlink\" title=\"文前发言\"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=\"orange\">数组链表</font>结构，就是常说的<font color=\"orange\">哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p><p><img src=\"http://cdn.mjava.top/20191218104007.jpg\" alt></p><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是我们平时用的最多的数据结构，它的特点是<font color=\"orange\">查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=\"orange\">O(1)</font>,插入的时间复杂度是<font color=\"orange\">O(n)</font>.</p>\n</blockquote><a id=\"more\"></a>\n\n\n\n\n<p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=\"orange\">系统</font>)申请，要求学校给他们一个新的六人寝(<font color=\"orange\">新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p>\n<p><img src=\"http://cdn.mjava.top/20191218113521.png\" alt></p>\n<blockquote>\n<p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=\"orange\">插入数据慢</font>)</p>\n</blockquote>\n<p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p>\n<p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=\"orange\">查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p>\n<p><img src=\"http://cdn.mjava.top/20191218114115.gif\" alt></p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><blockquote>\n<p>链表我们平时用的比较少，它的特点是:<font color=\"orange\">插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=\"orange\">O(n)</font>，插入的时间复杂度是：<font color=\"orange\">O(1)</font>，它的特点是和数组相反的；</p>\n</blockquote>\n<p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p>\n<p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=\"orange\">＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=\"orange\">＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=\"orange\">毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=\"orange\">查询数据慢</font>）；</p>\n<p><img src=\"http://cdn.mjava.top/20191218132932.png\" alt></p>\n<blockquote>\n<p>可以发现，<font color=\"orange\">每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=\"orange\">添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p>\n</blockquote>\n<h2 id=\"发个对比表格吧\"><a href=\"#发个对比表格吧\" class=\"headerlink\" title=\"发个对比表格吧\"></a>发个对比表格吧</h2><h3 id=\"时间复杂度对比表\"><a href=\"#时间复杂度对比表\" class=\"headerlink\" title=\"时间复杂度对比表\"></a>时间复杂度对比表</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">插入</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">删除</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">查询</td>\n<td align=\"center\">O(1) 快</td>\n<td>O(n) 慢</td>\n</tr>\n</tbody></table>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191218134901.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"文前发言\"><a href=\"#文前发言\" class=\"headerlink\" title=\"文前发言\"></a>文前发言</h2><p>　　在Java中，很多地方都使用了数组和链表，还有两种组合的叫<font color=\"orange\">数组链表</font>结构，就是常说的<font color=\"orange\">哈希表</font>，HashMap底层的数据结构就是哈希表．远了，远了，这里不讲HashMap,这里讲数组和链表；</p><p><img src=\"http://cdn.mjava.top/20191218104007.jpg\" alt></p><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><blockquote>\n<p>数组是我们平时用的最多的数据结构，它的特点是<font color=\"orange\">查询数据快，插入数据慢</font>，查询的时间复杂度是<font color=\"orange\">O(1)</font>,插入的时间复杂度是<font color=\"orange\">O(n)</font>.</p>\n</blockquote>","more":"\n\n\n\n\n<p>牛＊一族去学校读书，学校有四人寝和五人寝，大牛，二牛，三牛，四牛一同住进了四人寝里，每天都五缺一；有一天，他们在游戏里认识了小牛，得知小牛也是他们学校的，于是邀请小牛和他们一起住，可是他们们寝室只能住四个人，这个怎么办呢？于是他们向学校(<font color=\"orange\">系统</font>)申请，要求学校给他们一个新的六人寝(<font color=\"orange\">新的内存空间</font>)，于是学校就给了他们新的六人寝，于是他们全部都搬去了六人寝里，小牛也办了进去，之后每天五黑，好不快活；</p>\n<p><img src=\"http://cdn.mjava.top/20191218113521.png\" alt></p>\n<blockquote>\n<p>之后有其他学生看到牛＊他们的做法，于是也通通向学校申请；最后学校发现了一个问题：就是学生们为了住进新寝室，花费了大量的时间在从旧寝室到新寝室的路上(<font color=\"orange\">插入数据慢</font>)</p>\n</blockquote>\n<p>有的人会说，那一开始就安排大牛，二牛，三牛，四牛住５人寝不就好了吗？这样他们就不用搬了(这就相当于我们初始化数组时，给数组指定了一个大小)；这样的想法是好的，但是如果他们没有没有认识小牛，小牛也不会搬进去，这样他们四个人就一直住着５人寝，就造成了空间资源浪费；</p>\n<p>有一天，老师去找进入新寝室的小牛谈话，一看得知小牛在４号床，一下就找到了小牛（<font color=\"orange\">查询数据快</font>），问他在这个寝室住的习不习惯，小牛心想，每天都五黑，你说我习不习惯！！</p>\n<p><img src=\"http://cdn.mjava.top/20191218114115.gif\" alt></p>\n<h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><blockquote>\n<p>链表我们平时用的比较少，它的特点是:<font color=\"orange\">插入数据快，查询数据慢</font>，查询的时间复杂度是：<font color=\"orange\">O(n)</font>，插入的时间复杂度是：<font color=\"orange\">O(1)</font>，它的特点是和数组相反的；</p>\n</blockquote>\n<p>　　经过无数日夜的奋战，牛＊一寝人觉得是时候该出去玩玩了，自从小牛搬过来后，就一直没日没夜的五黑，都快不知道外面的世界长什么样子了；他们一行人准备去游乐园转转．</p>\n<p>　　来到游乐园后，一群人像刚放出来的一样，对一切都充满了新鲜感，到处转悠．就在转悠的时候，细心的大牛发现了地上有一张纸条，打开一看，上面写着：<font color=\"orange\">＂少年，你渴望力量吗？想获得力量就来海盗船找我！＂</font>，大牛赶紧找来其他小伙伴，一同前往；到了海盗船的地方，发现船上写着：<font color=\"orange\">＂力量源自摩天轮，请前往摩天轮＂</font>，于是一群人就又前往摩天轮，在那里，终于过得了神秘力量－－－<font color=\"orange\">毒鸡汤：你的内心有多强大，你的力量就有多强大</font>；小牛他们为了寻找这个力量，可谓费尽九牛二虎之力啊（<font color=\"orange\">查询数据慢</font>）；</p>\n<p><img src=\"http://cdn.mjava.top/20191218132932.png\" alt></p>\n<blockquote>\n<p>可以发现，<font color=\"orange\">每个元素存着下个元素的地址</font>，所以如果要查找其中某个元素，就必须要从头开始，才能找到．这就比较慢了．但是，他们<font color=\"orange\">添加元素很快</font>,元素可以随机出现在游乐园的某个地方，只要在新添加元素的前一个元素指明新元素的地址在哪里就可以了；</p>\n</blockquote>\n<h2 id=\"发个对比表格吧\"><a href=\"#发个对比表格吧\" class=\"headerlink\" title=\"发个对比表格吧\"></a>发个对比表格吧</h2><h3 id=\"时间复杂度对比表\"><a href=\"#时间复杂度对比表\" class=\"headerlink\" title=\"时间复杂度对比表\"></a>时间复杂度对比表</h3><table>\n<thead>\n<tr>\n<th align=\"center\"></th>\n<th align=\"center\">数组</th>\n<th>链表</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">插入</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">删除</td>\n<td align=\"center\">O(n) 慢</td>\n<td>O(1) 快</td>\n</tr>\n<tr>\n<td align=\"center\">查询</td>\n<td align=\"center\">O(1) 快</td>\n<td>O(n) 慢</td>\n</tr>\n</tbody></table>\n"},{"title":"递归算法-获取json中指定key的所有值","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2019-08-17T04:38:52.000Z","password":null,"summary":null,"_content":"\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://cdn.mjava.top/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](http://cdn.mjava.top/blog/json2.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo\n","source":"_posts/algorithm/algorithm-recursive-01.md","raw":"---\ntitle: 递归算法-获取json中指定key的所有值\ntop: true\ncover: true\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Recursive\n  - Algorithm\n  - Json\ncategories:\n  - Algorithm\ndate: 2019-08-17 12:38:52\npassword:\nsummary:\n---\n\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://cdn.mjava.top/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](http://cdn.mjava.top/blog/json2.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo\n","slug":"algorithm/algorithm-recursive-01","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx01u0008w2g5nb9dbkzp","content":"<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p><h2 id=\"1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"><a href=\"#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\" class=\"headerlink\" title=\"1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.58&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n<h2 id=\"2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\"><a href=\"#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\" class=\"headerlink\" title=\"2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isJSONObj</span><span class=\"params\">(Object json)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isJSONArray</span><span class=\"params\">(Object json)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p>\n</blockquote>\n<h2 id=\"3-建立核心重载方法\"><a href=\"#3-建立核心重载方法\" class=\"headerlink\" title=\"3.建立核心重载方法\"></a>3.建立核心重载方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getJSONValue</span><span class=\"params\">(JSONObject json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json.keySet())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(json.get(j)))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(json.get(j).toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(json.get(j)))&#123;</span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(json.get(j).toString());</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是字符串</span></span><br><span class=\"line\">            list.add(json.get(j).toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getJSONValue</span><span class=\"params\">(JSONArray json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(j.toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(j.toString());</span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"><a href=\"#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\" class=\"headerlink\" title=\"4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><p><a href=\"http://cdn.mjava.top/blog/demojson.txt\" rel=\"noopener\" target=\"_blank\">示例json</a></p>\n<h2 id=\"5-调用方法\"><a href=\"#5-调用方法\" class=\"headerlink\" title=\"5.调用方法\"></a>5.调用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    File file=<span class=\"keyword\">new</span> File(demo1.class.getResource(<span class=\"string\">\"/2.json\"</span>).getPath());</span><br><span class=\"line\">    FileInputStream fileInputStream=<span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">    InputStreamReader inputStreamReader=<span class=\"keyword\">new</span> InputStreamReader(fileInputStream);</span><br><span class=\"line\">    BufferedReader bufferedReader=<span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</span><br><span class=\"line\">    String line=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    StringBuffer json=<span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        json.append(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSONObject j3=JSON.parseObject(json.toString());</span><br><span class=\"line\">    List&lt;String&gt; mid=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    getJSONValue(j3,<span class=\"string\">\"interfaceId\"</span>,mid);</span><br><span class=\"line\">    System.out.println(mid.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-成功获取\"><a href=\"#6-成功获取\" class=\"headerlink\" title=\"6.成功获取\"></a>6.成功获取</h2><p><img src=\"http://cdn.mjava.top/blog/json2.png\" alt=\"控制台返回\"></p>\n<blockquote>\n<p>demo源码地址：<a href=\"https://github.com/z573419235/studyDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/studyDemo</a></p>\n</blockquote>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。</p><h2 id=\"1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"><a href=\"#1-首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\" class=\"headerlink\" title=\"1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\"></a>1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包</h2><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;1.2.58&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>","more":"\n\n\n<h2 id=\"2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\"><a href=\"#2-创建两个工具类方法，用来判断传入的是不是json对象或json数组\" class=\"headerlink\" title=\"2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\"></a>2.创建两个工具类方法，用来判断传入的是不是json对象或json数组</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isJSONObj</span><span class=\"params\">(Object json)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONObject;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isJSONArray</span><span class=\"params\">(Object json)</span></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> json <span class=\"keyword\">instanceof</span> JSONArray;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。</p>\n</blockquote>\n<h2 id=\"3-建立核心重载方法\"><a href=\"#3-建立核心重载方法\" class=\"headerlink\" title=\"3.建立核心重载方法\"></a>3.建立核心重载方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getJSONValue</span><span class=\"params\">(JSONObject json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json.keySet())&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(json.get(j)))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(json.get(j).toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(json.get(j)))&#123;</span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(json.get(j).toString());</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(j==k)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是字符串</span></span><br><span class=\"line\">            list.add(json.get(j).toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">getJSONValue</span><span class=\"params\">(JSONArray json,String k,List&lt;String&gt; list)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Object j:json)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(isJSONObj(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是对象</span></span><br><span class=\"line\">            JSONObject j2= JSON.parseObject(j.toString());</span><br><span class=\"line\">            getJSONValue(j2,k,list);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(isJSONArray(j))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//是数组</span></span><br><span class=\"line\">            JSONArray j3=JSON.parseArray(j.toString());</span><br><span class=\"line\">            getJSONValue(j3,k,list);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"><a href=\"#4-接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\" class=\"headerlink\" title=\"4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\"></a>4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的</h2><p><a href=\"http://cdn.mjava.top/blog/demojson.txt\" rel=\"noopener\" target=\"_blank\">示例json</a></p>\n<h2 id=\"5-调用方法\"><a href=\"#5-调用方法\" class=\"headerlink\" title=\"5.调用方法\"></a>5.调用方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    File file=<span class=\"keyword\">new</span> File(demo1.class.getResource(<span class=\"string\">\"/2.json\"</span>).getPath());</span><br><span class=\"line\">    FileInputStream fileInputStream=<span class=\"keyword\">new</span> FileInputStream(file);</span><br><span class=\"line\">    InputStreamReader inputStreamReader=<span class=\"keyword\">new</span> InputStreamReader(fileInputStream);</span><br><span class=\"line\">    BufferedReader bufferedReader=<span class=\"keyword\">new</span> BufferedReader(inputStreamReader);</span><br><span class=\"line\">    String line=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">    StringBuffer json=<span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> ((line=bufferedReader.readLine())!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        json.append(line);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JSONObject j3=JSON.parseObject(json.toString());</span><br><span class=\"line\">    List&lt;String&gt; mid=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    getJSONValue(j3,<span class=\"string\">\"interfaceId\"</span>,mid);</span><br><span class=\"line\">    System.out.println(mid.toString());</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">    System.out.println(e.getMessage());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-成功获取\"><a href=\"#6-成功获取\" class=\"headerlink\" title=\"6.成功获取\"></a>6.成功获取</h2><p><img src=\"http://cdn.mjava.top/blog/json2.png\" alt=\"控制台返回\"></p>\n<blockquote>\n<p>demo源码地址：<a href=\"https://github.com/z573419235/studyDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/studyDemo</a></p>\n</blockquote>\n"},{"title":"【数据结构】手写平衡二叉树（AVL）","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-02-01T07:56:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n# 【数据结构】手写平衡二叉树（AVL）\n\n![](http://cdn.mjava.top/blog/20200201165139.jpg)\n\n> 积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬\n>\n> 本文源代码：[手写AVL树](https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java)\n\n## 什么是平衡二叉树？\n\n平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵[平衡二叉树](https://baike.baidu.com/item/平衡二叉树/10421057)。AVL树查找的时间复杂度为O(logN)。\n\n### 平衡二叉树基本特点\n\n- 左右子树深度差不能大于1\n- 左边子树永远比根节点小\n- 右边子树永远比根节点大\n\n### 平衡二叉树基本结构及操作\n\n- 左左结构——右旋\n\n![左左结构](http://cdn.mjava.top/blog/20200201153234.jpg)\n\n- 右右结构——左旋\n\n![右右结构](http://cdn.mjava.top/blog/20200201153301.jpg)\n\n- 左右结构——左子先左旋，然后整体右旋\n\n![左右结构](http://cdn.mjava.top/blog/20200201153329.jpg)\n\n- 右左结构——右子先右旋，然后整体左旋\n\n![右左结构](http://cdn.mjava.top/blog/20200201153403.jpg)\n\n## 代码实现\n\n先创建一个内部类Node，来表示树的每个节点\n\n```java\npublic class AVLTree {\n    private Node rootNode;\n\n    //二叉树节点\n    private class Node{\n        public Node parent; //父\n        public Node left;\t//左子树\n        public Node right;\t//右子树\n        @NotNull\n        public int data;\t//存放的数据\n        private int depth;\t//深度\n        private int balance;\t//平衡因子\n\t\t//有参构造方法\n        public Node(int data){\n            this.data=data;\n            this.depth=1;\n            this.balance=0;\n        }\n    }\n}\n```\n\n### 插入数据\n\n暴露一个方法给外部调用\n\n```java\n/**添加数据方法*/\npublic void add(int data){\n    if (this.rootNode==null){\n        this.rootNode=new Node(data);\n    }else {\n        this.insert(rootNode,data);\n        //判断根节点是否有父  有的话说明有旋转操作，更新根节点\n        if (this.rootNode.parent!=null){\n            this.rootNode=this.rootNode.parent;\n        }\n    }\n}\n```\n\n实际内部是调用另一个`insert`方法：\n\n```java\nprivate void insert(Node root,int data){\n    //插入的数据比根小\n    if (data<root.data){\n        if (root.left==null){\n            root.left=new Node(data);\n            root.left.parent=root;\n        }else {\n            this.insert(root.left,data);\n        }\n    }\n    //插入的数据比根大\n    if (data>root.data){\n        if (root.right==null) {\n            root.right=new Node(data);\n            root.right.parent=root;\n        }else{\n            this.insert(root.right,data);\n        }\n    }\n    root.balance=this.getBalance(root);\n\n    if (root.balance>1){\n        //判断左子的平衡因子\n        if (root.left.balance<0){\n            this.leftTurn(root.left);\n        }\n        this.rightTurn(root);\n    }\n    if (root.balance<-1){\n        //判断右子的平衡因子\n        if (root.right.balance>0){\n            this.rightTurn(root.right);\n        }\n        this.leftTurn(root);\n    }\n    root.depth=this.getDepth(root);\n    root.balance=this.getBalance(root);\n}\n```\n\n### 右旋\n> 右旋的操作如下\n- 我父变成左子的父\n- 左子变成我的父\n- 我变成左子的右子\n- 左子的右子变成我的左子\n- (当左子的右子存在时)我变成左子的右子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void rightTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node leftSon=node.left;\n    Node leftSon_rightSon=leftSon.right;\n\n    //如果父不为空，判断我是在父的左节点还是右节点\n    if (parent!=null){\n        if (node==parent.left){\n            //我在父的左节点上，把我的左子变成父的左子\n            parent.left=leftSon;\n        }\n        if (node==parent.right){\n            //我在父的右节点上，把我的左子变成父的右子\n            parent.right=leftSon;\n        }\n    }\n    leftSon.parent=parent;\n    node.parent=leftSon;\n    leftSon.right=node;\n    node.left=leftSon_rightSon;\n    //如果左子的右子确实存在的\n    if (leftSon_rightSon!=null){\n        //我变成左子的右子的父\n        leftSon_rightSon.parent=node;\n    }\n    //重新计算深度和平衡因子\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    leftSon.depth=this.getDepth(leftSon);\n    leftSon.balance=this.getBalance(leftSon);\n}\n```\n\n\n### 左旋\n> 左旋的操作如下\n- 我的父变右子的父\n- 右子变成我的父\n- 我变成右子的左子\n- 右子的左子变成我的右子\n- (当右子的左子存在时)我变成右子的左子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void leftTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node rightSon=node.right;\n    Node rightSon_leftSon=rightSon.left;\n\n    if (parent!=null){\n        if (node==parent.left){\n            parent.left=rightSon;\n        }\n        if (node==parent.right){\n            parent.right=rightSon;\n        }\n    }\n    rightSon.parent=parent;\n    node.parent=rightSon;\n    rightSon.left=node;\n    node.right=rightSon_leftSon;\n    if (rightSon_leftSon!=null){\n        rightSon_leftSon.parent=node;\n    }\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    rightSon.depth=this.getDepth(rightSon);\n    rightSon.balance=this.getBalance(rightSon);\n}\n```\n\n### 计算深度\n\n```java\n/**计算深度*/\nprivate int getDepth(Node node){\n    int depth = 0;\n    if(node.left==null && node.right!=null) {\n        depth=node.right.depth;\n    }\n    if(node.right==null && node.left!=null) {\n        depth=node.left.depth;\n    }\n    if (node.right!=null && node.left!=null) {\n        depth=Math.max(node.left.depth,node.right.depth);\n    }\n    depth++;\n    return depth;\n}\n```\n\n### 计算平衡因子\n\n```java\n/**计算左右深度差*/\nprivate int getBalance(Node node){\n    int leftDepth = 0;\n    int rightDepth = 0;\n    if(node.left!=null){\n        leftDepth=node.left.depth;\n    }\n    if(node.right!=null){\n        rightDepth=node.right.depth;\n    }\n    /**\n         *      左减右\n         * 为负数：右边子树高\n         * 为正数: 左边子树高\n         * */\n    return leftDepth-rightDepth;\n}\n```\n\n## 附言\n\n如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：\n\n- [visualgo在线](https://visualgo.net/zh)\n\n- [数据结构可视化](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html)","source":"_posts/algorithm/algorithm-avltree-01.md","raw":"---\ntitle: 【数据结构】手写平衡二叉树（AVL）\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-02-01 15:56:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- AVL\n- 数据结构\n- 平衡二叉树\n- 二叉树\ncategories:\n- Algorithm\n---\n\n\n# 【数据结构】手写平衡二叉树（AVL）\n\n![](http://cdn.mjava.top/blog/20200201165139.jpg)\n\n> 积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬\n>\n> 本文源代码：[手写AVL树](https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java)\n\n## 什么是平衡二叉树？\n\n平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵[平衡二叉树](https://baike.baidu.com/item/平衡二叉树/10421057)。AVL树查找的时间复杂度为O(logN)。\n\n### 平衡二叉树基本特点\n\n- 左右子树深度差不能大于1\n- 左边子树永远比根节点小\n- 右边子树永远比根节点大\n\n### 平衡二叉树基本结构及操作\n\n- 左左结构——右旋\n\n![左左结构](http://cdn.mjava.top/blog/20200201153234.jpg)\n\n- 右右结构——左旋\n\n![右右结构](http://cdn.mjava.top/blog/20200201153301.jpg)\n\n- 左右结构——左子先左旋，然后整体右旋\n\n![左右结构](http://cdn.mjava.top/blog/20200201153329.jpg)\n\n- 右左结构——右子先右旋，然后整体左旋\n\n![右左结构](http://cdn.mjava.top/blog/20200201153403.jpg)\n\n## 代码实现\n\n先创建一个内部类Node，来表示树的每个节点\n\n```java\npublic class AVLTree {\n    private Node rootNode;\n\n    //二叉树节点\n    private class Node{\n        public Node parent; //父\n        public Node left;\t//左子树\n        public Node right;\t//右子树\n        @NotNull\n        public int data;\t//存放的数据\n        private int depth;\t//深度\n        private int balance;\t//平衡因子\n\t\t//有参构造方法\n        public Node(int data){\n            this.data=data;\n            this.depth=1;\n            this.balance=0;\n        }\n    }\n}\n```\n\n### 插入数据\n\n暴露一个方法给外部调用\n\n```java\n/**添加数据方法*/\npublic void add(int data){\n    if (this.rootNode==null){\n        this.rootNode=new Node(data);\n    }else {\n        this.insert(rootNode,data);\n        //判断根节点是否有父  有的话说明有旋转操作，更新根节点\n        if (this.rootNode.parent!=null){\n            this.rootNode=this.rootNode.parent;\n        }\n    }\n}\n```\n\n实际内部是调用另一个`insert`方法：\n\n```java\nprivate void insert(Node root,int data){\n    //插入的数据比根小\n    if (data<root.data){\n        if (root.left==null){\n            root.left=new Node(data);\n            root.left.parent=root;\n        }else {\n            this.insert(root.left,data);\n        }\n    }\n    //插入的数据比根大\n    if (data>root.data){\n        if (root.right==null) {\n            root.right=new Node(data);\n            root.right.parent=root;\n        }else{\n            this.insert(root.right,data);\n        }\n    }\n    root.balance=this.getBalance(root);\n\n    if (root.balance>1){\n        //判断左子的平衡因子\n        if (root.left.balance<0){\n            this.leftTurn(root.left);\n        }\n        this.rightTurn(root);\n    }\n    if (root.balance<-1){\n        //判断右子的平衡因子\n        if (root.right.balance>0){\n            this.rightTurn(root.right);\n        }\n        this.leftTurn(root);\n    }\n    root.depth=this.getDepth(root);\n    root.balance=this.getBalance(root);\n}\n```\n\n### 右旋\n> 右旋的操作如下\n- 我父变成左子的父\n- 左子变成我的父\n- 我变成左子的右子\n- 左子的右子变成我的左子\n- (当左子的右子存在时)我变成左子的右子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void rightTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node leftSon=node.left;\n    Node leftSon_rightSon=leftSon.right;\n\n    //如果父不为空，判断我是在父的左节点还是右节点\n    if (parent!=null){\n        if (node==parent.left){\n            //我在父的左节点上，把我的左子变成父的左子\n            parent.left=leftSon;\n        }\n        if (node==parent.right){\n            //我在父的右节点上，把我的左子变成父的右子\n            parent.right=leftSon;\n        }\n    }\n    leftSon.parent=parent;\n    node.parent=leftSon;\n    leftSon.right=node;\n    node.left=leftSon_rightSon;\n    //如果左子的右子确实存在的\n    if (leftSon_rightSon!=null){\n        //我变成左子的右子的父\n        leftSon_rightSon.parent=node;\n    }\n    //重新计算深度和平衡因子\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    leftSon.depth=this.getDepth(leftSon);\n    leftSon.balance=this.getBalance(leftSon);\n}\n```\n\n\n### 左旋\n> 左旋的操作如下\n- 我的父变右子的父\n- 右子变成我的父\n- 我变成右子的左子\n- 右子的左子变成我的右子\n- (当右子的左子存在时)我变成右子的左子的父\n- 计算左右节点的深度\n- 计算深度差\n\n```java\nprivate void leftTurn(@NotNull Node node){\n    Node parent=node.parent;\n    Node rightSon=node.right;\n    Node rightSon_leftSon=rightSon.left;\n\n    if (parent!=null){\n        if (node==parent.left){\n            parent.left=rightSon;\n        }\n        if (node==parent.right){\n            parent.right=rightSon;\n        }\n    }\n    rightSon.parent=parent;\n    node.parent=rightSon;\n    rightSon.left=node;\n    node.right=rightSon_leftSon;\n    if (rightSon_leftSon!=null){\n        rightSon_leftSon.parent=node;\n    }\n    node.depth=this.getDepth(node);\n    node.balance=this.getBalance(node);\n    rightSon.depth=this.getDepth(rightSon);\n    rightSon.balance=this.getBalance(rightSon);\n}\n```\n\n### 计算深度\n\n```java\n/**计算深度*/\nprivate int getDepth(Node node){\n    int depth = 0;\n    if(node.left==null && node.right!=null) {\n        depth=node.right.depth;\n    }\n    if(node.right==null && node.left!=null) {\n        depth=node.left.depth;\n    }\n    if (node.right!=null && node.left!=null) {\n        depth=Math.max(node.left.depth,node.right.depth);\n    }\n    depth++;\n    return depth;\n}\n```\n\n### 计算平衡因子\n\n```java\n/**计算左右深度差*/\nprivate int getBalance(Node node){\n    int leftDepth = 0;\n    int rightDepth = 0;\n    if(node.left!=null){\n        leftDepth=node.left.depth;\n    }\n    if(node.right!=null){\n        rightDepth=node.right.depth;\n    }\n    /**\n         *      左减右\n         * 为负数：右边子树高\n         * 为正数: 左边子树高\n         * */\n    return leftDepth-rightDepth;\n}\n```\n\n## 附言\n\n如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：\n\n- [visualgo在线](https://visualgo.net/zh)\n\n- [数据结构可视化](https://www.cs.usfca.edu/~galles/visualization/Algorithms.html)","slug":"algorithm/algorithm-avltree-01","published":1,"updated":"2020-02-04T03:24:07.080Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx01y000bw2g5vl29yf67","content":"<h1 id=\"【数据结构】手写平衡二叉树（AVL）\"><a href=\"#【数据结构】手写平衡二叉树（AVL）\" class=\"headerlink\" title=\"【数据结构】手写平衡二叉树（AVL）\"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src=\"http://cdn.mjava.top/blog/20200201165139.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p>\n<p>本文源代码：<a href=\"https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java\" rel=\"noopener\" target=\"_blank\">手写AVL树</a></p>\n</blockquote><h2 id=\"什么是平衡二叉树？\"><a href=\"#什么是平衡二叉树？\" class=\"headerlink\" title=\"什么是平衡二叉树？\"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href=\"https://baike.baidu.com/item/平衡二叉树/10421057\" rel=\"noopener\" target=\"_blank\">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p><a id=\"more\"></a>\n\n\n<h3 id=\"平衡二叉树基本特点\"><a href=\"#平衡二叉树基本特点\" class=\"headerlink\" title=\"平衡二叉树基本特点\"></a>平衡二叉树基本特点</h3><ul>\n<li>左右子树深度差不能大于1</li>\n<li>左边子树永远比根节点小</li>\n<li>右边子树永远比根节点大</li>\n</ul>\n<h3 id=\"平衡二叉树基本结构及操作\"><a href=\"#平衡二叉树基本结构及操作\" class=\"headerlink\" title=\"平衡二叉树基本结构及操作\"></a>平衡二叉树基本结构及操作</h3><ul>\n<li>左左结构——右旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153234.jpg\" alt=\"左左结构\"></p>\n<ul>\n<li>右右结构——左旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153301.jpg\" alt=\"右右结构\"></p>\n<ul>\n<li>左右结构——左子先左旋，然后整体右旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153329.jpg\" alt=\"左右结构\"></p>\n<ul>\n<li>右左结构——右子先右旋，然后整体左旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153403.jpg\" alt=\"右左结构\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node parent; <span class=\"comment\">//父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;\t<span class=\"comment\">//左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;\t<span class=\"comment\">//右子树</span></span><br><span class=\"line\">        <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> data;\t<span class=\"comment\">//存放的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> depth;\t<span class=\"comment\">//深度</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;\t<span class=\"comment\">//平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//有参构造方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data=data;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.depth=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.balance=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>暴露一个方法给外部调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**添加数据方法*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootNode==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rootNode=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.insert(rootNode,data);</span><br><span class=\"line\">        <span class=\"comment\">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootNode.parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.rootNode=<span class=\"keyword\">this</span>.rootNode.parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际内部是调用另一个<code>insert</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node root,<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&lt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            root.left=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            root.left.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.insert(root.left,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&gt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.right=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            root.right.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.insert(root.right,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.balance=<span class=\"keyword\">this</span>.getBalance(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断左子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left.balance&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.leftTurn(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rightTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&lt;-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断右子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right.balance&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.rightTurn(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leftTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.depth=<span class=\"keyword\">this</span>.getDepth(root);</span><br><span class=\"line\">    root.balance=<span class=\"keyword\">this</span>.getBalance(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><blockquote>\n<p>右旋的操作如下</p>\n<ul>\n<li>我父变成左子的父</li>\n<li>左子变成我的父</li>\n<li>我变成左子的右子</li>\n<li>左子的右子变成我的左子</li>\n<li>(当左子的右子存在时)我变成左子的右子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightTurn</span><span class=\"params\">(@NotNull Node node)</span></span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node leftSon=node.left;</span><br><span class=\"line\">    Node leftSon_rightSon=leftSon.right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class=\"line\">            parent.left=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class=\"line\">            parent.right=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftSon.parent=parent;</span><br><span class=\"line\">    node.parent=leftSon;</span><br><span class=\"line\">    leftSon.right=node;</span><br><span class=\"line\">    node.left=leftSon_rightSon;</span><br><span class=\"line\">    <span class=\"comment\">//如果左子的右子确实存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftSon_rightSon!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我变成左子的右子的父</span></span><br><span class=\"line\">        leftSon_rightSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重新计算深度和平衡因子</span></span><br><span class=\"line\">    node.depth=<span class=\"keyword\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"keyword\">this</span>.getBalance(node);</span><br><span class=\"line\">    leftSon.depth=<span class=\"keyword\">this</span>.getDepth(leftSon);</span><br><span class=\"line\">    leftSon.balance=<span class=\"keyword\">this</span>.getBalance(leftSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><blockquote>\n<p>左旋的操作如下</p>\n<ul>\n<li>我的父变右子的父</li>\n<li>右子变成我的父</li>\n<li>我变成右子的左子</li>\n<li>右子的左子变成我的右子</li>\n<li>(当右子的左子存在时)我变成右子的左子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftTurn</span><span class=\"params\">(@NotNull Node node)</span></span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node rightSon=node.right;</span><br><span class=\"line\">    Node rightSon_leftSon=rightSon.left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            parent.left=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            parent.right=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rightSon.parent=parent;</span><br><span class=\"line\">    node.parent=rightSon;</span><br><span class=\"line\">    rightSon.left=node;</span><br><span class=\"line\">    node.right=rightSon_leftSon;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightSon_leftSon!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        rightSon_leftSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.depth=<span class=\"keyword\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"keyword\">this</span>.getBalance(node);</span><br><span class=\"line\">    rightSon.depth=<span class=\"keyword\">this</span>.getDepth(rightSon);</span><br><span class=\"line\">    rightSon.balance=<span class=\"keyword\">this</span>.getBalance(rightSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算深度\"><a href=\"#计算深度\" class=\"headerlink\" title=\"计算深度\"></a>计算深度</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算深度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left==<span class=\"keyword\">null</span> &amp;&amp; node.right!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right==<span class=\"keyword\">null</span> &amp;&amp; node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right!=<span class=\"keyword\">null</span> &amp;&amp; node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算平衡因子\"><a href=\"#计算平衡因子\" class=\"headerlink\" title=\"计算平衡因子\"></a>计算平衡因子</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算左右深度差*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getBalance</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        leftDepth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        rightDepth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *      左减右</span></span><br><span class=\"line\"><span class=\"comment\">         * 为负数：右边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * 为正数: 左边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth-rightDepth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p>\n<ul>\n<li><p><a href=\"https://visualgo.net/zh\" rel=\"noopener\" target=\"_blank\">visualgo在线</a></p>\n</li>\n<li><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\" rel=\"noopener\" target=\"_blank\">数据结构可视化</a></p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h1 id=\"【数据结构】手写平衡二叉树（AVL）\"><a href=\"#【数据结构】手写平衡二叉树（AVL）\" class=\"headerlink\" title=\"【数据结构】手写平衡二叉树（AVL）\"></a>【数据结构】手写平衡二叉树（AVL）</h1><p><img src=\"http://cdn.mjava.top/blog/20200201165139.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河。每天进步一点点，终有一天将成大佬</p>\n<p>本文源代码：<a href=\"https://github.com/z573419235/studyDemo/blob/master/BaseJava/src/dataStructure/AVLTree.java\" rel=\"noopener\" target=\"_blank\">手写AVL树</a></p>\n</blockquote><h2 id=\"什么是平衡二叉树？\"><a href=\"#什么是平衡二叉树？\" class=\"headerlink\" title=\"什么是平衡二叉树？\"></a>什么是平衡二叉树？</h2><p>平衡二叉树，又称为AVL树，当树不是空树时，它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵<a href=\"https://baike.baidu.com/item/平衡二叉树/10421057\" rel=\"noopener\" target=\"_blank\">平衡二叉树</a>。AVL树查找的时间复杂度为O(logN)。</p>","more":"\n\n\n<h3 id=\"平衡二叉树基本特点\"><a href=\"#平衡二叉树基本特点\" class=\"headerlink\" title=\"平衡二叉树基本特点\"></a>平衡二叉树基本特点</h3><ul>\n<li>左右子树深度差不能大于1</li>\n<li>左边子树永远比根节点小</li>\n<li>右边子树永远比根节点大</li>\n</ul>\n<h3 id=\"平衡二叉树基本结构及操作\"><a href=\"#平衡二叉树基本结构及操作\" class=\"headerlink\" title=\"平衡二叉树基本结构及操作\"></a>平衡二叉树基本结构及操作</h3><ul>\n<li>左左结构——右旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153234.jpg\" alt=\"左左结构\"></p>\n<ul>\n<li>右右结构——左旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153301.jpg\" alt=\"右右结构\"></p>\n<ul>\n<li>左右结构——左子先左旋，然后整体右旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153329.jpg\" alt=\"左右结构\"></p>\n<ul>\n<li>右左结构——右子先右旋，然后整体左旋</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200201153403.jpg\" alt=\"右左结构\"></p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p>先创建一个内部类Node，来表示树的每个节点</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AVLTree</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Node rootNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//二叉树节点</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Node</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node parent; <span class=\"comment\">//父</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node left;\t<span class=\"comment\">//左子树</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> Node right;\t<span class=\"comment\">//右子树</span></span><br><span class=\"line\">        <span class=\"meta\">@NotNull</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> data;\t<span class=\"comment\">//存放的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> depth;\t<span class=\"comment\">//深度</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> balance;\t<span class=\"comment\">//平衡因子</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//有参构造方法</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Node</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.data=data;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.depth=<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.balance=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><p>暴露一个方法给外部调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**添加数据方法*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootNode==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rootNode=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.insert(rootNode,data);</span><br><span class=\"line\">        <span class=\"comment\">//判断根节点是否有父  有的话说明有旋转操作，更新根节点</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.rootNode.parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.rootNode=<span class=\"keyword\">this</span>.rootNode.parent;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实际内部是调用另一个<code>insert</code>方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node root,<span class=\"keyword\">int</span> data)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根小</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&lt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            root.left=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            root.left.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.insert(root.left,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//插入的数据比根大</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (data&gt;root.data)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right==<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            root.right=<span class=\"keyword\">new</span> Node(data);</span><br><span class=\"line\">            root.right.parent=root;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.insert(root.right,data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.balance=<span class=\"keyword\">this</span>.getBalance(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&gt;<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断左子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.left.balance&lt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.leftTurn(root.left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.rightTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.balance&lt;-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断右子的平衡因子</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (root.right.balance&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.rightTurn(root.right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.leftTurn(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    root.depth=<span class=\"keyword\">this</span>.getDepth(root);</span><br><span class=\"line\">    root.balance=<span class=\"keyword\">this</span>.getBalance(root);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><blockquote>\n<p>右旋的操作如下</p>\n<ul>\n<li>我父变成左子的父</li>\n<li>左子变成我的父</li>\n<li>我变成左子的右子</li>\n<li>左子的右子变成我的左子</li>\n<li>(当左子的右子存在时)我变成左子的右子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rightTurn</span><span class=\"params\">(@NotNull Node node)</span></span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node leftSon=node.left;</span><br><span class=\"line\">    Node leftSon_rightSon=leftSon.right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//如果父不为空，判断我是在父的左节点还是右节点</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的左节点上，把我的左子变成父的左子</span></span><br><span class=\"line\">            parent.left=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//我在父的右节点上，把我的左子变成父的右子</span></span><br><span class=\"line\">            parent.right=leftSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    leftSon.parent=parent;</span><br><span class=\"line\">    node.parent=leftSon;</span><br><span class=\"line\">    leftSon.right=node;</span><br><span class=\"line\">    node.left=leftSon_rightSon;</span><br><span class=\"line\">    <span class=\"comment\">//如果左子的右子确实存在的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (leftSon_rightSon!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我变成左子的右子的父</span></span><br><span class=\"line\">        leftSon_rightSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//重新计算深度和平衡因子</span></span><br><span class=\"line\">    node.depth=<span class=\"keyword\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"keyword\">this</span>.getBalance(node);</span><br><span class=\"line\">    leftSon.depth=<span class=\"keyword\">this</span>.getDepth(leftSon);</span><br><span class=\"line\">    leftSon.balance=<span class=\"keyword\">this</span>.getBalance(leftSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><blockquote>\n<p>左旋的操作如下</p>\n<ul>\n<li>我的父变右子的父</li>\n<li>右子变成我的父</li>\n<li>我变成右子的左子</li>\n<li>右子的左子变成我的右子</li>\n<li>(当右子的左子存在时)我变成右子的左子的父</li>\n<li>计算左右节点的深度</li>\n<li>计算深度差</li>\n</ul>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">leftTurn</span><span class=\"params\">(@NotNull Node node)</span></span>&#123;</span><br><span class=\"line\">    Node parent=node.parent;</span><br><span class=\"line\">    Node rightSon=node.right;</span><br><span class=\"line\">    Node rightSon_leftSon=rightSon.left;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.left)&#123;</span><br><span class=\"line\">            parent.left=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node==parent.right)&#123;</span><br><span class=\"line\">            parent.right=rightSon;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rightSon.parent=parent;</span><br><span class=\"line\">    node.parent=rightSon;</span><br><span class=\"line\">    rightSon.left=node;</span><br><span class=\"line\">    node.right=rightSon_leftSon;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rightSon_leftSon!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        rightSon_leftSon.parent=node;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    node.depth=<span class=\"keyword\">this</span>.getDepth(node);</span><br><span class=\"line\">    node.balance=<span class=\"keyword\">this</span>.getBalance(node);</span><br><span class=\"line\">    rightSon.depth=<span class=\"keyword\">this</span>.getDepth(rightSon);</span><br><span class=\"line\">    rightSon.balance=<span class=\"keyword\">this</span>.getBalance(rightSon);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算深度\"><a href=\"#计算深度\" class=\"headerlink\" title=\"计算深度\"></a>计算深度</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算深度*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getDepth</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> depth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left==<span class=\"keyword\">null</span> &amp;&amp; node.right!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right==<span class=\"keyword\">null</span> &amp;&amp; node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node.right!=<span class=\"keyword\">null</span> &amp;&amp; node.left!=<span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">        depth=Math.max(node.left.depth,node.right.depth);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> depth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"计算平衡因子\"><a href=\"#计算平衡因子\" class=\"headerlink\" title=\"计算平衡因子\"></a>计算平衡因子</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**计算左右深度差*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> <span class=\"title\">getBalance</span><span class=\"params\">(Node node)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> leftDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> rightDepth = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.left!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        leftDepth=node.left.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node.right!=<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">        rightDepth=node.right.depth;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         *      左减右</span></span><br><span class=\"line\"><span class=\"comment\">         * 为负数：右边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * 为正数: 左边子树高</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> leftDepth-rightDepth;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"附言\"><a href=\"#附言\" class=\"headerlink\" title=\"附言\"></a>附言</h2><p>如果代码和静态图看不太明白的话，这边推荐几个动画演示的网站(可能需要科学上网)：</p>\n<ul>\n<li><p><a href=\"https://visualgo.net/zh\" rel=\"noopener\" target=\"_blank\">visualgo在线</a></p>\n</li>\n<li><p><a href=\"https://www.cs.usfca.edu/~galles/visualization/Algorithms.html\" rel=\"noopener\" target=\"_blank\">数据结构可视化</a></p>\n</li>\n</ul>\n"},{"title":"Docker下安装mysql并设置用户权限","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-03T07:58:46.000Z","password":null,"summary":null,"_content":"\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](http://cdn.mjava.top/blog/dockerpullmysql.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](http://cdn.mjava.top/blog/dockerimages.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](http://cdn.mjava.top/blog/dockerrun.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](http://cdn.mjava.top/blog/dockerps.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](http://cdn.mjava.top/blog/dockerexec.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](http://cdn.mjava.top/blog/sqlclient.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","source":"_posts/docker/docker-mysql.md","raw":"---\ntitle: Docker下安装mysql并设置用户权限\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Docker\ntags:\n  - Docker\n  - Mysql\n  - Linux\ndate: 2019-09-03 15:58:46\npassword:\nsummary:\n---\n\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](http://cdn.mjava.top/blog/dockerpullmysql.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](http://cdn.mjava.top/blog/dockerimages.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](http://cdn.mjava.top/blog/dockerrun.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](http://cdn.mjava.top/blog/dockerps.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](http://cdn.mjava.top/blog/dockerexec.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](http://cdn.mjava.top/blog/sqlclient.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","slug":"docker/docker-mysql","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx01z000cw2g5fat5po8e","content":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Ubuntu18.04</p>\n</li>\n<li><p>Docker19.03.1</p>\n</li>\n<li><p>Mysql5.7</p>\n</li>\n</ul><h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql:5.7\t\t\t//拉取镜像到本地</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p>\n<p><img src=\"http://cdn.mjava.top/blog/dockerpullmysql.png\" alt=\"拉取镜像\"></p>\n<p>如果显示上面这样，说明已经拉取好了。</p>\n<h3 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker images\t\t//查看本地镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/dockerimages.png\" alt=\"查看本地镜像\"></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d       指定容器运行于后台</li>\n<li>-p       端口映射   主机端口:容器端口</li>\n<li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li>\n<li>-e        容器环境变量</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerrun.png\" alt=\"创建容器\"></p>\n<p>创建好的话会显示一串随机生产的id</p>\n<h4 id=\"查看创建好的容器\"><a href=\"#查看创建好的容器\" class=\"headerlink\" title=\"查看创建好的容器\"></a>查看创建好的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerps.png\" alt=\"查看容器\"></p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it mysql5.7 bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-i        打开STDIN，用于控制台交互</li>\n<li>-t        分配tty设备，该可以支持终端登录</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerexec.png\" alt=\"进入容器\"></p>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p>\n<h3 id=\"创建测试数据库\"><a href=\"#创建测试数据库\" class=\"headerlink\" title=\"创建测试数据库\"></a>创建测试数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> <span class=\"keyword\">test</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建mysql用户\"><a href=\"#创建mysql用户\" class=\"headerlink\" title=\"创建mysql用户\"></a>创建mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'zmh'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zmh'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：”%”表示可以任意ip访问</p>\n<h3 id=\"切换mysql用户\"><a href=\"#切换mysql用户\" class=\"headerlink\" title=\"切换mysql用户\"></a>切换mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'zmh'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zmh'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> test.* <span class=\"keyword\">to</span> <span class=\"string\">'zmh'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<p>退出mysql命令行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接测试\"><a href=\"#客户端连接测试\" class=\"headerlink\" title=\"客户端连接测试\"></a>客户端连接测试</h3><p><img src=\"http://cdn.mjava.top/blog/sqlclient.png\" alt=\"进入容器\"></p>\n<p>成功！</p>\n<h2 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p>\n<ul>\n<li>sudo docker start mysql5.7       启动mysql5.7容器</li>\n<li>sudo docker stop mysql5.7        停止mysql5.7容器</li>\n<li>sudo docker restart mysql5.7   重启mysql5.7容器</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Ubuntu18.04</p>\n</li>\n<li><p>Docker19.03.1</p>\n</li>\n<li><p>Mysql5.7</p>\n</li>\n</ul><h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"拉取镜像\"><a href=\"#拉取镜像\" class=\"headerlink\" title=\"拉取镜像\"></a>拉取镜像</h3><p>  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker pull mysql:5.7\t\t\t//拉取镜像到本地</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<p>注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。</p>\n<p><img src=\"http://cdn.mjava.top/blog/dockerpullmysql.png\" alt=\"拉取镜像\"></p>\n<p>如果显示上面这样，说明已经拉取好了。</p>\n<h3 id=\"查看镜像\"><a href=\"#查看镜像\" class=\"headerlink\" title=\"查看镜像\"></a>查看镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker images\t\t//查看本地镜像</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/dockerimages.png\" alt=\"查看本地镜像\"></p>\n<h3 id=\"创建容器\"><a href=\"#创建容器\" class=\"headerlink\" title=\"创建容器\"></a>创建容器</h3><h4 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-d       指定容器运行于后台</li>\n<li>-p       端口映射   主机端口:容器端口</li>\n<li>–name    自定义容器名字，方便记忆，不设置的话会随机生产</li>\n<li>-e        容器环境变量</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerrun.png\" alt=\"创建容器\"></p>\n<p>创建好的话会显示一串随机生产的id</p>\n<h4 id=\"查看创建好的容器\"><a href=\"#查看创建好的容器\" class=\"headerlink\" title=\"查看创建好的容器\"></a>查看创建好的容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker ps -a</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-a        显示所有创建好的容器，如果不加只显示正在运行的容器</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerps.png\" alt=\"查看容器\"></p>\n<h2 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h2><h3 id=\"进入容器\"><a href=\"#进入容器\" class=\"headerlink\" title=\"进入容器\"></a>进入容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo docker exec -it mysql5.7 bash</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>-i        打开STDIN，用于控制台交互</li>\n<li>-t        分配tty设备，该可以支持终端登录</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/dockerexec.png\" alt=\"进入容器\"></p>\n<h3 id=\"登录mysql\"><a href=\"#登录mysql\" class=\"headerlink\" title=\"登录mysql\"></a>登录mysql</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p</span><br></pre></td></tr></table></figure>\n\n<p>注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数</p>\n<h3 id=\"创建测试数据库\"><a href=\"#创建测试数据库\" class=\"headerlink\" title=\"创建测试数据库\"></a>创建测试数据库</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">database</span> <span class=\"keyword\">test</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建mysql用户\"><a href=\"#创建mysql用户\" class=\"headerlink\" title=\"创建mysql用户\"></a>创建mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">create</span> <span class=\"keyword\">user</span> <span class=\"string\">'zmh'</span>@<span class=\"string\">'%'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zmh'</span>;</span><br></pre></td></tr></table></figure>\n\n<p>注：”%”表示可以任意ip访问</p>\n<h3 id=\"切换mysql用户\"><a href=\"#切换mysql用户\" class=\"headerlink\" title=\"切换mysql用户\"></a>切换mysql用户</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">user</span> <span class=\"string\">'zmh'</span> <span class=\"keyword\">identified</span> <span class=\"keyword\">by</span> <span class=\"string\">'zmh'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>授权test库的所有表的所有权限给zmh用户</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">grant</span> <span class=\"keyword\">all</span> <span class=\"keyword\">privileges</span> <span class=\"keyword\">on</span> test.* <span class=\"keyword\">to</span> <span class=\"string\">'zmh'</span>@<span class=\"string\">'%'</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"刷新权限\"><a href=\"#刷新权限\" class=\"headerlink\" title=\"刷新权限\"></a>刷新权限</h3><figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">flush</span> <span class=\"keyword\">privileges</span>;</span><br></pre></td></tr></table></figure>\n\n<p>退出mysql命令行</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"客户端连接测试\"><a href=\"#客户端连接测试\" class=\"headerlink\" title=\"客户端连接测试\"></a>客户端连接测试</h3><p><img src=\"http://cdn.mjava.top/blog/sqlclient.png\" alt=\"进入容器\"></p>\n<p>成功！</p>\n<h2 id=\"附加\"><a href=\"#附加\" class=\"headerlink\" title=\"附加\"></a>附加</h2><p>如果要重启mysql的话，不用进容器里面，直接重启容器就可以</p>\n<ul>\n<li>sudo docker start mysql5.7       启动mysql5.7容器</li>\n<li>sudo docker stop mysql5.7        停止mysql5.7容器</li>\n<li>sudo docker restart mysql5.7   重启mysql5.7容器</li>\n</ul>\n"},{"title":"Docker迁移根目录导致mysql权限问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-20T07:04:16.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 问题描述\n\n　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：\n\n迁移根目录我看的是这个文章：[docker的存储目录迁移](https://www.cnblogs.com/insist-forever/p/11739207.html),　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;\n\n文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can't create/write to file '/tmp/ibTCv7Rw' (Errcode: 13 - Permission denied)\n\n![](http://cdn.mjava.top/20191220143818.png)\n\n\n\n期间按照网上的方法：说docker容器启动是添加--privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font>\n\n> 其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: '5.7.27'  socket: '/var/run/mysqld/mysqld.sock' \n>\n> ![](http://cdn.mjava.top/20191220144523.png)\n\n看来还是得从根源上解决问题啊！\n\n## 我的解决办法\n\n​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n\n![](http://cdn.mjava.top/20191220144841.png)\n\n于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；\n\n复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．![](http://cdn.mjava.top/20191220145849.png)\n\n","source":"_posts/docker/docker-transfer-pit.md","raw":"---\ntitle: Docker迁移根目录导致mysql权限问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-20 15:04:16\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Mysql\n- Pit\n- Docker\n- Linux\ncategories:\n- Docker\n---\n\n## 问题描述\n\n　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：\n\n迁移根目录我看的是这个文章：[docker的存储目录迁移](https://www.cnblogs.com/insist-forever/p/11739207.html),　不过迁移的时候我没有使用<font color=orange>rsync</font>这个命令，而是使用<font color=orange>cp -R</font>;\n\n文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can't create/write to file '/tmp/ibTCv7Rw' (Errcode: 13 - Permission denied)\n\n![](http://cdn.mjava.top/20191220143818.png)\n\n\n\n期间按照网上的方法：说docker容器启动是添加--privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=orange>都没用！！！！！！</font>\n\n> 其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: '5.7.27'  socket: '/var/run/mysqld/mysqld.sock' \n>\n> ![](http://cdn.mjava.top/20191220144523.png)\n\n看来还是得从根源上解决问题啊！\n\n## 我的解决办法\n\n​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:\n\n![](http://cdn.mjava.top/20191220144841.png)\n\n于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=orange>cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；\n\n复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．![](http://cdn.mjava.top/20191220145849.png)\n\n","slug":"docker/docker-transfer-pit","published":1,"updated":"2019-12-20T07:05:47.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx020000dw2g5fqnjn5jb","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p><p>迁移根目录我看的是这个文章：<a href=\"https://www.cnblogs.com/insist-forever/p/11739207.html\" rel=\"noopener\" target=\"_blank\">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color=\"orange\">rsync</font>这个命令，而是使用<font color=\"orange\">cp -R</font>;</p><a id=\"more\"></a>\n\n<p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create/write to file ‘/tmp/ibTCv7Rw’ (Errcode: 13 - Permission denied)</p>\n<p><img src=\"http://cdn.mjava.top/20191220143818.png\" alt></p>\n<p>期间按照网上的方法：说docker容器启动是添加–privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=\"orange\">都没用！！！！！！</font></p>\n<blockquote>\n<p>其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘/var/run/mysqld/mysqld.sock’ </p>\n<p><img src=\"http://cdn.mjava.top/20191220144523.png\" alt></p>\n</blockquote>\n<p>看来还是得从根源上解决问题啊！</p>\n<h2 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h2><p>​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:</p>\n<p><img src=\"http://cdn.mjava.top/20191220144841.png\" alt></p>\n<p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=\"orange\">cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；</p>\n<p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．<img src=\"http://cdn.mjava.top/20191220145849.png\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>　　最近由于公司服务器硬盘老是爆满，导致经常要清硬盘空间．最后发现/var/lib/docker目录占了25G,以前分kvm分区的时候，他们分了两个区：根目录＂/＂,和＂/home＂目录，发现home目录使用几乎为零，于是准备迁移Docker的根目录：</p><p>迁移根目录我看的是这个文章：<a href=\"https://www.cnblogs.com/insist-forever/p/11739207.html\" rel=\"noopener\" target=\"_blank\">docker的存储目录迁移</a>,　不过迁移的时候我没有使用<font color=\"orange\">rsync</font>这个命令，而是使用<font color=\"orange\">cp -R</font>;</p>","more":"\n\n<p>文件复制过去后，按照教程，重新启动docker服务，可是其中mysql容器跑不起来了，报mysqld: Can’t create/write to file ‘/tmp/ibTCv7Rw’ (Errcode: 13 - Permission denied)</p>\n<p><img src=\"http://cdn.mjava.top/20191220143818.png\" alt></p>\n<p>期间按照网上的方法：说docker容器启动是添加–privileged=true,设置/tmp目录的权限，关闭selinux，这些方法<font color=\"orange\">都没用！！！！！！</font></p>\n<blockquote>\n<p>其中设置/tmp文件权限这个方法，我把里面的/tmp文件挂载出来后，设置了权限，报这个的问题是解决了，可是又出现了新的问题，又报Version: ‘5.7.27’  socket: ‘/var/run/mysqld/mysqld.sock’ </p>\n<p><img src=\"http://cdn.mjava.top/20191220144523.png\" alt></p>\n</blockquote>\n<p>看来还是得从根源上解决问题啊！</p>\n<h2 id=\"我的解决办法\"><a href=\"#我的解决办法\" class=\"headerlink\" title=\"我的解决办法\"></a>我的解决办法</h2><p>​        我想，既然是权限问题，那肯定是复制文件的时候权限丢失了，于是查了下cp命令保持权限的命令（cp -p）:</p>\n<p><img src=\"http://cdn.mjava.top/20191220144841.png\" alt></p>\n<p>于是我又重新关闭的docker服务，然后删除了所有复制到home文件的目录，重新用<font color=\"orange\">cp -p -R /var/lib/docker /home/docker/lib/</font>来重新复制了文件；</p>\n<p>复制后，重启docker服务，启动docker容器，ok,一切正常；用docker info查看，看到已成功转移到/home下．<img src=\"http://cdn.mjava.top/20191220145849.png\" alt></p>\n"},{"title":"设计模式系列-抽象工厂模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-16T13:17:23.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![](http://cdn.mjava.top/20191216212929.jpg)\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬\n\n## 突然开始的正文\n\n紧接着上一章的[工厂方法模式](https://mjava.top/gof/gof-factory-method)，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；\n\n\n\n话不多说，看两个模式的类图你就明白了：\n\n### 原本的工厂方法模式类图：\n\n![工厂方法模式](http://cdn.mjava.top/20191216202720.png)\n\n### 升级后的抽象工厂模式：\n\n![抽象工厂模式](http://cdn.mjava.top/20191216203329.png)\n\n可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；\n\n## 好色的朋友买车了\n\n上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：\n\n![](http://cdn.mjava.top/20191216205803.png)\n\n可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；\n\n## 措不及防的结束了\n\n![](http://cdn.mjava.top/20191216205427.gif)\n\n不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；","source":"_posts/gof/gof-abstract-factory.md","raw":"---\ntitle: 设计模式系列-抽象工厂模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-16 21:17:23\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 抽象工厂模式\ncategories:\n- GOF\n---\n\n![](http://cdn.mjava.top/20191216212929.jpg)\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬\n\n## 突然开始的正文\n\n紧接着上一章的[工厂方法模式](https://mjava.top/gof/gof-factory-method)，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=orange>AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=orange>AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=orange>工厂方法模式</font>升级到了<font color=orange>抽象工厂模式</font>；\n\n\n\n话不多说，看两个模式的类图你就明白了：\n\n### 原本的工厂方法模式类图：\n\n![工厂方法模式](http://cdn.mjava.top/20191216202720.png)\n\n### 升级后的抽象工厂模式：\n\n![抽象工厂模式](http://cdn.mjava.top/20191216203329.png)\n\n可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=orange>抽象工厂模式</font>的产品减到<font color=orange>只有一个</font>的时候，他就又回到了<font color=orange>工厂方法模式</font>；\n\n## 好色的朋友买车了\n\n上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：\n\n![](http://cdn.mjava.top/20191216205803.png)\n\n可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；\n\n## 措不及防的结束了\n\n![](http://cdn.mjava.top/20191216205427.gif)\n\n不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=orange>品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=orange>业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=orange>业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；","slug":"gof/gof-abstract-factory","published":1,"updated":"2019-12-16T13:32:22.120Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx022000hw2g5ktrtgyzm","content":"<p><img src=\"http://cdn.mjava.top/20191216212929.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"突然开始的正文\"><a href=\"#突然开始的正文\" class=\"headerlink\" title=\"突然开始的正文\"></a>突然开始的正文</h2><p>紧接着上一章的<a href=\"https://mjava.top/gof/gof-factory-method\">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=\"orange\">AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=\"orange\">AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=\"orange\">工厂方法模式</font>升级到了<font color=\"orange\">抽象工厂模式</font>；</p><a id=\"more\"></a>\n\n\n<p>话不多说，看两个模式的类图你就明白了：</p>\n<h3 id=\"原本的工厂方法模式类图：\"><a href=\"#原本的工厂方法模式类图：\" class=\"headerlink\" title=\"原本的工厂方法模式类图：\"></a>原本的工厂方法模式类图：</h3><p><img src=\"http://cdn.mjava.top/20191216202720.png\" alt=\"工厂方法模式\"></p>\n<h3 id=\"升级后的抽象工厂模式：\"><a href=\"#升级后的抽象工厂模式：\" class=\"headerlink\" title=\"升级后的抽象工厂模式：\"></a>升级后的抽象工厂模式：</h3><p><img src=\"http://cdn.mjava.top/20191216203329.png\" alt=\"抽象工厂模式\"></p>\n<p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=\"orange\">抽象工厂模式</font>的产品减到<font color=\"orange\">只有一个</font>的时候，他就又回到了<font color=\"orange\">工厂方法模式</font>；</p>\n<h2 id=\"好色的朋友买车了\"><a href=\"#好色的朋友买车了\" class=\"headerlink\" title=\"好色的朋友买车了\"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191216205803.png\" alt></p>\n<p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p>\n<h2 id=\"措不及防的结束了\"><a href=\"#措不及防的结束了\" class=\"headerlink\" title=\"措不及防的结束了\"></a>措不及防的结束了</h2><p><img src=\"http://cdn.mjava.top/20191216205427.gif\" alt></p>\n<p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=\"orange\">品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=\"orange\">业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=\"orange\">业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191216212929.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"突然开始的正文\"><a href=\"#突然开始的正文\" class=\"headerlink\" title=\"突然开始的正文\"></a>突然开始的正文</h2><p>紧接着上一章的<a href=\"https://mjava.top/gof/gof-factory-method\">工厂方法模式</a>，其实抽象工厂的概念和工厂方法的概念都是差不多的，抽象工厂模式是对工厂方法模式的更高级，比如上次我们说的那个汽车工厂总部类<font color=\"orange\">AllCarFactory</font>，本来他只定义了生产汽车这个方法，下面的各个品牌的汽车厂也只能生产这个汽车，现在由于市场需求，需要生产摩托车，然后<font color=\"orange\">AllCarFactory</font>定义了一个生产摩托车的接口，这样这个接口下面的汽车厂就可以生产摩托车了．就在这时他们的生产模式也从<font color=\"orange\">工厂方法模式</font>升级到了<font color=\"orange\">抽象工厂模式</font>；</p>","more":"\n\n\n<p>话不多说，看两个模式的类图你就明白了：</p>\n<h3 id=\"原本的工厂方法模式类图：\"><a href=\"#原本的工厂方法模式类图：\" class=\"headerlink\" title=\"原本的工厂方法模式类图：\"></a>原本的工厂方法模式类图：</h3><p><img src=\"http://cdn.mjava.top/20191216202720.png\" alt=\"工厂方法模式\"></p>\n<h3 id=\"升级后的抽象工厂模式：\"><a href=\"#升级后的抽象工厂模式：\" class=\"headerlink\" title=\"升级后的抽象工厂模式：\"></a>升级后的抽象工厂模式：</h3><p><img src=\"http://cdn.mjava.top/20191216203329.png\" alt=\"抽象工厂模式\"></p>\n<p>可以看到，抽象工厂只是比工厂方法模式多生产了一个产品，当<font color=\"orange\">抽象工厂模式</font>的产品减到<font color=\"orange\">只有一个</font>的时候，他就又回到了<font color=\"orange\">工厂方法模式</font>；</p>\n<h2 id=\"好色的朋友买车了\"><a href=\"#好色的朋友买车了\" class=\"headerlink\" title=\"好色的朋友买车了\"></a>好色的朋友买车了</h2><p>上次我朋友看见我买车之后，得知是个小姐姐带我区买车的，于是他叫我联系了下那个小姐姐，说他也要买车，点名要叫小姐姐带他去，由于资金有限，他只卖了奔驰和五菱系列的产品，没有买莱斯莱斯的；看看他是怎么买的吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191216205803.png\" alt></p>\n<p>可以看到，由于要在一个工厂买两个东西，他是先找到了工厂，然后再一件一件的从工厂买．我们上次是一个工厂买一件东西，所以是直接去工厂买的；</p>\n<h2 id=\"措不及防的结束了\"><a href=\"#措不及防的结束了\" class=\"headerlink\" title=\"措不及防的结束了\"></a>措不及防的结束了</h2><p><img src=\"http://cdn.mjava.top/20191216205427.gif\" alt></p>\n<p>不是我不想讲，而是抽象工厂就是这样的东西．从上面可以看出，抽象工厂每当增加一个产品时，后面相关的的<font color=\"orange\">品牌工厂</font>也全部要实现他这个产品，这就违背了开闭原则了．所以，在实际设计中，一个<font color=\"orange\">业务场景是稳定的</font>,用抽象工厂是比较好的，因为一次设计,后面就不用改了,这样就不会违反开闭原则了．但是如果一个<font color=\"orange\">业务场景是稳定的</font>是不稳定的，那么就不适合使用这个模式了，因为后期需要多次修改，这就违反了开闭原则，同时也及其难维护，应为你不知道修改了代码，到底会影响哪些功能；</p>\n"},{"title":"设计模式之建造者模式【用好玩的故事讲清楚设计模式】","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-26T22:50:31.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![](http://cdn.mjava.top/20191226220204.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:[https://github.com/z573419235/GofDemo](https://github.com/z573419235/GofDemo)\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;\n\n建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成\n\n## 土豪朋友开车厂\n\n​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n\n![](http://cdn.mjava.top/20191226171943.jpg)\n\n一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:\n\n```java\n/**\n * 汽车 产品类 定义汽车的构成\n * */\n@Data\npublic class Car {\n    /**\n     * 方向盘\n     * */\n    private String steering;\n    /**\n     * 发动机\n     * */\n    private String engine;\n    /**\n     * 车架\n     * */\n    private String frame;\n    /**\n     * 轮胎\n     * */\n    private String tire;\n    /**\n     * 展示一下汽车配置\n     * */\n    public String show() {\n        return \"{\" +\n                \"steering='\" + steering + '\\'' +\n                \", engine='\" + engine + '\\'' +\n                \", frame='\" + frame + '\\'' +\n                \", tire='\" + tire + '\\'' +\n                '}';\n    }\n}\n```\n\n果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈---土豪朋友尴尬而不失礼貌的笑着!\n\n![](http://cdn.mjava.top/20191226172548.jpg)\n\n算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;\n\n他给我介绍了一下他的两个专家:\n\n```java\n/**\n * 宝马车建造者\n * */\npublic class BMWBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"宝马的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"宝马的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"宝马的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"宝马的轮胎\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰车建造者\n * */\npublic class BenzBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"奔驰的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"奔驰的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"奔驰的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"奔驰的轮胎\");\n    }\n}\n```\n\n<font color=orange>他们两个都遵循下面这个`AbstractBuild`汽车的建造规则:</font>\n\n```java\n/**\n * 抽象建造者 定义造车的方法\n * */\nabstract class AbstractBuild {\n    /**\n     * 造的产品是车\n     * */\n    protected Car car=new Car();\n    /**\n     * 造发动机\n     * */\n    abstract void buildEngine();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildSteering();\n    /**\n     * 造车架\n     * */\n    abstract void buildFrame();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildTire();\n    /**\n     * 得到造好的车\n     * */\n    public Car getCar(){\n        return this.car;\n    }\n}\n```\n\n土豪朋友还跟我讲了是怎么指挥他们造车的:\n\n```java\n/**\n * 所有的建造者要听这个包工头的话,叫你造什么就造什么\n * */\npublic class Boss {\n\n    public static Car builderCar(AbstractBuild build){\n        build.buildEngine();\n        build.buildFrame();\n        build.buildSteering();\n        build.buildTire();\n        return build.getCar();\n    }\n}\n```\n\n经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!\n\n![](http://cdn.mjava.top/20191226174032.gif)\n\n说完,还向我展示了汽车是怎样造成的...........\n\n![](http://cdn.mjava.top/20191226174235.png)\n\n## 总结\n\n其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;\n\n> 建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了","source":"_posts/gof/gof-builder.md","raw":"---\ntitle: 设计模式之建造者模式【用好玩的故事讲清楚设计模式】\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-27 06:50:31\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 建造者模式\ncategories:\n- GOF\n---\n\n\n\n![](http://cdn.mjava.top/20191226220204.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:[https://github.com/z573419235/GofDemo](https://github.com/z573419235/GofDemo)\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n建造者模式用于实例化一个比较复杂的实体类,<font color=orange>当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=orange>部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;\n\n建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成\n\n## 土豪朋友开车厂\n\n​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.\n\n![](http://cdn.mjava.top/20191226171943.jpg)\n\n一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:\n\n```java\n/**\n * 汽车 产品类 定义汽车的构成\n * */\n@Data\npublic class Car {\n    /**\n     * 方向盘\n     * */\n    private String steering;\n    /**\n     * 发动机\n     * */\n    private String engine;\n    /**\n     * 车架\n     * */\n    private String frame;\n    /**\n     * 轮胎\n     * */\n    private String tire;\n    /**\n     * 展示一下汽车配置\n     * */\n    public String show() {\n        return \"{\" +\n                \"steering='\" + steering + '\\'' +\n                \", engine='\" + engine + '\\'' +\n                \", frame='\" + frame + '\\'' +\n                \", tire='\" + tire + '\\'' +\n                '}';\n    }\n}\n```\n\n果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈---土豪朋友尴尬而不失礼貌的笑着!\n\n![](http://cdn.mjava.top/20191226172548.jpg)\n\n算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=orange>一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;\n\n他给我介绍了一下他的两个专家:\n\n```java\n/**\n * 宝马车建造者\n * */\npublic class BMWBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"宝马的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"宝马的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"宝马的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"宝马的轮胎\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰车建造者\n * */\npublic class BenzBuilder extends AbstractBuild {\n    @Override\n    void buildEngine() {\n        car.setEngine(\"奔驰的发动机\");\n    }\n\n    @Override\n    void buildSteering() {\n        car.setSteering(\"奔驰的方向盘\");\n    }\n\n    @Override\n    void buildFrame() {\n        car.setFrame(\"奔驰的车架\");\n    }\n\n    @Override\n    void buildTire() {\n        car.setTire(\"奔驰的轮胎\");\n    }\n}\n```\n\n<font color=orange>他们两个都遵循下面这个`AbstractBuild`汽车的建造规则:</font>\n\n```java\n/**\n * 抽象建造者 定义造车的方法\n * */\nabstract class AbstractBuild {\n    /**\n     * 造的产品是车\n     * */\n    protected Car car=new Car();\n    /**\n     * 造发动机\n     * */\n    abstract void buildEngine();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildSteering();\n    /**\n     * 造车架\n     * */\n    abstract void buildFrame();\n    /**\n     * 造轮胎\n     * */\n    abstract void buildTire();\n    /**\n     * 得到造好的车\n     * */\n    public Car getCar(){\n        return this.car;\n    }\n}\n```\n\n土豪朋友还跟我讲了是怎么指挥他们造车的:\n\n```java\n/**\n * 所有的建造者要听这个包工头的话,叫你造什么就造什么\n * */\npublic class Boss {\n\n    public static Car builderCar(AbstractBuild build){\n        build.buildEngine();\n        build.buildFrame();\n        build.buildSteering();\n        build.buildTire();\n        return build.getCar();\n    }\n}\n```\n\n经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!\n\n![](http://cdn.mjava.top/20191226174032.gif)\n\n说完,还向我展示了汽车是怎样造成的...........\n\n![](http://cdn.mjava.top/20191226174235.png)\n\n## 总结\n\n其实建造者模式和<font color=orange>工厂模式</font>还是挺像的,<font color=orange>建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=orange>控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;\n\n> 建造者模式如果和<font color=orange>模板方法模式</font>搭配起来,<font color=orange>建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了","slug":"gof/gof-builder","published":1,"updated":"2019-12-26T22:52:41.788Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx023000iw2g5umarutee","content":"<p><img src=\"http://cdn.mjava.top/20191226220204.jpg\" alt></p><blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color=\"orange\">当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=\"orange\">部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p><a id=\"more\"></a>\n\n\n<p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p>\n<h2 id=\"土豪朋友开车厂\"><a href=\"#土豪朋友开车厂\" class=\"headerlink\" title=\"土豪朋友开车厂\"></a>土豪朋友开车厂</h2><p>​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.</p>\n<p><img src=\"http://cdn.mjava.top/20191226171943.jpg\" alt></p>\n<p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车 产品类 定义汽车的构成</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方向盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String steering;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String engine;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String frame;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tire;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示一下汽车配置</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"steering='\"</span> + steering + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", engine='\"</span> + engine + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", frame='\"</span> + frame + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", tire='\"</span> + tire + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p>\n<p><img src=\"http://cdn.mjava.top/20191226172548.jpg\" alt></p>\n<p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=\"orange\">一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p>\n<p>他给我介绍了一下他的两个专家:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宝马车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">\"宝马的发动机\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">\"宝马的方向盘\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">\"宝马的车架\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">\"宝马的轮胎\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">\"奔驰的发动机\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">\"奔驰的方向盘\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">\"奔驰的车架\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">\"奔驰的轮胎\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"orange\">他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象建造者 定义造车的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造的产品是车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Car car=<span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到造好的车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">builderCar</span><span class=\"params\">(AbstractBuild build)</span></span>&#123;</span><br><span class=\"line\">        build.buildEngine();</span><br><span class=\"line\">        build.buildFrame();</span><br><span class=\"line\">        build.buildSteering();</span><br><span class=\"line\">        build.buildTire();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build.getCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p>\n<p><img src=\"http://cdn.mjava.top/20191226174032.gif\" alt></p>\n<p>说完,还向我展示了汽车是怎样造成的………..</p>\n<p><img src=\"http://cdn.mjava.top/20191226174235.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实建造者模式和<font color=\"orange\">工厂模式</font>还是挺像的,<font color=\"orange\">建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=\"orange\">控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p>\n<blockquote>\n<p>建造者模式如果和<font color=\"orange\">模板方法模式</font>搭配起来,<font color=\"orange\">建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p>\n</blockquote>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191226220204.jpg\" alt></p><blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>建造者模式用于实例化一个比较复杂的实体类,<font color=\"orange\">当你实例化一个类时,它的构造参数比较多时,就可以用建造者模式来简化实例化过程</font>;前几篇工厂模式的文章我们说道买车,那只是简单的区工厂买车,我们不关系工厂是怎么造出来的.可是实际工厂造一辆车需要有方向盘、发动机、车架、轮胎等部件,而且不同品牌的车的部件都是不同的,<font color=\"orange\">部件虽然不同,但是造车的方式基本都是差不多的步骤</font>,这时候就可以用建造者模式来造一辆车了;</p>","more":"\n\n\n<p>建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成</p>\n<h2 id=\"土豪朋友开车厂\"><a href=\"#土豪朋友开车厂\" class=\"headerlink\" title=\"土豪朋友开车厂\"></a>土豪朋友开车厂</h2><p>​        土豪朋友上次买了车之后,发现造车卖还挺赚钱,于是决定涉足汽车领域,真是很有商业头脑啊,不愧是我的玉树临风,疯言疯语,语速惊人,人模狗样的土豪朋友啊.</p>\n<p><img src=\"http://cdn.mjava.top/20191226171943.jpg\" alt></p>\n<p>一天,前去向他讨教汽车的知识,他给我讲了汽车的大致构成:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车 产品类 定义汽车的构成</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方向盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String steering;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String engine;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String frame;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String tire;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 展示一下汽车配置</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">show</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"steering='\"</span> + steering + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", engine='\"</span> + engine + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", frame='\"</span> + frame + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", tire='\"</span> + tire + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>果真是大致啊,忽悠我不懂车是吧,就给我讲4个东西,这谁不知道啊,哼!土豪朋友忙解释到:这不是为了通俗易懂嘛!!哈哈哈—土豪朋友尴尬而不失礼貌的笑着!</p>\n<p><img src=\"http://cdn.mjava.top/20191226172548.jpg\" alt></p>\n<p>算了算了,不和你计较了,你再和我讲下你们车厂的造车模式吧!!他说,一开始他造车自己累的半死,什么都要亲力亲为,后来招了两个专家,<font color=\"orange\">一个负责宝马的制造,一个负责奔驰的制造</font>,我现在要什么车,只要指挥谁造车就好了.轻松的很;</p>\n<p>他给我介绍了一下他的两个专家:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 宝马车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BMWBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">\"宝马的发动机\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">\"宝马的方向盘\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">\"宝马的车架\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">\"宝马的轮胎\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车建造者</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzBuilder</span> <span class=\"keyword\">extends</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setEngine(<span class=\"string\">\"奔驰的发动机\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setSteering(<span class=\"string\">\"奔驰的方向盘\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setFrame(<span class=\"string\">\"奔驰的车架\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        car.setTire(<span class=\"string\">\"奔驰的轮胎\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><font color=\"orange\">他们两个都遵循下面这个<code>AbstractBuild</code>汽车的建造规则:</font></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 抽象建造者 定义造车的方法</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AbstractBuild</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造的产品是车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Car car=<span class=\"keyword\">new</span> Car();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造发动机</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildEngine</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildSteering</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造车架</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildFrame</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 造轮胎</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">buildTire</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到造好的车</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.car;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>土豪朋友还跟我讲了是怎么指挥他们造车的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 所有的建造者要听这个包工头的话,叫你造什么就造什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Boss</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">builderCar</span><span class=\"params\">(AbstractBuild build)</span></span>&#123;</span><br><span class=\"line\">        build.buildEngine();</span><br><span class=\"line\">        build.buildFrame();</span><br><span class=\"line\">        build.buildSteering();</span><br><span class=\"line\">        build.buildTire();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> build.getCar();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>经过他这一翻显摆之后,感觉虽然长的人摸狗样的,干起事来还真是一套一套的,哈哈哈哈!!</p>\n<p><img src=\"http://cdn.mjava.top/20191226174032.gif\" alt></p>\n<p>说完,还向我展示了汽车是怎样造成的………..</p>\n<p><img src=\"http://cdn.mjava.top/20191226174235.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>其实建造者模式和<font color=\"orange\">工厂模式</font>还是挺像的,<font color=\"orange\">建造者模式里的建造者就相当于工厂模式里的工厂</font>,不过建造者的核心是可以<font color=\"orange\">控制顺序</font>,比如上面的土豪老板可以控制建造工人的建造顺序,可以控制他们是先造轮胎还是先造发动机,这才是建造者模式意义;</p>\n<blockquote>\n<p>建造者模式如果和<font color=\"orange\">模板方法模式</font>搭配起来,<font color=\"orange\">建造工人那个类封装一个模板方法</font>开放给老板,老板就可以直接控制这个类就可以了,那这就和工厂模式没什么两样了</p>\n</blockquote>\n"},{"title":"设计模式系列-工厂模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-15T09:25:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![](http://cdn.mjava.top/gof-factory-method.jpg)\n\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 前言\n\n工厂模式有一下三种\n\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n\n其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；\n\n## 简单工厂模式\n\n简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：\n\n当我要买车的时候，我选了这两种车．\n\n```java\n/**\n * 创建一个汽车接口\n * */\npublic interface Car {\n    /**\n     * 汽车能动\n     * */\n    void run();\n}\n```\n\n```java\n/**\n * 奔驰车\n * */\npublic class Benz implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车\n * */\npublic class Wuling implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n\n```\n\n选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？\n\n```java\n//我要奔驰车\nBenz　myCar=new Benz();\n```\n\n如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！\n\n![](http://cdn.mjava.top/20191215162632.gif)\n\n这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！\n\n```java\n/**\n * 汽车工厂\n *\n * 静态工厂\n *\n * 简单工厂\n * */\npublic class CarFactory {\n    public static Car getCar(String type){\n        if(\"我要五菱神车\".equals(type)){\n            return new Wuling();\n        }\n        if (\"我要大奔驰\".equals(type)){\n            return new Benz();\n        }\n        return null;\n    }\n}\n```\n\n找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；\n\n```java\n/**\n * 买车\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //跟车厂说一声我要五菱神车\n        Car wuling=CarFactory.getCar(\"我要五菱神车\");\n        //跟车厂说一声我要大奔驰\n        Car Benz=CarFactory.getCar(\"我要大奔驰\");\n\n        //开着五菱神车去兜兜风\n        wuling.run();\n        //开着大奔去兜兜风\n        Benz.run();\n    }\n}\n\n//五菱神车开动了\n//大奔开动了\n```\n\n这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～\n\n![](http://cdn.mjava.top/20191215163319.jpg)\n\n## 工厂方法模式\n\n上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．\n\n![](http://cdn.mjava.top/20191215163907.gif)\n\n找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．\n\n\n\n于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：\n\n```java\n/**\n * 他们有个汽车工厂总部，用来定义车厂该干什么\n * */\npublic interface AllCarFactory {\n    /**\n    * 生产汽车\n    */\n    Car getCar();\n}\n```\n\n```java\n/**\n*　有个汽车规则，用来定义汽车能干什么\n*/\npublic interface Car {\n    /**\n    *　汽车能跑\n    */\n    void run();\n}\n```\n\n```java\n/**\n * 劳斯莱斯汽车\n * */\npublic class RollsRoyce implements Car {\n    /**\n    * 劳斯莱斯能跑起来\n    */\n    @Override\n    public void run() {\n        System.out.println(\"劳斯莱斯开起来了！！\");\n    }\n}\n\n```\n\n```java\n/**\n * 劳斯莱斯汽车工厂\n * */\npublic class RollsRoyceFactory implements AllCarFactory {\n    /**\n    * 生产一辆劳斯莱斯\n    */\n    @Override\n    public Car getCar() {\n        return new RollsRoyce();\n    }\n}\n```\n\n找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：\n\n```java\n/**\n* 五菱神车\n*/\npublic class Wuling implements Car {\n    /**\n    * 五菱神车能飙车\n    */\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车工厂\n * */\npublic class WulingFactory implements AllCarFactory {\n    /**\n    * 生产一辆五菱神车\n    */\n    @Override\n    public Car getCar() {\n        return new Wuling();\n    }\n}\n```\n\n再区看看奔驰车厂：\n\n```java\n/**\n* 奔驰汽车\n*/\npublic class Benz implements Car {\n    /**\n    * 奔驰汽车能跑\n    */\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰汽车工厂\n * */\npublic class BenzFactory implements AllCarFactory {\n    /**\n    * 生产一辆奔驰汽车\n    */\n    @Override\n    public Car getCar() {\n        return new Benz();\n    }\n}\n```\n\n看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：\n\n![](http://cdn.mjava.top/20191215170620.jpg)\n\n看看我买车的过程：\n\n```java\n/**\n * 土豪买车记\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //去五菱车厂买车\n        Car wuling=new WulingFactory().getCar();\n        //去奔驰车厂买车\n        Car benz=new BenzFactory().getCar();\n        //去劳斯莱斯车厂买车\n        Car rollsRoyce=new RollsRoyceFactory().getCar();\n        \n        //开着三辆车去兜兜风\n        wuling.run();\n        benz.run();\n        rollsRoyce.run();\n    }\n}\n\n\n//五菱神车开动了\n//大奔开动了\n//劳斯莱斯开起来了！！\n```\n\n\n\n## 总结\n\n​\t买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=orange>术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\n​\t不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；","source":"_posts/gof/gof-factory-method.md","raw":"---\ntitle: 设计模式系列-工厂模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-15 17:25:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 工厂方法模式\ncategories:\n- GOF\n---\n\n![](http://cdn.mjava.top/gof-factory-method.jpg)\n\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n## 前言\n\n工厂模式有一下三种\n\n- 简单工厂模式\n- 工厂方法模式\n- 抽象工厂模式\n\n其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；\n\n## 简单工厂模式\n\n简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：\n\n当我要买车的时候，我选了这两种车．\n\n```java\n/**\n * 创建一个汽车接口\n * */\npublic interface Car {\n    /**\n     * 汽车能动\n     * */\n    void run();\n}\n```\n\n```java\n/**\n * 奔驰车\n * */\npublic class Benz implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车\n * */\npublic class Wuling implements Car {\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n\n```\n\n选是选好了，可是要怎么得到呢？是不是下意识的<font color=orange>new</font>一个出来？\n\n```java\n//我要奔驰车\nBenz　myCar=new Benz();\n```\n\n如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=orange>new</font>出来的嘛！！！！！\n\n![](http://cdn.mjava.top/20191215162632.gif)\n\n这种事情当然是交给工厂去做嘛，叫工厂去<font color=orange>new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！\n\n```java\n/**\n * 汽车工厂\n *\n * 静态工厂\n *\n * 简单工厂\n * */\npublic class CarFactory {\n    public static Car getCar(String type){\n        if(\"我要五菱神车\".equals(type)){\n            return new Wuling();\n        }\n        if (\"我要大奔驰\".equals(type)){\n            return new Benz();\n        }\n        return null;\n    }\n}\n```\n\n找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；\n\n```java\n/**\n * 买车\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //跟车厂说一声我要五菱神车\n        Car wuling=CarFactory.getCar(\"我要五菱神车\");\n        //跟车厂说一声我要大奔驰\n        Car Benz=CarFactory.getCar(\"我要大奔驰\");\n\n        //开着五菱神车去兜兜风\n        wuling.run();\n        //开着大奔去兜兜风\n        Benz.run();\n    }\n}\n\n//五菱神车开动了\n//大奔开动了\n```\n\n这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～\n\n![](http://cdn.mjava.top/20191215163319.jpg)\n\n## 工厂方法模式\n\n上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．\n\n![](http://cdn.mjava.top/20191215163907.gif)\n\n找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．\n\n\n\n于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：\n\n```java\n/**\n * 他们有个汽车工厂总部，用来定义车厂该干什么\n * */\npublic interface AllCarFactory {\n    /**\n    * 生产汽车\n    */\n    Car getCar();\n}\n```\n\n```java\n/**\n*　有个汽车规则，用来定义汽车能干什么\n*/\npublic interface Car {\n    /**\n    *　汽车能跑\n    */\n    void run();\n}\n```\n\n```java\n/**\n * 劳斯莱斯汽车\n * */\npublic class RollsRoyce implements Car {\n    /**\n    * 劳斯莱斯能跑起来\n    */\n    @Override\n    public void run() {\n        System.out.println(\"劳斯莱斯开起来了！！\");\n    }\n}\n\n```\n\n```java\n/**\n * 劳斯莱斯汽车工厂\n * */\npublic class RollsRoyceFactory implements AllCarFactory {\n    /**\n    * 生产一辆劳斯莱斯\n    */\n    @Override\n    public Car getCar() {\n        return new RollsRoyce();\n    }\n}\n```\n\n找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：\n\n```java\n/**\n* 五菱神车\n*/\npublic class Wuling implements Car {\n    /**\n    * 五菱神车能飙车\n    */\n    @Override\n    public void run() {\n        System.out.println(\"五菱神车开动了\");\n    }\n}\n```\n\n```java\n/**\n * 五菱神车工厂\n * */\npublic class WulingFactory implements AllCarFactory {\n    /**\n    * 生产一辆五菱神车\n    */\n    @Override\n    public Car getCar() {\n        return new Wuling();\n    }\n}\n```\n\n再区看看奔驰车厂：\n\n```java\n/**\n* 奔驰汽车\n*/\npublic class Benz implements Car {\n    /**\n    * 奔驰汽车能跑\n    */\n    @Override\n    public void run() {\n        System.out.println(\"大奔开动了\");\n    }\n}\n```\n\n```java\n/**\n * 奔驰汽车工厂\n * */\npublic class BenzFactory implements AllCarFactory {\n    /**\n    * 生产一辆奔驰汽车\n    */\n    @Override\n    public Car getCar() {\n        return new Benz();\n    }\n}\n```\n\n看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：\n\n![](http://cdn.mjava.top/20191215170620.jpg)\n\n看看我买车的过程：\n\n```java\n/**\n * 土豪买车记\n * */\npublic class CostumerMain {\n    public static void main(String[] args) {\n        //去五菱车厂买车\n        Car wuling=new WulingFactory().getCar();\n        //去奔驰车厂买车\n        Car benz=new BenzFactory().getCar();\n        //去劳斯莱斯车厂买车\n        Car rollsRoyce=new RollsRoyceFactory().getCar();\n        \n        //开着三辆车去兜兜风\n        wuling.run();\n        benz.run();\n        rollsRoyce.run();\n    }\n}\n\n\n//五菱神车开动了\n//大奔开动了\n//劳斯莱斯开起来了！！\n```\n\n\n\n## 总结\n\n​\t买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=orange>术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；\n\n​\t不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；","slug":"gof/gof-factory-method","published":1,"updated":"2019-12-15T10:23:28.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx024000mw2g5ioegmw60","content":"<p><img src=\"http://cdn.mjava.top/gof-factory-method.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工厂模式有一下三种</p><ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul><p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p><a id=\"more\"></a>\n\n\n\n\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p>\n<p>当我要买车的时候，我选了这两种车．</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个汽车接口</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车能动</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"大奔开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"五菱神车开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选是选好了，可是要怎么得到呢？是不是下意识的<font color=\"orange\">new</font>一个出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我要奔驰车</span></span><br><span class=\"line\">Benz　myCar=<span class=\"keyword\">new</span> Benz();</span><br></pre></td></tr></table></figure>\n\n<p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=\"orange\">new</font>出来的嘛！！！！！</p>\n<p><img src=\"http://cdn.mjava.top/20191215162632.gif\" alt></p>\n<p>这种事情当然是交给工厂去做嘛，叫工厂去<font color=\"orange\">new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">getCar</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"我要五菱神车\"</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Wuling();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"我要大奔驰\"</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Benz();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 买车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CostumerMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要五菱神车</span></span><br><span class=\"line\">        Car wuling=CarFactory.getCar(<span class=\"string\">\"我要五菱神车\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要大奔驰</span></span><br><span class=\"line\">        Car Benz=CarFactory.getCar(<span class=\"string\">\"我要大奔驰\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开着五菱神车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        <span class=\"comment\">//开着大奔去兜兜风</span></span><br><span class=\"line\">        Benz.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br></pre></td></tr></table></figure>\n\n<p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p>\n<p><img src=\"http://cdn.mjava.top/20191215163319.jpg\" alt></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p>\n<p><img src=\"http://cdn.mjava.top/20191215163907.gif\" alt></p>\n<p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p>\n<p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">getCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *　汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RollsRoyce</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 劳斯莱斯能跑起来</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"劳斯莱斯开起来了！！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RollsRoyceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆劳斯莱斯</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RollsRoyce();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 五菱神车能飙车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"五菱神车开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WulingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Wuling();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再区看看奔驰车厂：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 奔驰汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"大奔开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Benz();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p>\n<p><img src=\"http://cdn.mjava.top/20191215170620.jpg\" alt></p>\n<p>看看我买车的过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 土豪买车记</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CostumerMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//去五菱车厂买车</span></span><br><span class=\"line\">        Car wuling=<span class=\"keyword\">new</span> WulingFactory().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去奔驰车厂买车</span></span><br><span class=\"line\">        Car benz=<span class=\"keyword\">new</span> BenzFactory().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去劳斯莱斯车厂买车</span></span><br><span class=\"line\">        Car rollsRoyce=<span class=\"keyword\">new</span> RollsRoyceFactory().getCar();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//开着三辆车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        benz.run();</span><br><span class=\"line\">        rollsRoyce.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br><span class=\"line\"><span class=\"comment\">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=\"orange\">术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；</p>\n<p>​    不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/gof-factory-method.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>工厂模式有一下三种</p><ul>\n<li>简单工厂模式</li>\n<li>工厂方法模式</li>\n<li>抽象工厂模式</li>\n</ul><p>其中简单工厂模式不在23中模式之中，更多的是一种编程习惯，而我们平常所说的工厂模式一般指的是工厂方法模式，抽象工厂在实际的业务开发中也用的比较少，因为它有时候违背了开闭原则．由于篇幅有限，抽象工厂本文就不讲了，以后单独讲；</p>","more":"\n\n\n\n\n<h2 id=\"简单工厂模式\"><a href=\"#简单工厂模式\" class=\"headerlink\" title=\"简单工厂模式\"></a>简单工厂模式</h2><p>简单工厂到底有多简单呢？简单到只有一个工厂，这个工厂相当于是万能工厂，你想要什么，只要和它说一声，它就会想方设法的去抱你创建，然后给你；举个买车的简单的例子：</p>\n<p>当我要买车的时候，我选了这两种车．</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建一个汽车接口</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 汽车能动</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"大奔开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"五菱神车开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>选是选好了，可是要怎么得到呢？是不是下意识的<font color=\"orange\">new</font>一个出来？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//我要奔驰车</span></span><br><span class=\"line\">Benz　myCar=<span class=\"keyword\">new</span> Benz();</span><br></pre></td></tr></table></figure>\n\n<p>如果是这样的话，就相当于自己亲手造了一辆奔驰车出来，因为是你自己<font color=\"orange\">new</font>出来的嘛！！！！！</p>\n<p><img src=\"http://cdn.mjava.top/20191215162632.gif\" alt></p>\n<p>这种事情当然是交给工厂去做嘛，叫工厂去<font color=\"orange\">new</font>就可以了，我只要交钱给工厂就可以了．诶，有钱真好！</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 静态工厂</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 简单工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Car <span class=\"title\">getCar</span><span class=\"params\">(String type)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">\"我要五菱神车\"</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Wuling();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"我要大奔驰\"</span>.equals(type))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Benz();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到了这个工厂之后，我只要直接告诉它我要什么车就可以了，工厂就会帮我造好给我；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 买车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CostumerMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要五菱神车</span></span><br><span class=\"line\">        Car wuling=CarFactory.getCar(<span class=\"string\">\"我要五菱神车\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//跟车厂说一声我要大奔驰</span></span><br><span class=\"line\">        Car Benz=CarFactory.getCar(<span class=\"string\">\"我要大奔驰\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开着五菱神车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        <span class=\"comment\">//开着大奔去兜兜风</span></span><br><span class=\"line\">        Benz.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br></pre></td></tr></table></figure>\n\n<p>这样子，买车就结束了，果然钱可以解决一切，哈哈，开个玩笑～</p>\n<p><img src=\"http://cdn.mjava.top/20191215163319.jpg\" alt></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><p>上次买了两辆车之后，白天开着大奔去街上撩妹，晚上开着五菱神车去秋名山飙车，从此走向了人生巅峰．可是好景不长，大奔开着开着就漏油了，五菱神车终于也翻车了．</p>\n<p><img src=\"http://cdn.mjava.top/20191215163907.gif\" alt></p>\n<p>找到了上次买车的工厂，准备换个低调点的劳斯莱斯．可是那家工厂竟然告诉我说他们那边还没有造过劳斯莱斯，需要改造一下工厂，然后才能生产劳斯莱斯，叫我等他们改造好之后再来买．听他们这麽说后，我心想，我这分分钟几百万上下的人，时间就是金钱．我可等不了．</p>\n<p>于是几番寻找之后，发现英国有个劳斯莱斯车场，专门来生产劳斯莱斯．于是和接待我的中介小姐姐聊了一下，发现他们的生产模式是这样的：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 他们有个汽车工厂总部，用来定义车厂该干什么</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\">Car <span class=\"title\">getCar</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">*　有个汽车规则，用来定义汽车能干什么</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    *　汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RollsRoyce</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 劳斯莱斯能跑起来</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"劳斯莱斯开起来了！！\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 劳斯莱斯汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RollsRoyceFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆劳斯莱斯</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> RollsRoyce();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到车厂后，我毫不犹豫和接待我的小姐姐说给我来一辆，小姐姐见我这么豪爽，准备再忽悠我买几辆车，不推荐我几辆车．．．．她知道我之前买了奔驰和五菱神车,和我说他们这边还有还有五菱车厂和奔驰车厂，都是专门用来造同一种车的．于是我就去参观了一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wuling</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 五菱神车能飙车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"五菱神车开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 五菱神车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WulingFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆五菱神车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Wuling();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>再区看看奔驰车厂：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Benz</span> <span class=\"keyword\">implements</span> <span class=\"title\">Car</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 奔驰汽车能跑</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"大奔开动了\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 奔驰汽车工厂</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BenzFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">AllCarFactory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * 生产一辆奔驰汽车</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Car <span class=\"title\">getCar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Benz();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看完之后，感觉还可以，于是分别到三个工厂买了三辆车，然后高高兴兴的回家了：</p>\n<p><img src=\"http://cdn.mjava.top/20191215170620.jpg\" alt></p>\n<p>看看我买车的过程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 土豪买车记</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CostumerMain</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//去五菱车厂买车</span></span><br><span class=\"line\">        Car wuling=<span class=\"keyword\">new</span> WulingFactory().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去奔驰车厂买车</span></span><br><span class=\"line\">        Car benz=<span class=\"keyword\">new</span> BenzFactory().getCar();</span><br><span class=\"line\">        <span class=\"comment\">//去劳斯莱斯车厂买车</span></span><br><span class=\"line\">        Car rollsRoyce=<span class=\"keyword\">new</span> RollsRoyceFactory().getCar();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//开着三辆车去兜兜风</span></span><br><span class=\"line\">        wuling.run();</span><br><span class=\"line\">        benz.run();</span><br><span class=\"line\">        rollsRoyce.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//五菱神车开动了</span></span><br><span class=\"line\"><span class=\"comment\">//大奔开动了</span></span><br><span class=\"line\"><span class=\"comment\">//劳斯莱斯开起来了！！</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    买完车后，小姐姐还和我说他们这样的模式生产车的话有好多好处，比如一个车厂只要负责一种车的生产和售后，这样的话，生产效率就会比较高，赚的钱自然也多，同时每个车厂还可以举行不同活动，来吸引消费者，同时，你如果哪个品牌的车出现了问题了，直接去那辆车的工厂，基本上都能帮你解决问题，毕竟<font color=\"orange\">术业有专攻</font>，对比前一个工厂什么都造的万金油来说，深入一项技术比什么技术都懂好；</p>\n<p>​    不过有时候，万金油工厂也挺好的，就是一站式服务，你要什么它都有，不用到处乱跑，省心省力．所以还是要根据什么行业来执行什么模式，这样才能利益最大化；</p>\n"},{"title":"设计模式系列-模板方法模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-19T16:04:28.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![](http://cdn.mjava.top/20191220000613.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n\n\n## 文前常规发言\n\n　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；\n\n![](http://cdn.mjava.top/20191219215431.gif)\n\n## 阿狗卖电脑\n\n　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；\n\n![](http://cdn.mjava.top/20191219220453.gif)\n\n看看他的电脑店里都有什么\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n}\n```\n\n还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．\n\n\n\n看看阿猫：\n\n![](http://cdn.mjava.top/20191219222853.png)\n\n\n\n在看看大牛的：\n\n![](http://cdn.mjava.top/20191219222925.png)\n\n\n\n再看看他们怎么组装的吧：\n\n![](http://cdn.mjava.top/20191219223122.png)\n\n## 有想法的阿狗\n\n　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        this.xianKa();\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n上次的阿猫又来买电脑了：\n\n![](http://cdn.mjava.top/20191219232821.png)\n\n看看结果：\n\n![](http://cdn.mjava.top/20191219232931.png)\n\n\n\n## 客户反馈\n\n　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *　显卡\n     * ＂具体方法＂\n     * */\n    protected void xianKa(){\n        System.out.println(\"客户选了显卡\");\n    }\n    /**\n     * 是否要显卡　　默认是要显卡的\n     * ＂钩子方法＂\n     * */\n    public boolean isTrue(){\n        return true;\n    }\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        //判断要不要显卡\n        if(this.isTrue()) {\n            this.xianKa();\n        }\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n> 可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font>\n\n上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：\n\n阿猫默认要显卡：\n\n![](http://cdn.mjava.top/20191219234521.png)\n\n大牛不要显卡：![](http://cdn.mjava.top/20191219234630.png)\n\n看看他们的电脑吧：\n\n![](http://cdn.mjava.top/20191219234803.png)\n\n\n\n## 总结一下下\n\n  上面对比了阿牛的三种买电脑模式\n\n- 普通模式：自己只提供最基础的东西，所有的由客户自己去完成\n- 自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了\n- 客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；","source":"_posts/gof/gof-taemplate-method.md","raw":"---\ntitle: 设计模式系列-模板方法模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-20 00:04:28\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 模板方法模式\ncategories:\n- GOF\n---\n\n![](http://cdn.mjava.top/20191220000613.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬\n\n\n\n## 文前常规发言\n\n　　模板方法的设计<font color=orange>符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=orange>一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；\n\n![](http://cdn.mjava.top/20191219215431.gif)\n\n## 阿狗卖电脑\n\n　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=orange>实则是被公司裁员，被迫来卖电脑了</font>）；\n\n![](http://cdn.mjava.top/20191219220453.gif)\n\n看看他的电脑店里都有什么\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n}\n```\n\n还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=orange>阿猫</font>和<font color=orange>大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．\n\n\n\n看看阿猫：\n\n![](http://cdn.mjava.top/20191219222853.png)\n\n\n\n在看看大牛的：\n\n![](http://cdn.mjava.top/20191219222925.png)\n\n\n\n再看看他们怎么组装的吧：\n\n![](http://cdn.mjava.top/20191219223122.png)\n\n## 有想法的阿狗\n\n　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=orange>模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=orange>配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *显卡\n     * */\n    abstract void xianKa();\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        this.xianKa();\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n上次的阿猫又来买电脑了：\n\n![](http://cdn.mjava.top/20191219232821.png)\n\n看看结果：\n\n![](http://cdn.mjava.top/20191219232931.png)\n\n\n\n## 客户反馈\n\n　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=orange>有钱就赚原则</font>)，于是他又改了他店铺的模式：\n\n```java\n/**\n * 阿狗电脑店\n * */\nabstract class AGouShop {\n    /**\n     *　显卡\n     * ＂具体方法＂\n     * */\n    protected void xianKa(){\n        System.out.println(\"客户选了显卡\");\n    }\n    /**\n     * 是否要显卡　　默认是要显卡的\n     * ＂钩子方法＂\n     * */\n    public boolean isTrue(){\n        return true;\n    }\n    /**\n     *cpu\n     * */\n    abstract void cpu();\n    /**\n     *电源\n     * */\n    abstract void dianYuan();\n    /**\n     *主板\n     * */\n    abstract void zhuBan();\n    /**\n     *硬盘\n     * */\n    abstract void yingPan();\n    /**\n     *内存条\n     * */\n    abstract void neiCun();\n    /**\n     *机箱\n     * */\n    abstract void jiXiang();\n\n    /**\n     * 阿狗帮客户装电脑\n     * 模板方法\n     * */\n    public void zhuZHuang(){\n        System.out.println(\"阿狗开始组装电脑＝＝＝＝＝＝\");\n        this.cpu();\n        this.dianYuan();\n        this.neiCun();\n        //判断要不要显卡\n        if(this.isTrue()) {\n            this.xianKa();\n        }\n        this.yingPan();\n        this.zhuBan();\n        this.jiXiang();\n        System.out.println(\"阿狗电脑组装完成＝＝＝＝＝＝\");\n    }\n}\n```\n\n> 可以看到上加了<font color=orange>具体方法</font>和<font color=orange>钩子方法</font>\n\n上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：\n\n阿猫默认要显卡：\n\n![](http://cdn.mjava.top/20191219234521.png)\n\n大牛不要显卡：![](http://cdn.mjava.top/20191219234630.png)\n\n看看他们的电脑吧：\n\n![](http://cdn.mjava.top/20191219234803.png)\n\n\n\n## 总结一下下\n\n  上面对比了阿牛的三种买电脑模式\n\n- 普通模式：自己只提供最基础的东西，所有的由客户自己去完成\n- 自己帮客户完成组装电脑：这里就用到了<font color=orange>模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了\n- 客户有选择显卡的权利：这里用到了<font color=orange>模板方法模式</font>中的<font color=orange>钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=orange>钩子方法</font>是<font color=orange>模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；","slug":"gof/gof-taemplate-method","published":1,"updated":"2019-12-20T01:38:54.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx025000nw2g566s1bzjv","content":"<p><img src=\"http://cdn.mjava.top/20191220000613.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"文前常规发言\"><a href=\"#文前常规发言\" class=\"headerlink\" title=\"文前常规发言\"></a>文前常规发言</h2><p>　　模板方法的设计<font color=\"orange\">符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=\"orange\">一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p><a id=\"more\"></a>\n\n\n<p><img src=\"http://cdn.mjava.top/20191219215431.gif\" alt></p>\n<h2 id=\"阿狗卖电脑\"><a href=\"#阿狗卖电脑\" class=\"headerlink\" title=\"阿狗卖电脑\"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=\"orange\">实则是被公司裁员，被迫来卖电脑了</font>）；</p>\n<p><img src=\"http://cdn.mjava.top/20191219220453.gif\" alt></p>\n<p>看看他的电脑店里都有什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=\"orange\">阿猫</font>和<font color=\"orange\">大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p>\n<p>看看阿猫：</p>\n<p><img src=\"http://cdn.mjava.top/20191219222853.png\" alt></p>\n<p>在看看大牛的：</p>\n<p><img src=\"http://cdn.mjava.top/20191219222925.png\" alt></p>\n<p>再看看他们怎么组装的吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191219223122.png\" alt></p>\n<h2 id=\"有想法的阿狗\"><a href=\"#有想法的阿狗\" class=\"headerlink\" title=\"有想法的阿狗\"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=\"orange\">模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=\"orange\">配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuZHuang</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗开始组装电脑＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.xianKa();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗电脑组装完成＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上次的阿猫又来买电脑了：</p>\n<p><img src=\"http://cdn.mjava.top/20191219232821.png\" alt></p>\n<p>看看结果：</p>\n<p><img src=\"http://cdn.mjava.top/20191219232931.png\" alt></p>\n<h2 id=\"客户反馈\"><a href=\"#客户反馈\" class=\"headerlink\" title=\"客户反馈\"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=\"orange\">有钱就赚原则</font>)，于是他又改了他店铺的模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *　显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂具体方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"客户选了显卡\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否要显卡　　默认是要显卡的</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂钩子方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuZHuang</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗开始组装电脑＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"comment\">//判断要不要显卡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isTrue()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.xianKa();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗电脑组装完成＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到上加了<font color=\"orange\">具体方法</font>和<font color=\"orange\">钩子方法</font></p>\n</blockquote>\n<p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p>\n<p>阿猫默认要显卡：</p>\n<p><img src=\"http://cdn.mjava.top/20191219234521.png\" alt></p>\n<p>大牛不要显卡：<img src=\"http://cdn.mjava.top/20191219234630.png\" alt></p>\n<p>看看他们的电脑吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191219234803.png\" alt></p>\n<h2 id=\"总结一下下\"><a href=\"#总结一下下\" class=\"headerlink\" title=\"总结一下下\"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p>\n<ul>\n<li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li>\n<li>自己帮客户完成组装电脑：这里就用到了<font color=\"orange\">模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li>\n<li>客户有选择显卡的权利：这里用到了<font color=\"orange\">模板方法模式</font>中的<font color=\"orange\">钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=\"orange\">钩子方法</font>是<font color=\"orange\">模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191220000613.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬</p>\n</blockquote><h2 id=\"文前常规发言\"><a href=\"#文前常规发言\" class=\"headerlink\" title=\"文前常规发言\"></a>文前常规发言</h2><p>　　模板方法的设计<font color=\"orange\">符合迪米特法则</font>，也就是最少知道原则，他通过对一些重复方法的封装，减少类之间的耦合，让调用者也更省心，原来要调两三个方法才能实现的功能，现在调一个就可以了；就像我们伟大的祖国，现在也在推行这种模式呢．以前区办一些证明什么的，要跑三四个地方，还要保证这三四个地方都正常帮你办理，如果其中一个地方没办理，那么整个流程就都作废了．现在好了，提倡最多跑一次，只要去一个地方办<font color=\"orange\">一次</font>手续就可以了，你只要知道这个地方能办好就行，其他的就不用烦心了；</p>","more":"\n\n\n<p><img src=\"http://cdn.mjava.top/20191219215431.gif\" alt></p>\n<h2 id=\"阿狗卖电脑\"><a href=\"#阿狗卖电脑\" class=\"headerlink\" title=\"阿狗卖电脑\"></a>阿狗卖电脑</h2><p>　　阿狗是一个三十五岁没了头发的年轻小伙，当问及为什么没了头发，阿狗摸摸头，眼里充满了悔恨的泪水；要不是小时候没听大人的话，长大了也不至于做程序员啊－－－阿狗唉声叹气的说道．听到这里，我仿佛已经知道了答案．当我问他为什么现在改行卖电脑了，他说外面的世界很大，想趁年轻，多闯闯（<font color=\"orange\">实则是被公司裁员，被迫来卖电脑了</font>）；</p>\n<p><img src=\"http://cdn.mjava.top/20191219220453.gif\" alt></p>\n<p>看看他的电脑店里都有什么</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>还不错，该有的都有了．当我们正在店里逛着时，来了两个顾客，<font color=\"orange\">阿猫</font>和<font color=\"orange\">大牛</font>，他们都来到阿狗店电脑店，挑选的电脑配件，准备组装电脑．</p>\n<p>看看阿猫：</p>\n<p><img src=\"http://cdn.mjava.top/20191219222853.png\" alt></p>\n<p>在看看大牛的：</p>\n<p><img src=\"http://cdn.mjava.top/20191219222925.png\" alt></p>\n<p>再看看他们怎么组装的吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191219223122.png\" alt></p>\n<h2 id=\"有想法的阿狗\"><a href=\"#有想法的阿狗\" class=\"headerlink\" title=\"有想法的阿狗\"></a>有想法的阿狗</h2><p>　　阿狗自从卖电脑后，发现头上的头发也慢慢的长了出来了，每天也更加自信了．一天，他发现客户有个痛点，就是买电脑要分别买好配件，然后再自己组装，有时候买的配件有问题，又要拿去换，导致费时费力．这时，阿狗头脑灵光一闪，想到了当年做程序员时的<font color=\"orange\">模板方法模式</font>；何不把客户组装电脑的步骤自己承包，这样客户只要来买电脑时选下<font color=\"orange\">配件</font>，我就帮他组装好给他．客户省心省力，到时候生意肯定好；于是他改造了他的电脑店：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuZHuang</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗开始组装电脑＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.xianKa();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗电脑组装完成＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上次的阿猫又来买电脑了：</p>\n<p><img src=\"http://cdn.mjava.top/20191219232821.png\" alt></p>\n<p>看看结果：</p>\n<p><img src=\"http://cdn.mjava.top/20191219232931.png\" alt></p>\n<h2 id=\"客户反馈\"><a href=\"#客户反馈\" class=\"headerlink\" title=\"客户反馈\"></a>客户反馈</h2><p>　　阿狗按照上面的模式运行后，缺少增加了不少客户，可是有的顾客却反应说，为什么一定要我选显卡啊，我又不玩游戏，而且我买的cpu有核显，可以不要我选显卡嘛？阿狗一听，这是个问题啊，遵照客户就是上帝的原则(<font color=\"orange\">有钱就赚原则</font>)，于是他又改了他店铺的模式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 阿狗电脑店</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AGouShop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *　显卡</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂具体方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">xianKa</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"客户选了显卡\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否要显卡　　默认是要显卡的</span></span><br><span class=\"line\"><span class=\"comment\">     * ＂钩子方法＂</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isTrue</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *cpu</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">cpu</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *电源</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">dianYuan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *主板</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuBan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *硬盘</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">yingPan</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *内存条</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">neiCun</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *机箱</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">jiXiang</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 阿狗帮客户装电脑</span></span><br><span class=\"line\"><span class=\"comment\">     * 模板方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">zhuZHuang</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗开始组装电脑＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.cpu();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.dianYuan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.neiCun();</span><br><span class=\"line\">        <span class=\"comment\">//判断要不要显卡</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"keyword\">this</span>.isTrue()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.xianKa();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.yingPan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.zhuBan();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jiXiang();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"阿狗电脑组装完成＝＝＝＝＝＝\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>可以看到上加了<font color=\"orange\">具体方法</font>和<font color=\"orange\">钩子方法</font></p>\n</blockquote>\n<p>上上次的阿猫和大牛，又双来买电脑了－－－－－有钱真好：</p>\n<p>阿猫默认要显卡：</p>\n<p><img src=\"http://cdn.mjava.top/20191219234521.png\" alt></p>\n<p>大牛不要显卡：<img src=\"http://cdn.mjava.top/20191219234630.png\" alt></p>\n<p>看看他们的电脑吧：</p>\n<p><img src=\"http://cdn.mjava.top/20191219234803.png\" alt></p>\n<h2 id=\"总结一下下\"><a href=\"#总结一下下\" class=\"headerlink\" title=\"总结一下下\"></a>总结一下下</h2><p>  上面对比了阿牛的三种买电脑模式</p>\n<ul>\n<li>普通模式：自己只提供最基础的东西，所有的由客户自己去完成</li>\n<li>自己帮客户完成组装电脑：这里就用到了<font color=\"orange\">模板方法模式</font>，通过对自身方法的封装，使客户买电脑更轻松了</li>\n<li>客户有选择显卡的权利：这里用到了<font color=\"orange\">模板方法模式</font>中的<font color=\"orange\">钩子方法</font>，通过客户暴露钩子方法，使其可以控制阿狗在装电脑是要不要装显卡这个步骤方法，<font color=\"orange\">钩子方法</font>是<font color=\"orange\">模板方法模式</font>的灵魂，有了它，这个模式才有更大的意义；</li>\n</ul>\n"},{"title":"OOP程序七大原则","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-15T02:45:04.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![](http://cdn.mjava.top/autumn-4656877_1920.png)\n\n\n\n## 开闭原则\n\n开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．\n\n\n\n## 里氏替换原则\n\n<font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；\n\n## 依赖倒置原则\n\n依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．\n\n![来自C语言中文网](http://cdn.mjava.top/3-1Q113131610L7.gif)\n\n这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；\n\n```java\n//代码来之＇C语言中文网＇\npublic class DIPtest\n{\n    public static void main(String[] args)\n    {\n        Customer wang=new Customer();\n        System.out.println(\"顾客购买以下商品：\"); \n        wang.shopping(new ShaoguanShop()); \n        wang.shopping(new WuyuanShop());\n    }\n}\n//商店\ninterface Shop\n{\n    public String sell(); //卖\n}\n//韶关网店\nclass ShaoguanShop implements Shop\n{\n    public String sell()\n    {\n        return \"韶关土特产：香菇、木耳……\"; \n    } \n}\n//婺源网店\nclass WuyuanShop implements Shop\n{\n    public String sell()\n    {\n        return \"婺源土特产：绿茶、酒糟鱼……\"; \n    }\n} \n//顾客\nclass Customer\n{\n    public void shopping(Shop shop)\n    {\n        //购物\n        System.out.println(shop.sell()); \n    }\n}\n\n//输出\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n\n## 单一职责\n\n<font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像<<设计模式之禅>> 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；\n\n## 迪米特法则\n\n<font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font>\n\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；\n\n## 接口隔离原则\n\n这个和单一职责有点类似，不过还是不一样的．\n\n- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font>\n\n这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；\n\n## 合成复用原则\n\n它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n如果不了解什么是组合和聚合的话可以看看这个篇文章[<<组合、聚合与继承的爱恨情仇>>](https://blog.csdn.net/qq_31655965/article/details/54645220),讲的挺好的\n\n\n\n## 总结\n\n在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．","source":"_posts/gof/gof-oop-7-all.md","raw":"---\ntitle: OOP程序七大原则\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-15 10:45:04\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- GOF\n- OOP\ncategories:\n- GOF\n---\n\n\n\n![](http://cdn.mjava.top/autumn-4656877_1920.png)\n\n\n\n## 开闭原则\n\n开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．\n\n\n\n## 里氏替换原则\n\n<font color=orange>当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=orange>替换</font>指的是：当有父类出现的地方，这个父类可以<font color=orange>替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；\n\n## 依赖倒置原则\n\n依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=orange>面对接口编程，不要面对具体实现编程</font>．\n\n![来自C语言中文网](http://cdn.mjava.top/3-1Q113131610L7.gif)\n\n这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；\n\n```java\n//代码来之＇C语言中文网＇\npublic class DIPtest\n{\n    public static void main(String[] args)\n    {\n        Customer wang=new Customer();\n        System.out.println(\"顾客购买以下商品：\"); \n        wang.shopping(new ShaoguanShop()); \n        wang.shopping(new WuyuanShop());\n    }\n}\n//商店\ninterface Shop\n{\n    public String sell(); //卖\n}\n//韶关网店\nclass ShaoguanShop implements Shop\n{\n    public String sell()\n    {\n        return \"韶关土特产：香菇、木耳……\"; \n    } \n}\n//婺源网店\nclass WuyuanShop implements Shop\n{\n    public String sell()\n    {\n        return \"婺源土特产：绿茶、酒糟鱼……\"; \n    }\n} \n//顾客\nclass Customer\n{\n    public void shopping(Shop shop)\n    {\n        //购物\n        System.out.println(shop.sell()); \n    }\n}\n\n//输出\n顾客购买以下商品：\n韶关土特产：香菇、木耳……\n婺源土特产：绿茶、酒糟鱼……\n```\n\n## 单一职责\n\n<font color=orange>单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像<<设计模式之禅>> 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；\n\n## 迪米特法则\n\n<font color=orange>迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font>\n\n1. 从依赖者的角度来说，只依赖应该依赖的对象。\n2. 从被依赖者的角度说，只暴露应该暴露的方法。\n\n个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；\n\n## 接口隔离原则\n\n这个和单一职责有点类似，不过还是不一样的．\n\n- 单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。\n- 单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。\n\n官方定义：<font color=orange>要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font>\n\n这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；\n\n## 合成复用原则\n\n它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=orange>里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。\n\n如果不了解什么是组合和聚合的话可以看看这个篇文章[<<组合、聚合与继承的爱恨情仇>>](https://blog.csdn.net/qq_31655965/article/details/54645220),讲的挺好的\n\n\n\n## 总结\n\n在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=orange>规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．","slug":"gof/gof-oop-7-all","published":1,"updated":"2019-12-15T02:46:17.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx026000rw2g5jcfli77v","content":"<p><img src=\"http://cdn.mjava.top/autumn-4656877_1920.png\" alt></p><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p><h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><font color=\"orange\">当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=\"orange\">替换</font>指的是：当有父类出现的地方，这个父类可以<font color=\"orange\">替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p><a id=\"more\"></a>\n\n\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=\"orange\">面对接口编程，不要面对具体实现编程</font>．</p>\n<p><img src=\"http://cdn.mjava.top/3-1Q113131610L7.gif\" alt=\"来自C语言中文网\"></p>\n<p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码来之＇C语言中文网＇</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIPtest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Customer wang=<span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"顾客购买以下商品：\"</span>); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> ShaoguanShop()); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> WuyuanShop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//商店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span>; <span class=\"comment\">//卖</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//韶关网店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShaoguanShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"韶关土特产：香菇、木耳……\"</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//婺源网店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WuyuanShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"婺源土特产：绿茶、酒糟鱼……\"</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//顾客</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shopping</span><span class=\"params\">(Shop shop)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//购物</span></span><br><span class=\"line\">        System.out.println(shop.sell()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">顾客购买以下商品：</span><br><span class=\"line\">韶关土特产：香菇、木耳……</span><br><span class=\"line\">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><p><font color=\"orange\">单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p><font color=\"orange\">迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ul>\n<p>官方定义：<font color=\"orange\">要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p>\n<p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=\"orange\">里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\" rel=\"noopener\" target=\"_blank\">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=\"orange\">规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/autumn-4656877_1920.png\" alt></p><h2 id=\"开闭原则\"><a href=\"#开闭原则\" class=\"headerlink\" title=\"开闭原则\"></a>开闭原则</h2><p>开闭原则相当于所有原则的祖先，主张对修改关闭，对拓展开放．</p><h2 id=\"里氏替换原则\"><a href=\"#里氏替换原则\" class=\"headerlink\" title=\"里氏替换原则\"></a>里氏替换原则</h2><p><font color=\"orange\">当两个类有继承关系时，子类不能修改父类的方法和变量.  </font>里氏替换中的<font color=\"orange\">替换</font>指的是：当有父类出现的地方，这个父类可以<font color=\"orange\">替换</font>成子类，而且对程序没有影响，这就遵循了里氏替换原则；当替换成子类时对程序有影响，说明子类修改了父类的方法，就没有遵循里氏替换原则了；</p>","more":"\n\n\n<h2 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h2><p>依赖倒置原则是对开闭原则的一个实现，也是主张对拓展开放，对修改关闭．它的核心思想是<font color=\"orange\">面对接口编程，不要面对具体实现编程</font>．</p>\n<p><img src=\"http://cdn.mjava.top/3-1Q113131610L7.gif\" alt=\"来自C语言中文网\"></p>\n<p>这是一个遵守依赖倒置原则的UML图，原来的话当客户购买商品时,shopping这个方法要传入相应的网店进去，当要更改店铺时，就要修改Cusromer这个类里的shopping方法，而现在，只要定义一个Shop接口，所有的店铺都实现这个接口的方法，顾客类的shopping方法只要传入Shop这个接口类就可以了．然后具体实现的时候，要到哪里买，就传入哪一个网店就可以了，而不用修改Cusromer这个类的方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//代码来之＇C语言中文网＇</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DIPtest</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        Customer wang=<span class=\"keyword\">new</span> Customer();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"顾客购买以下商品：\"</span>); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> ShaoguanShop()); </span><br><span class=\"line\">        wang.shopping(<span class=\"keyword\">new</span> WuyuanShop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//商店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span>; <span class=\"comment\">//卖</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//韶关网店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShaoguanShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"韶关土特产：香菇、木耳……\"</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//婺源网店</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WuyuanShop</span> <span class=\"keyword\">implements</span> <span class=\"title\">Shop</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">sell</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"婺源土特产：绿茶、酒糟鱼……\"</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">//顾客</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span></span></span><br><span class=\"line\"><span class=\"class\"></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shopping</span><span class=\"params\">(Shop shop)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//购物</span></span><br><span class=\"line\">        System.out.println(shop.sell()); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出</span></span><br><span class=\"line\">顾客购买以下商品：</span><br><span class=\"line\">韶关土特产：香菇、木耳……</span><br><span class=\"line\">婺源土特产：绿茶、酒糟鱼……</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"单一职责\"><a href=\"#单一职责\" class=\"headerlink\" title=\"单一职责\"></a>单一职责</h2><p><font color=\"orange\">单一职责要求一个类只负责一项职责.  </font>这个听起来很简单，但是实际应用上却非常的难把握．因为这个职责在中国是非常抽象的概念，中国是一个文化底蕴非常丰富的国家，就像&lt;&lt;设计模式之禅&gt;&gt; 这本书里所说的例子：比如说中国的筷子，他既可以当刀来分割食物，也可以当叉子来叉取食物，而在国外，叉子就是叉子，用来取食物的，刀就是用来分割食物的；所以这个单一职责要求软件开发人员有非常丰富的实践经验．不然很难把握；</p>\n<h2 id=\"迪米特法则\"><a href=\"#迪米特法则\" class=\"headerlink\" title=\"迪米特法则\"></a>迪米特法则</h2><p><font color=\"orange\">迪米特法则也称最小知道原则，一个类对外暴露的东西越少越好．</font></p>\n<ol>\n<li>从依赖者的角度来说，只依赖应该依赖的对象。</li>\n<li>从被依赖者的角度说，只暴露应该暴露的方法。</li>\n</ol>\n<p>个人理解：当A类需要调用B类的三个方法才能实现的功能时,B类可以对这三个方法进行一个封装，然后只暴露封装的这个方法给A,这样A就只需要调用B的这个封装的方法就可以了，当B的三个方法中有修改的时候，只要修改B这个对外封装的方法就可以，而Ａ调用者却不用改变，因为Ａ只知道调用这个方法可以实现功能，而不用具体管Ｂ内部是怎么实现的，降低了程序的耦合度；</p>\n<h2 id=\"接口隔离原则\"><a href=\"#接口隔离原则\" class=\"headerlink\" title=\"接口隔离原则\"></a>接口隔离原则</h2><p>这个和单一职责有点类似，不过还是不一样的．</p>\n<ul>\n<li>单一职责原则注重的是职责，而接口隔离原则注重的是对接口依赖的隔离。</li>\n<li>单一职责原则主要是约束类，它针对的是程序中的实现和细节；接口隔离原则主要约束接口，主要针对抽象和程序整体框架的构建。</li>\n</ul>\n<p>官方定义：<font color=\"orange\">要求程序员尽量将臃肿庞大的接口拆分成更小的和更具体的接口，让接口中只包含客户感兴趣的方法，降低程序耦合度。</font></p>\n<p>这个法则也要根据实际的业务场景来应用，如果粒度控制的太小，就会导致类的急剧增加，明明一个功能只要三四个类，如果粒度小的话，就会变成十几个，甚至几十个，虽然这样程序耦合度低，比较灵活，但是维护难啊．如果粒度大，耦合度就会高，程序不灵活．所以这个原则要求技术人员有足够的实践，经验和领悟；</p>\n<h2 id=\"合成复用原则\"><a href=\"#合成复用原则\" class=\"headerlink\" title=\"合成复用原则\"></a>合成复用原则</h2><p>它要求在软件复用时，要尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。如果要使用继承关系，则必须严格遵循<font color=\"orange\">里氏替换原则</font>。合成复用原则同里氏替换原则相辅相成的，两者都是开闭原则的具体实现规范。</p>\n<p>如果不了解什么是组合和聚合的话可以看看这个篇文章<a href=\"https://blog.csdn.net/qq_31655965/article/details/54645220\" rel=\"noopener\" target=\"_blank\">&lt;&lt;组合、聚合与继承的爱恨情仇&gt;&gt;</a>,讲的挺好的</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>在程序设计中，尽量遵循OOP七大原则．不过有句话说的好，<font color=\"orange\">规则是死的，人是活的</font>．意思是这七大原则有时候也不是万能的，有时候有的业务场景如果遵循了这些原则，反而变得难维护，所以一切都要从实际出发，23种设计模式也是一样，不要按死规则来．</p>\n"},{"title":"设计模式系例-单例模式","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-22T13:16:37.000Z","password":null,"summary":null,"_content":"\n   \n\n![](http://cdn.mjava.top/gof-singleton.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 \n\n\n\n## 前言\n\n网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","source":"_posts/gof/gof-singleton.md","raw":"---\ntitle: 设计模式系例-单例模式\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - GOF\n  - Singleton\ncategories:\n  - GOF\ndate: 2019-10-22 21:16:37\npassword:\nsummary:\n---\n\n   \n\n![](http://cdn.mjava.top/gof-singleton.jpg)\n\n> 积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 \n\n\n\n## 前言\n\n网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","slug":"gof/gof-singleton","published":1,"updated":"2019-12-15T10:25:01.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx027000sw2g5skow2lj4","content":"<p><img src=\"http://cdn.mjava.top/gof-singleton.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 </p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。</p><h2 id=\"一-什么是单例模式\"><a href=\"#一-什么是单例模式\" class=\"headerlink\" title=\"一.什么是单例模式\"></a>一.什么是单例模式</h2><p>​    就如同他的名字一样，’单例’-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。</p><a id=\"more\"></a>\n\n\n\n<h3 id=\"1-白话小故事\"><a href=\"#1-白话小故事\" class=\"headerlink\" title=\"1.白话小故事\"></a>1.白话小故事</h3><p>​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。</p>\n<p>​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半–小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。</p>\n<blockquote>\n<p>小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈</p>\n</blockquote>\n<h2 id=\"2-用在哪里\"><a href=\"#2-用在哪里\" class=\"headerlink\" title=\"2.用在哪里\"></a>2.用在哪里</h2><p>​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。</p>\n<h2 id=\"3-在Java中构成的条件\"><a href=\"#3-在Java中构成的条件\" class=\"headerlink\" title=\"3.在Java中构成的条件\"></a>3.在Java中构成的条件</h2><ul>\n<li>静态变量</li>\n<li>静态方法</li>\n<li>私有构造器</li>\n</ul>\n<h2 id=\"二-单例模式的两种形态\"><a href=\"#二-单例模式的两种形态\" class=\"headerlink\" title=\"二.单例模式的两种形态\"></a>二.单例模式的两种形态</h2><h3 id=\"1-懒汉模式\"><a href=\"#1-懒汉模式\" class=\"headerlink\" title=\"1.懒汉模式\"></a>1.懒汉模式</h3><blockquote>\n<p>线程不安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-饿汉模式\"><a href=\"#2-饿汉模式\" class=\"headerlink\" title=\"2.饿汉模式\"></a>2.饿汉模式</h3><blockquote>\n<p>线程安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton singleton1=Singleton.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-懒汉模式优化成线程安全\"><a href=\"#三-懒汉模式优化成线程安全\" class=\"headerlink\" title=\"三.懒汉模式优化成线程安全\"></a>三.懒汉模式优化成线程安全</h2><p>  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。</p>\n<h3 id=\"1-加synchronized关键字\"><a href=\"#1-加synchronized关键字\" class=\"headerlink\" title=\"1.加synchronized关键字\"></a>1.加synchronized关键字</h3><blockquote>\n<p>此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-用”双重检查加锁”\"><a href=\"#2-用”双重检查加锁”\" class=\"headerlink\" title=\"2.用”双重检查加锁”\"></a>2.用”双重检查加锁”</h3><blockquote>\n<p>上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//只有当第一次访问的时候才会使用synchronized关键字</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三种线程安全的单例模式比较\"><a href=\"#三种线程安全的单例模式比较\" class=\"headerlink\" title=\"三种线程安全的单例模式比较\"></a>三种线程安全的单例模式比较</h2><ul>\n<li><p>饿汉模式：性能好，写法简单，个人比较推荐用这个</p>\n</li>\n<li><p>加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。</p>\n</li>\n<li><p>volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本</p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/gof-singleton.jpg\" alt></p><blockquote>\n<p>积千里跬步，汇万里江河．每天进步一点点，终有一天将成大佬 </p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。</p><h2 id=\"一-什么是单例模式\"><a href=\"#一-什么是单例模式\" class=\"headerlink\" title=\"一.什么是单例模式\"></a>一.什么是单例模式</h2><p>​    就如同他的名字一样，’单例’-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。</p>","more":"\n\n\n\n<h3 id=\"1-白话小故事\"><a href=\"#1-白话小故事\" class=\"headerlink\" title=\"1.白话小故事\"></a>1.白话小故事</h3><p>​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。</p>\n<p>​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半–小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。</p>\n<blockquote>\n<p>小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈</p>\n</blockquote>\n<h2 id=\"2-用在哪里\"><a href=\"#2-用在哪里\" class=\"headerlink\" title=\"2.用在哪里\"></a>2.用在哪里</h2><p>​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。</p>\n<h2 id=\"3-在Java中构成的条件\"><a href=\"#3-在Java中构成的条件\" class=\"headerlink\" title=\"3.在Java中构成的条件\"></a>3.在Java中构成的条件</h2><ul>\n<li>静态变量</li>\n<li>静态方法</li>\n<li>私有构造器</li>\n</ul>\n<h2 id=\"二-单例模式的两种形态\"><a href=\"#二-单例模式的两种形态\" class=\"headerlink\" title=\"二.单例模式的两种形态\"></a>二.单例模式的两种形态</h2><h3 id=\"1-懒汉模式\"><a href=\"#1-懒汉模式\" class=\"headerlink\" title=\"1.懒汉模式\"></a>1.懒汉模式</h3><blockquote>\n<p>线程不安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-饿汉模式\"><a href=\"#2-饿汉模式\" class=\"headerlink\" title=\"2.饿汉模式\"></a>2.饿汉模式</h3><blockquote>\n<p>线程安全</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        Singleton singleton1=Singleton.getInstance();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三-懒汉模式优化成线程安全\"><a href=\"#三-懒汉模式优化成线程安全\" class=\"headerlink\" title=\"三.懒汉模式优化成线程安全\"></a>三.懒汉模式优化成线程安全</h2><p>  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。</p>\n<h3 id=\"1-加synchronized关键字\"><a href=\"#1-加synchronized关键字\" class=\"headerlink\" title=\"1.加synchronized关键字\"></a>1.加synchronized关键字</h3><blockquote>\n<p>此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-用”双重检查加锁”\"><a href=\"#2-用”双重检查加锁”\" class=\"headerlink\" title=\"2.用”双重检查加锁”\"></a>2.用”双重检查加锁”</h3><blockquote>\n<p>上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">volatile</span> Singleton unsingleton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(unsingleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//只有当第一次访问的时候才会使用synchronized关键字</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (Singleton.class)&#123;</span><br><span class=\"line\">                unsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsingleton;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"三种线程安全的单例模式比较\"><a href=\"#三种线程安全的单例模式比较\" class=\"headerlink\" title=\"三种线程安全的单例模式比较\"></a>三种线程安全的单例模式比较</h2><ul>\n<li><p>饿汉模式：性能好，写法简单，个人比较推荐用这个</p>\n</li>\n<li><p>加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。</p>\n</li>\n<li><p>volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本</p>\n</li>\n</ul>\n"},{"title":"一个故事一个模式-原型模式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-25T15:34:48.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n![](http://cdn.mjava.top/20191226084321.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:https://github.com/z573419235/GofDemo\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n\n​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n\n\n\n\n\n## 我是鸣人\n\n​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n\n![](http://cdn.mjava.top/20191225222050.gif)\n\n先来看看鸣人的原型实体类:\n\n```java\n/**\n * @author zheng\n *\n * 我是鸣人实体类\n */\n@Data\npublic class Naruto implements Cloneable{\n    /**\n     * 姓名\n     * */\n    private String name=\"鸣人\";\n    /**\n     * 年龄\n     * */\n    private int age=13;\n    /**\n     * 任务\n     * */\n    private String task;\n    /**\n     *爱好\n     * */\n    private ArrayList<String> hobby=new ArrayList<>();\n    /**\n     * 构造方法\n     * */\n    public Naruto(){\n        this.hobby.add(\"吃拉面\");\n        this.hobby.add(\"泡温泉\");\n    }\n\n    /**\n     * 重写Object类的clone方法\n     * */\n    @Override\n    public Naruto clone(){\n        Naruto naruto=null;\n        try {\n            naruto=(Naruto)super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return naruto;\n    }\n\n    @Override\n    public String toString() {\n        return \"Naruto{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                \", task='\" + task + '\\'' +\n                \", hobby=\" + hobby +\n                '}';\n    }\n}\n```\n\n> 为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个`@Data`注解就可以了;\n\n\n\n一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[吃拉面, 泡温泉]}\n```\n\n可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;\n\n![](http://cdn.mjava.top/20191225222314.gif)\n\n## 浅拷贝和深拷贝\n\n原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;\n\n### 浅拷贝\n\n> 浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;\n\n比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\nWTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!\n\n### 深拷贝\n\n> 深拷贝就是在`clone`方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font>\n\n进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:\n\n![](http://cdn.mjava.top/20191225220944.png)\n\n在变一个看看:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\n哈哈,成功了,这下可以安安心心的区吃拉面了吧;\n\n![](http://cdn.mjava.top/20191225222402.gif)\n\n## 总结\n\n​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:<font color=orange>使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font>","source":"_posts/gof/gof-prototype.md","raw":"---\ntitle: 一个故事一个模式-原型模式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-25 23:34:48\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 设计模式\n- 原型模式\ncategories:\n- GOF\n---\n\n\n![](http://cdn.mjava.top/20191226084321.jpg)\n\n> 积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬\n>\n> 所有源代码都在这:https://github.com/z573419235/GofDemo\n>\n> 各位大佬记得点个星星哦\n\n## 前言\n\n​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;\n\n​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在`Java`中核心秘密就是`clone`这个方法,通过重新`Object`中的`clone`方法.来达到原型模式;而要重新`clone`方法就必须要实现`Cloneable`这个接口,不实现这个接口的话就会报`java.lang.CloneNotSupportedException`异常;\n\n\n\n\n\n## 我是鸣人\n\n​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面\n\n![](http://cdn.mjava.top/20191225222050.gif)\n\n先来看看鸣人的原型实体类:\n\n```java\n/**\n * @author zheng\n *\n * 我是鸣人实体类\n */\n@Data\npublic class Naruto implements Cloneable{\n    /**\n     * 姓名\n     * */\n    private String name=\"鸣人\";\n    /**\n     * 年龄\n     * */\n    private int age=13;\n    /**\n     * 任务\n     * */\n    private String task;\n    /**\n     *爱好\n     * */\n    private ArrayList<String> hobby=new ArrayList<>();\n    /**\n     * 构造方法\n     * */\n    public Naruto(){\n        this.hobby.add(\"吃拉面\");\n        this.hobby.add(\"泡温泉\");\n    }\n\n    /**\n     * 重写Object类的clone方法\n     * */\n    @Override\n    public Naruto clone(){\n        Naruto naruto=null;\n        try {\n            naruto=(Naruto)super.clone();\n        } catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        return naruto;\n    }\n\n    @Override\n    public String toString() {\n        return \"Naruto{\" +\n                \"name='\" + name + '\\'' +\n                \", age='\" + age + '\\'' +\n                \", task='\" + task + '\\'' +\n                \", hobby=\" + hobby +\n                '}';\n    }\n}\n```\n\n> 为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个`@Data`注解就可以了;\n\n\n\n一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[吃拉面, 泡温泉]}\n```\n\n可以看到,鸣人本人的任务是去<font color=orange>吃拉面</font>,他的影分身的任务是留着教室<font color=orange>上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=orange>原型模式</font>;\n\n![](http://cdn.mjava.top/20191225222314.gif)\n\n## 浅拷贝和深拷贝\n\n原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=orange>浅拷贝</font>和<font color=orange>深拷贝</font>;\n\n### 浅拷贝\n\n> 浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=orange>和原型共用一个空间,没有给你分配新的内存</font>;\n\n比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\nWTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!\n\n### 深拷贝\n\n> 深拷贝就是在`clone`方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=orange>分配新的内存空间</font>\n\n进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:\n\n![](http://cdn.mjava.top/20191225220944.png)\n\n在变一个看看:\n\n```java\n/**\n * 原型模式\n * @author zheng\n * */\npublic class Main {\n    public static void main(String[] args) {\n        //我是鸣人本人\n        Naruto naruto=new Naruto();\n        //我是影分身\n        Naruto narutoYin=naruto.clone();\n\n        narutoYin.setTask(\"上课\");\n        //影分身不配有爱好\n        narutoYin.getHobby().clear();\n        naruto.setTask(\"吃拉面\");\n\n        System.out.println(\"鸣人本人:\"+naruto.toString());\n        System.out.println(\"影分身:\"+narutoYin.toString());\n\n    }\n}\n//控制台输出\n鸣人本人:Naruto{name='鸣人', age='13', task='吃拉面', hobby=[吃拉面, 泡温泉]}\n影分身:Naruto{name='鸣人', age='13', task='上课', hobby=[]}\n```\n\n哈哈,成功了,这下可以安安心心的区吃拉面了吧;\n\n![](http://cdn.mjava.top/20191225222402.gif)\n\n## 总结\n\n​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如`int`、`long`、`char`等都会被拷贝，但是对于`String`类型，`Java`就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把`String`当做基本类使用即可。注意:<font color=orange>使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font>","slug":"gof/gof-prototype","published":1,"updated":"2019-12-26T00:44:14.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx028000ww2g5ehwt3d8k","content":"<p><img src=\"http://cdn.mjava.top/20191226084321.jpg\" alt></p><blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;</p><a id=\"more\"></a>\n\n\n<p>​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在<code>Java</code>中核心秘密就是<code>clone</code>这个方法,通过重新<code>Object</code>中的<code>clone</code>方法.来达到原型模式;而要重新<code>clone</code>方法就必须要实现<code>Cloneable</code>这个接口,不实现这个接口的话就会报<code>java.lang.CloneNotSupportedException</code>异常;</p>\n<h2 id=\"我是鸣人\"><a href=\"#我是鸣人\" class=\"headerlink\" title=\"我是鸣人\"></a>我是鸣人</h2><p>​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面</p>\n<p><img src=\"http://cdn.mjava.top/20191225222050.gif\" alt></p>\n<p>先来看看鸣人的原型实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 我是鸣人实体类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Naruto</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"鸣人\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任务</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String task;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *爱好</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; hobby=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Naruto</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hobby.add(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hobby.add(<span class=\"string\">\"泡温泉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写Object类的clone方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Naruto <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            naruto=(Naruto)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> naruto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Naruto&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age='\"</span> + age + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", task='\"</span> + task + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", hobby=\"</span> + hobby +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个<code>@Data</code>注解就可以了;</p>\n</blockquote>\n<p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到,鸣人本人的任务是去<font color=\"orange\">吃拉面</font>,他的影分身的任务是留着教室<font color=\"orange\">上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=\"orange\">原型模式</font>;</p>\n<p><img src=\"http://cdn.mjava.top/20191225222314.gif\" alt></p>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=\"orange\">浅拷贝</font>和<font color=\"orange\">深拷贝</font>;</p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=\"orange\">和原型共用一个空间,没有给你分配新的内存</font>;</p>\n</blockquote>\n<p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=\"orange\">分配新的内存空间</font></p>\n</blockquote>\n<p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p>\n<p><img src=\"http://cdn.mjava.top/20191225220944.png\" alt></p>\n<p>在变一个看看:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p>\n<p><img src=\"http://cdn.mjava.top/20191225222402.gif\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如<code>int</code>、<code>long</code>、<code>char</code>等都会被拷贝，但是对于<code>String</code>类型，<code>Java</code>就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把<code>String</code>当做基本类使用即可。注意:<font color=\"orange\">使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191226084321.jpg\" alt></p><blockquote>\n<p>积千里跬步,汇万里江河;每天进步一点点,终有一天将成大佬</p>\n<p>所有源代码都在这:<a href=\"https://github.com/z573419235/GofDemo\" rel=\"noopener\" target=\"_blank\">https://github.com/z573419235/GofDemo</a></p>\n<p>各位大佬记得点个星星哦</p>\n</blockquote><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        前几天生病了,每天头昏脑胀的,诶,生病的时候才知道身体健康的重要性,以后还是要加强锻炼,身体是革命的本钱;</p>","more":"\n\n\n<p>​        隔了差不多有五六天没写日志了,罪过罪过;好了,今天要说的是原型模式,原型模式在<code>Java</code>中核心秘密就是<code>clone</code>这个方法,通过重新<code>Object</code>中的<code>clone</code>方法.来达到原型模式;而要重新<code>clone</code>方法就必须要实现<code>Cloneable</code>这个接口,不实现这个接口的话就会报<code>java.lang.CloneNotSupportedException</code>异常;</p>\n<h2 id=\"我是鸣人\"><a href=\"#我是鸣人\" class=\"headerlink\" title=\"我是鸣人\"></a>我是鸣人</h2><p>​        鸣人最喜欢的就是吃拉面,就算是上课的时候也是心心念念的想着一乐大叔的拉面</p>\n<p><img src=\"http://cdn.mjava.top/20191225222050.gif\" alt></p>\n<p>先来看看鸣人的原型实体类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * 我是鸣人实体类</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Naruto</span> <span class=\"keyword\">implements</span> <span class=\"title\">Cloneable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 姓名</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name=<span class=\"string\">\"鸣人\"</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 年龄</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> age=<span class=\"number\">13</span>;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任务</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String task;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     *爱好</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ArrayList&lt;String&gt; hobby=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 构造方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Naruto</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hobby.add(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.hobby.add(<span class=\"string\">\"泡温泉\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写Object类的clone方法</span></span><br><span class=\"line\"><span class=\"comment\">     * */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Naruto <span class=\"title\">clone</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            naruto=(Naruto)<span class=\"keyword\">super</span>.clone();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> naruto;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"Naruto&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"name='\"</span> + name + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", age='\"</span> + age + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", task='\"</span> + task + <span class=\"string\">'\\''</span> +</span><br><span class=\"line\">                <span class=\"string\">\", hobby=\"</span> + hobby +</span><br><span class=\"line\">                <span class=\"string\">'&#125;'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>为了代码整洁,我安装了lombok插件,所以不用写get/set方法,直接加个<code>@Data</code>注解就可以了;</p>\n</blockquote>\n<p>一天,鸣人上着伊鲁卡老师的课,可是心里还是念念不忘一乐大叔的拉面,想着前几天刚学了影分身之术,想着用分身术逃出去吃拉面.于是他就有变了一个分身留着这上课,自己却跑去吃拉面了;</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到,鸣人本人的任务是去<font color=\"orange\">吃拉面</font>,他的影分身的任务是留着教室<font color=\"orange\">上课</font>;当然鸣人可以通过他本人创建无数个影分身,同时执行多个任务;这就是<font color=\"orange\">原型模式</font>;</p>\n<p><img src=\"http://cdn.mjava.top/20191225222314.gif\" alt></p>\n<h2 id=\"浅拷贝和深拷贝\"><a href=\"#浅拷贝和深拷贝\" class=\"headerlink\" title=\"浅拷贝和深拷贝\"></a>浅拷贝和深拷贝</h2><p>原型模式就是通过一个原型clone出多个和原型一样的类,但是拷贝也分<font color=\"orange\">浅拷贝</font>和<font color=\"orange\">深拷贝</font>;</p>\n<h3 id=\"浅拷贝\"><a href=\"#浅拷贝\" class=\"headerlink\" title=\"浅拷贝\"></a>浅拷贝</h3><blockquote>\n<p>浅拷贝有多浅,浅到就相当于没有给你拷贝,他就是让你<font color=\"orange\">和原型共用一个空间,没有给你分配新的内存</font>;</p>\n</blockquote>\n<p>比如上面的鸣人本人有爱好,但是隐分身一般是没有爱好的,所以创建隐分身要吧爱好给清除调:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>WTF,竟然把本人的爱好也清除调了,那还去吃啥拉面啊,算了算了,安安心心上课吧,诶;叫你上影分身课是时候不认真,失败了吧!!!</p>\n<h3 id=\"深拷贝\"><a href=\"#深拷贝\" class=\"headerlink\" title=\"深拷贝\"></a>深拷贝</h3><blockquote>\n<p>深拷贝就是在<code>clone</code>方法里除了克隆类之外,还要克隆引用对象,这样才会重新给引用对象<font color=\"orange\">分配新的内存空间</font></p>\n</blockquote>\n<p>进过上次的教训,鸣人苦练影分身之术,终于学得核心所在,看看他新的影分身技能吧:</p>\n<p><img src=\"http://cdn.mjava.top/20191225220944.png\" alt></p>\n<p>在变一个看看:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 原型模式</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> zheng</span></span><br><span class=\"line\"><span class=\"comment\"> * */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//我是鸣人本人</span></span><br><span class=\"line\">        Naruto naruto=<span class=\"keyword\">new</span> Naruto();</span><br><span class=\"line\">        <span class=\"comment\">//我是影分身</span></span><br><span class=\"line\">        Naruto narutoYin=naruto.clone();</span><br><span class=\"line\"></span><br><span class=\"line\">        narutoYin.setTask(<span class=\"string\">\"上课\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//影分身不配有爱好</span></span><br><span class=\"line\">        narutoYin.getHobby().clear();</span><br><span class=\"line\">        naruto.setTask(<span class=\"string\">\"吃拉面\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"鸣人本人:\"</span>+naruto.toString());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"影分身:\"</span>+narutoYin.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//控制台输出</span></span><br><span class=\"line\">鸣人本人:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'吃拉面'</span>, hobby=[吃拉面, 泡温泉]&#125;</span><br><span class=\"line\">影分身:Naruto&#123;name=<span class=\"string\">'鸣人'</span>, age=<span class=\"string\">'13'</span>, task=<span class=\"string\">'上课'</span>, hobby=[]&#125;</span><br></pre></td></tr></table></figure>\n\n<p>哈哈,成功了,这下可以安安心心的区吃拉面了吧;</p>\n<p><img src=\"http://cdn.mjava.top/20191225222402.gif\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​        引用设计模式之禅的一句话:内部的数组和引用对象才不拷贝，其他的原始类型比如<code>int</code>、<code>long</code>、<code>char</code>等都会被拷贝，但是对于<code>String</code>类型，<code>Java</code>就希望你把它认为是基本类型，它是没有clone方法的，处理机制也比较特殊，通过字符串池（stringpool）在需要的时候才在内存中创建新的字符串，在使用的时候就把<code>String</code>当做基本类使用即可。注意:<font color=\"orange\">使用clone方法，在类的成员变量上就不要增加final关键字,否则当你重新设置这个成员变量的值时是不能设置的,因为final的不可变的,只能引用原来的值</font></p>\n"},{"title":"Jenkins教程-Docker+GitLab持续部署持续集成","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:02.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](http://cdn.mjava.top/blog/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","source":"_posts/jenkins/build-jenkins-ci-cd.md","raw":"---\ntitle: Jenkins教程-Docker+GitLab持续部署持续集成\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:02\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](http://cdn.mjava.top/blog/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","slug":"jenkins/build-jenkins-ci-cd","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx029000xw2g5r03fu4ie","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>地址</th>\n<th>系统</th>\n<th>安装的软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主机１</td>\n<td>10.25.0.72</td>\n<td>Centos 7</td>\n<td>Docker　,　Jenkins(Docker版)</td>\n</tr>\n<tr>\n<td>主机２</td>\n<td>10.25.0.50</td>\n<td>Cnetos 7</td>\n<td>Docker</td>\n</tr>\n</tbody></table><a id=\"more\"></a>\n\n<h2 id=\"Jenkins所需添加插件\"><a href=\"#Jenkins所需添加插件\" class=\"headerlink\" title=\"Jenkins所需添加插件\"></a>Jenkins所需添加插件</h2><ul>\n<li><p><a href=\"https://plugins.jenkins.io/git-parameter\" rel=\"noopener\" target=\"_blank\">Git Parameter</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/gitlab-plugin\" rel=\"noopener\" target=\"_blank\">GitLab</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/ssh\" rel=\"noopener\" target=\"_blank\">SSH</a></p>\n</li>\n</ul>\n<h2 id=\"创建ssh登录凭据\"><a href=\"#创建ssh登录凭据\" class=\"headerlink\" title=\"创建ssh登录凭据\"></a>创建ssh登录凭据</h2><p><img src=\"http://cdn.mjava.top/blog/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111806.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112160316.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"添加SSH配置\"><a href=\"#添加SSH配置\" class=\"headerlink\" title=\"添加SSH配置\"></a>添加SSH配置</h2><p><img src=\"http://cdn.mjava.top/blog/20191112160521.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>找到SSH remote hosts </p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112160541.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112160920.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"配置Job\"><a href=\"#配置Job\" class=\"headerlink\" title=\"配置Job\"></a>配置Job</h2><blockquote>\n<p>进入上篇文章创建好的Job,在此基础上进行改造</p>\n</blockquote>\n<h3 id=\"配置Git-Parameter-来获取gitlab的Tag数据\"><a href=\"#配置Git-Parameter-来获取gitlab的Tag数据\" class=\"headerlink\" title=\"配置Git Parameter,来获取gitlab的Tag数据\"></a>配置Git Parameter,来获取gitlab的Tag数据</h3><p><img src=\"http://cdn.mjava.top/blog/20191112161424.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"配置触发器\"><a href=\"#配置触发器\" class=\"headerlink\" title=\"配置触发器\"></a>配置触发器</h3><blockquote>\n<p>点击最下面的Generate,生成秘钥。然后记下URL:<a href=\"http://172.16.54.131:8080/project/JenkinsTest\" rel=\"noopener\" target=\"_blank\">http://172.16.54.131:8080/project/JenkinsTest</a> 和生成的秘钥：60327d68d10f1f7621696edd42719d1c</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112161808.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加构建完成后的动作\"><a href=\"#添加构建完成后的动作\" class=\"headerlink\" title=\"添加构建完成后的动作\"></a>添加构建完成后的动作</h3><p><img src=\"http://cdn.mjava.top/blog/20191112161842.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\"><a href=\"#添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\" class=\"headerlink\" title=\"添加Execute shell 和Execute shell script on remote host using ssh\"></a>添加Execute shell 和Execute shell script on remote host using ssh</h3><ul>\n<li>Execute shell ： 执行Jenkins所在服务器的脚本</li>\n<li>Execute shell script on remote host using ssh：登录远程服务器执行脚本</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20191112161940.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"编写你要执行的脚本\"><a href=\"#编写你要执行的脚本\" class=\"headerlink\" title=\"编写你要执行的脚本\"></a>编写你要执行的脚本</h3><blockquote>\n<p>由于是自定义的，内容我就不粘贴出来了.编写好后点击保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112164613.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p><img src=\"http://cdn.mjava.top/blog/20191112164653.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"><a href=\"#选择你要构建的tag标签，点击Build开始构建并自动部署\" class=\"headerlink\" title=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"></a>选择你要构建的tag标签，点击Build开始构建并自动部署</h4><p><img src=\"http://cdn.mjava.top/blog/20191112164746.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><blockquote>\n<p>自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署</p>\n</blockquote>\n<h4 id=\"自动构建流程\"><a href=\"#自动构建流程\" class=\"headerlink\" title=\"自动构建流程\"></a>自动构建流程</h4><p><img src=\"http://cdn.mjava.top/blog/201911121717.png\" alt=\"Jenkins界面\"></p>\n<p>####　配置GitLab代码仓库</p>\n<blockquote>\n<p>点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112165036.png\" alt=\"Jenkins界面\"></p>\n<p>　</p>\n<h4 id=\"Git打Tag标签\"><a href=\"#Git打Tag标签\" class=\"headerlink\" title=\"Git打Tag标签\"></a>Git打Tag标签</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag</span><br><span class=\"line\">git push origin 1.0 \t\t\t//上传1.0标签到远程仓库</span><br></pre></td></tr></table></figure>\n\n<p>上传完tag后此时Jenkins已经开始自动构建并部署项目了；</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>地址</th>\n<th>系统</th>\n<th>安装的软件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>主机１</td>\n<td>10.25.0.72</td>\n<td>Centos 7</td>\n<td>Docker　,　Jenkins(Docker版)</td>\n</tr>\n<tr>\n<td>主机２</td>\n<td>10.25.0.50</td>\n<td>Cnetos 7</td>\n<td>Docker</td>\n</tr>\n</tbody></table>","more":"\n\n<h2 id=\"Jenkins所需添加插件\"><a href=\"#Jenkins所需添加插件\" class=\"headerlink\" title=\"Jenkins所需添加插件\"></a>Jenkins所需添加插件</h2><ul>\n<li><p><a href=\"https://plugins.jenkins.io/git-parameter\" rel=\"noopener\" target=\"_blank\">Git Parameter</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/gitlab-plugin\" rel=\"noopener\" target=\"_blank\">GitLab</a></p>\n</li>\n<li><p><a href=\"https://plugins.jenkins.io/ssh\" rel=\"noopener\" target=\"_blank\">SSH</a></p>\n</li>\n</ul>\n<h2 id=\"创建ssh登录凭据\"><a href=\"#创建ssh登录凭据\" class=\"headerlink\" title=\"创建ssh登录凭据\"></a>创建ssh登录凭据</h2><p><img src=\"http://cdn.mjava.top/blog/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111806.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112160316.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"添加SSH配置\"><a href=\"#添加SSH配置\" class=\"headerlink\" title=\"添加SSH配置\"></a>添加SSH配置</h2><p><img src=\"http://cdn.mjava.top/blog/20191112160521.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>找到SSH remote hosts </p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112160541.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112160920.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"配置Job\"><a href=\"#配置Job\" class=\"headerlink\" title=\"配置Job\"></a>配置Job</h2><blockquote>\n<p>进入上篇文章创建好的Job,在此基础上进行改造</p>\n</blockquote>\n<h3 id=\"配置Git-Parameter-来获取gitlab的Tag数据\"><a href=\"#配置Git-Parameter-来获取gitlab的Tag数据\" class=\"headerlink\" title=\"配置Git Parameter,来获取gitlab的Tag数据\"></a>配置Git Parameter,来获取gitlab的Tag数据</h3><p><img src=\"http://cdn.mjava.top/blog/20191112161424.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"配置触发器\"><a href=\"#配置触发器\" class=\"headerlink\" title=\"配置触发器\"></a>配置触发器</h3><blockquote>\n<p>点击最下面的Generate,生成秘钥。然后记下URL:<a href=\"http://172.16.54.131:8080/project/JenkinsTest\" rel=\"noopener\" target=\"_blank\">http://172.16.54.131:8080/project/JenkinsTest</a> 和生成的秘钥：60327d68d10f1f7621696edd42719d1c</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112161808.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加构建完成后的动作\"><a href=\"#添加构建完成后的动作\" class=\"headerlink\" title=\"添加构建完成后的动作\"></a>添加构建完成后的动作</h3><p><img src=\"http://cdn.mjava.top/blog/20191112161842.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\"><a href=\"#添加Execute-shell-和Execute-shell-script-on-remote-host-using-ssh\" class=\"headerlink\" title=\"添加Execute shell 和Execute shell script on remote host using ssh\"></a>添加Execute shell 和Execute shell script on remote host using ssh</h3><ul>\n<li>Execute shell ： 执行Jenkins所在服务器的脚本</li>\n<li>Execute shell script on remote host using ssh：登录远程服务器执行脚本</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20191112161940.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"编写你要执行的脚本\"><a href=\"#编写你要执行的脚本\" class=\"headerlink\" title=\"编写你要执行的脚本\"></a>编写你要执行的脚本</h3><blockquote>\n<p>由于是自定义的，内容我就不粘贴出来了.编写好后点击保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112164613.png\" alt=\"Jenkins界面\"></p>\n<h2 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h2><h3 id=\"手动构建\"><a href=\"#手动构建\" class=\"headerlink\" title=\"手动构建\"></a>手动构建</h3><p><img src=\"http://cdn.mjava.top/blog/20191112164653.png\" alt=\"Jenkins界面\"></p>\n<h4 id=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"><a href=\"#选择你要构建的tag标签，点击Build开始构建并自动部署\" class=\"headerlink\" title=\"选择你要构建的tag标签，点击Build开始构建并自动部署\"></a>选择你要构建的tag标签，点击Build开始构建并自动部署</h4><p><img src=\"http://cdn.mjava.top/blog/20191112164746.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"自动构建\"><a href=\"#自动构建\" class=\"headerlink\" title=\"自动构建\"></a>自动构建</h3><blockquote>\n<p>自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署</p>\n</blockquote>\n<h4 id=\"自动构建流程\"><a href=\"#自动构建流程\" class=\"headerlink\" title=\"自动构建流程\"></a>自动构建流程</h4><p><img src=\"http://cdn.mjava.top/blog/201911121717.png\" alt=\"Jenkins界面\"></p>\n<p>####　配置GitLab代码仓库</p>\n<blockquote>\n<p>点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112165036.png\" alt=\"Jenkins界面\"></p>\n<p>　</p>\n<h4 id=\"Git打Tag标签\"><a href=\"#Git打Tag标签\" class=\"headerlink\" title=\"Git打Tag标签\"></a>Git打Tag标签</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">git tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag</span><br><span class=\"line\">git push origin 1.0 \t\t\t//上传1.0标签到远程仓库</span><br></pre></td></tr></table></figure>\n\n<p>上传完tag后此时Jenkins已经开始自动构建并部署项目了；</p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；</p>\n"},{"title":"Jenkins教程-搭建(Docker版)","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:34.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](http://cdn.mjava.top/blog/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](http://cdn.mjava.top/blog/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](http://cdn.mjava.top/blog/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](http://cdn.mjava.top/blog/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](http://cdn.mjava.top/blog/jenkins_20191107160204.png)\n\n","source":"_posts/jenkins/build-jenkins-docker.md","raw":"---\ntitle: Jenkins教程-搭建(Docker版)\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\n  - Docker\n  - Linux\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:34\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](http://cdn.mjava.top/blog/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](http://cdn.mjava.top/blog/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](http://cdn.mjava.top/blog/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](http://cdn.mjava.top/blog/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](http://cdn.mjava.top/blog/jenkins_20191107160204.png)\n\n","slug":"jenkins/build-jenkins-docker","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02a0010w2g5qp0hhs0z","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>主机：172.16.54.131</p>\n</li>\n<li><p>系统：Cnetos 7</p>\n</li>\n</ul><h2 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker-CE\"></a>安装Docker-CE</h2><h3 id=\"检查Docker\"><a href=\"#检查Docker\" class=\"headerlink\" title=\"检查Docker\"></a>检查Docker</h3><p>首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤</p><a id=\"more\"></a>\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>本教程以centos7安装方式说明，其他系统安装方式会有不同</li>\n</ul>\n<p>执行以下命令，安装Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一条命令：为添加源做准备 使其支持存储</li>\n<li>第二条命令：添加docker-ce软件源</li>\n<li>第三条命令：安装docker-ce</li>\n<li>第四条命令：启动docker服务</li>\n<li>第五条命令：设置开启自启</li>\n</ul>\n<h2 id=\"安装Jenkins的Docker容器\"><a href=\"#安装Jenkins的Docker容器\" class=\"headerlink\" title=\"安装Jenkins的Docker容器\"></a>安装Jenkins的Docker容器</h2><h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><p>在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/jenkins     \t\t\t//创建文件夹</span><br><span class=\"line\">chmod 7777 /opt/jenkins\t\t\t//授予权限</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。</p>\n</blockquote>\n<h3 id=\"拉取官方镜像\"><a href=\"#拉取官方镜像\" class=\"headerlink\" title=\"拉取官方镜像\"></a>拉取官方镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 </p>\n</blockquote>\n<h3 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png\" alt=\"log界面\"></p>\n<blockquote>\n<p>记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到</p>\n</blockquote>\n<h2 id=\"初始化Jenkins\"><a href=\"#初始化Jenkins\" class=\"headerlink\" title=\"初始化Jenkins\"></a>初始化Jenkins</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png\" alt=\"jenkins界面\"></p>\n<p>在输入框中填入刚才保存的密码</p>\n<h3 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h3><p>推荐直接选 安装推荐的插件</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png\" alt=\"Jenkins自定义界面\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>到这个界面等他安装完成，时间会长一点</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_191107141216.png\" alt=\"Jenkins安装插件\"></p>\n<blockquote>\n<p>如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章</p>\n<p><a href=\"https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">Jenkins初始化界面插件安装失败解决方法</a></p>\n</blockquote>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>设置你的登录账号和密码，然后点保存完成<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160016.png\" alt=\"Jenkins创建用户\"></p>\n<h3 id=\"实例配置\"><a href=\"#实例配置\" class=\"headerlink\" title=\"实例配置\"></a>实例配置</h3><p>默认直接点保存完成<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160056.png\" alt=\"Jenkins实例配置\"></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>点击开始使用Jenkins<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160129.png\" alt=\"Jenkins开始使用\"></p>\n<h3 id=\"Jenkins主界面\"><a href=\"#Jenkins主界面\" class=\"headerlink\" title=\"Jenkins主界面\"></a>Jenkins主界面</h3><p>进入Jenkins主界面，到此教程结束<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160204.png\" alt=\"Jenkins主界面\"></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>主机：172.16.54.131</p>\n</li>\n<li><p>系统：Cnetos 7</p>\n</li>\n</ul><h2 id=\"安装Docker-CE\"><a href=\"#安装Docker-CE\" class=\"headerlink\" title=\"安装Docker-CE\"></a>安装Docker-CE</h2><h3 id=\"检查Docker\"><a href=\"#检查Docker\" class=\"headerlink\" title=\"检查Docker\"></a>检查Docker</h3><p>首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤</p>","more":"\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker -v</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker</p>\n</blockquote>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><ul>\n<li>本教程以centos7安装方式说明，其他系统安装方式会有不同</li>\n</ul>\n<p>执行以下命令，安装Docker</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\">yum-config-manager \\</span><br><span class=\"line\">    --add-repo \\</span><br><span class=\"line\">    https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\">    </span><br><span class=\"line\">yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\">service docker start</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable docker</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第一条命令：为添加源做准备 使其支持存储</li>\n<li>第二条命令：添加docker-ce软件源</li>\n<li>第三条命令：安装docker-ce</li>\n<li>第四条命令：启动docker服务</li>\n<li>第五条命令：设置开启自启</li>\n</ul>\n<h2 id=\"安装Jenkins的Docker容器\"><a href=\"#安装Jenkins的Docker容器\" class=\"headerlink\" title=\"安装Jenkins的Docker容器\"></a>安装Jenkins的Docker容器</h2><h3 id=\"创建文件夹\"><a href=\"#创建文件夹\" class=\"headerlink\" title=\"创建文件夹\"></a>创建文件夹</h3><p>在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir /opt/jenkins     \t\t\t//创建文件夹</span><br><span class=\"line\">chmod 7777 /opt/jenkins\t\t\t//授予权限</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。</p>\n</blockquote>\n<h3 id=\"拉取官方镜像\"><a href=\"#拉取官方镜像\" class=\"headerlink\" title=\"拉取官方镜像\"></a>拉取官方镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker pull jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 </p>\n</blockquote>\n<h3 id=\"查看容器日志\"><a href=\"#查看容器日志\" class=\"headerlink\" title=\"查看容器日志\"></a>查看容器日志</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker logs jenkins</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png\" alt=\"log界面\"></p>\n<blockquote>\n<p>记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到</p>\n</blockquote>\n<h2 id=\"初始化Jenkins\"><a href=\"#初始化Jenkins\" class=\"headerlink\" title=\"初始化Jenkins\"></a>初始化Jenkins</h2><h3 id=\"解锁\"><a href=\"#解锁\" class=\"headerlink\" title=\"解锁\"></a>解锁</h3><p>在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png\" alt=\"jenkins界面\"></p>\n<p>在输入框中填入刚才保存的密码</p>\n<h3 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h3><p>推荐直接选 安装推荐的插件</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png\" alt=\"Jenkins自定义界面\"></p>\n<h3 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h3><p>到这个界面等他安装完成，时间会长一点</p>\n<p><img src=\"http://cdn.mjava.top/blog/jenkins_191107141216.png\" alt=\"Jenkins安装插件\"></p>\n<blockquote>\n<p>如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章</p>\n<p><a href=\"https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/\">Jenkins初始化界面插件安装失败解决方法</a></p>\n</blockquote>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><p>设置你的登录账号和密码，然后点保存完成<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160016.png\" alt=\"Jenkins创建用户\"></p>\n<h3 id=\"实例配置\"><a href=\"#实例配置\" class=\"headerlink\" title=\"实例配置\"></a>实例配置</h3><p>默认直接点保存完成<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160056.png\" alt=\"Jenkins实例配置\"></p>\n<h3 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h3><p>点击开始使用Jenkins<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160129.png\" alt=\"Jenkins开始使用\"></p>\n<h3 id=\"Jenkins主界面\"><a href=\"#Jenkins主界面\" class=\"headerlink\" title=\"Jenkins主界面\"></a>Jenkins主界面</h3><p>进入Jenkins主界面，到此教程结束<br><img src=\"http://cdn.mjava.top/blog/jenkins_20191107160204.png\" alt=\"Jenkins主界面\"></p>\n"},{"title":"Jenkins教程-创建Maven项目","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:26:19.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110029.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112803.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112841.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122030.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122112.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122135.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","source":"_posts/jenkins/build-jenkins-mavne.md","raw":"---\ntitle: Jenkins教程-创建Maven项目\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:26:19\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110029.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112803.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112841.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122030.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122112.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122135.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","slug":"jenkins/build-jenkins-mavne","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02b0013w2g5v60mylqy","content":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；</p><a id=\"more\"></a>\n\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Centos 7</li>\n<li>Jenkins(Docker版)</li>\n</ul>\n<h3 id=\"所需插件\"><a href=\"#所需插件\" class=\"headerlink\" title=\"所需插件\"></a>所需插件</h3><blockquote>\n<p>除了搭建Jenkins时安装的插件,还需安装的插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/maven-plugin\" rel=\"noopener\" target=\"_blank\">Maven Integration</a></li>\n</ul>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置<br><img src=\"http://cdn.mjava.top/blog/20191112105932.png\" alt=\"Jenkins界面\"></p>\n<p>然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191112110029.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112110130.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Git登录凭证\"><a href=\"#创建Git登录凭证\" class=\"headerlink\" title=\"创建Git登录凭证\"></a>创建Git登录凭证</h3><p>点击侧边栏的凭证，然后按图点击<br><img src=\"http://cdn.mjava.top/blog/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<p>这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111806.png\" alt=\"Jenkins界面\"></p>\n<p>保存后就会出现你保存好的凭证；</p>\n<h2 id=\"创建JOB\"><a href=\"#创建JOB\" class=\"headerlink\" title=\"创建JOB\"></a>创建JOB</h2><p><img src=\"http://cdn.mjava.top/blog/20191112111950.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Maven项目\"><a href=\"#创建Maven项目\" class=\"headerlink\" title=\"创建Maven项目\"></a>创建Maven项目</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112035.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"><a href=\"#输入你的gitlab项目地址，然后选择刚才配置的凭证\" class=\"headerlink\" title=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"></a>输入你的gitlab项目地址，然后选择刚才配置的凭证</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112620.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入Maven打包命令，然后点击保存\"><a href=\"#输入Maven打包命令，然后点击保存\" class=\"headerlink\" title=\"输入Maven打包命令，然后点击保存\"></a>输入Maven打包命令，然后点击保存</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112719.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112747.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建项目日志\"><a href=\"#查看构建项目日志\" class=\"headerlink\" title=\"查看构建项目日志\"></a>查看构建项目日志</h3><blockquote>\n<p>第一次构建会比慢，因为他要下载maven相关构建的包</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112112803.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112112841.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112112854.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建好的jar包\"><a href=\"#查看构建好的jar包\" class=\"headerlink\" title=\"查看构建好的jar包\"></a>查看构建好的jar包</h3><p><img src=\"http://cdn.mjava.top/blog/20191112122030.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122112.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122135.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122200.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程</p>\n</blockquote>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ul>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-docker/\">Jenkins教程-搭建(Docker版)</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a></p>\n</li>\n<li><p><a href=\"https://mjava.top/jenkins/build-jenkins-ci-cd/\">Jenkins教程-Docker+GitLab持续部署持续集成</a></p>\n</li>\n</ul><h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；</p>","more":"\n\n<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><ul>\n<li>Centos 7</li>\n<li>Jenkins(Docker版)</li>\n</ul>\n<h3 id=\"所需插件\"><a href=\"#所需插件\" class=\"headerlink\" title=\"所需插件\"></a>所需插件</h3><blockquote>\n<p>除了搭建Jenkins时安装的插件,还需安装的插件</p>\n</blockquote>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/maven-plugin\" rel=\"noopener\" target=\"_blank\">Maven Integration</a></li>\n</ul>\n<h3 id=\"安装Maven\"><a href=\"#安装Maven\" class=\"headerlink\" title=\"安装Maven\"></a>安装Maven</h3><p>点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置<br><img src=\"http://cdn.mjava.top/blog/20191112105932.png\" alt=\"Jenkins界面\"></p>\n<p>然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191112110029.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112110130.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Git登录凭证\"><a href=\"#创建Git登录凭证\" class=\"headerlink\" title=\"创建Git登录凭证\"></a>创建Git登录凭证</h3><p>点击侧边栏的凭证，然后按图点击<br><img src=\"http://cdn.mjava.top/blog/20191112111043.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111058.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111115.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111130.png\" alt=\"Jenkins界面\"></p>\n<p>这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191112111529.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112111806.png\" alt=\"Jenkins界面\"></p>\n<p>保存后就会出现你保存好的凭证；</p>\n<h2 id=\"创建JOB\"><a href=\"#创建JOB\" class=\"headerlink\" title=\"创建JOB\"></a>创建JOB</h2><p><img src=\"http://cdn.mjava.top/blog/20191112111950.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"创建Maven项目\"><a href=\"#创建Maven项目\" class=\"headerlink\" title=\"创建Maven项目\"></a>创建Maven项目</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112035.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"><a href=\"#输入你的gitlab项目地址，然后选择刚才配置的凭证\" class=\"headerlink\" title=\"输入你的gitlab项目地址，然后选择刚才配置的凭证\"></a>输入你的gitlab项目地址，然后选择刚才配置的凭证</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112620.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"输入Maven打包命令，然后点击保存\"><a href=\"#输入Maven打包命令，然后点击保存\" class=\"headerlink\" title=\"输入Maven打包命令，然后点击保存\"></a>输入Maven打包命令，然后点击保存</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112719.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><p><img src=\"http://cdn.mjava.top/blog/20191112112747.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建项目日志\"><a href=\"#查看构建项目日志\" class=\"headerlink\" title=\"查看构建项目日志\"></a>查看构建项目日志</h3><blockquote>\n<p>第一次构建会比慢，因为他要下载maven相关构建的包</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20191112112803.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112112841.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112112854.png\" alt=\"Jenkins界面\"></p>\n<h3 id=\"查看构建好的jar包\"><a href=\"#查看构建好的jar包\" class=\"headerlink\" title=\"查看构建好的jar包\"></a>查看构建好的jar包</h3><p><img src=\"http://cdn.mjava.top/blog/20191112122030.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122112.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122135.png\" alt=\"Jenkins界面\"><br><img src=\"http://cdn.mjava.top/blog/20191112122200.png\" alt=\"Jenkins界面\"></p>\n<blockquote>\n<p>到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程</p>\n</blockquote>\n"},{"title":"Jenkins教程-集成SonarQube","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-13T07:38:02.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 什么是SonarQube?\n\n看看维基百科的说明：\n![](http://cdn.mjava.top/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ)\n\n### SonarQube与CI/CD架构图\n![SonarQube与CI/CD架构图](http://cdn.mjava.top/FpResgoc3tny2jvGqaqudPwCwstj)\n\n## Docker运行SonarQube\n\n简单了解之后，开始安装SonarQube.这里用Docker安装\n\n> 注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL\n\n- SonarQube 6.7.7\n- Docker-CE 19.03.1\n- Mysql 5.7\n\n### 安装\n\n直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．\n\n> 注意：创建容器前一定要先保证你连的容器有对应的数据库\n\n```shell\ndocker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false\" --restart=always sonarqube:6.7.7-community\n```\n\n- --link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．\n\n- SONARQUBE_JDBC_USERNAME ：数据库的账户\n\n- SONARQUBE_JDBC_PASSWORD ：数据库密码\n\n\n\n### 访问\n\n安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．\n\n![](http://cdn.mjava.top/Fs08WpcVDcL3n32MxoCNPDMtu1r5)\n\n\n## Jenkins集成SonarQube\n\nJenkins和SonarQube都是运行在Docker容器里的\n\n### 下载和安装插件\n\n直接下载最新版的，然后导入，导入的方法可以看[插件导入方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n- 插件下载地址：https://updates.jenkins.io/download/plugins/sonar/\n\n\n\n### SonarQube生成Token\n\n进入SonarQube管理界面\n\nAdministration->Security->Users\n\n![](http://cdn.mjava.top/FpFSYEgJfsJIwgNMA6tHHZtdAtpV)\n\n\n\n然后随便输入一个名字，点击生成，记下Token\n\n![](http://cdn.mjava.top/FhTOSglZYOrP5poo_mmR3SGoobsD)\n\n\n\n### 添加全局凭证\n\n类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token\n\n![](http://cdn.mjava.top/FrKo5EjJ9-78uYbDjBpiuVkeu-_5)\n\n### 设置SonarQube servers\n\n进入　系统管理->系统设置->SonarQube servers　　　　<font color=orange>设置好后点保存</font>\n\n> 因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口\n\n![](http://cdn.mjava.top/FpevTpJePMDg9-HSoQoSOCNORHL8)\n\n\n\n### 安装SonarQube Scanner\n\n#### 下载压缩包\n\n- 下载SonarQube Scanner压缩包：[SonarQube Scanner](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip)\n\n#### 解压到Jenkins挂载出来的目录里\n\n只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange>**我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了**</font>\n\n#### Jenkins配置全局工具\n\n进入　系统管理->全局工具配置->SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font>\n\n<font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font>\n\n![](http://cdn.mjava.top/Fpgv2yqskGjp37mfoxHC6MGtIAPt)\n\n\n\n## 构建一个Maven项目\n\n网上很多教程说要勾上这个选项：\n\n![](http://cdn.mjava.top/FsSrQCDF5O9x4sufLZkFRz40toHI)\n其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you're using \"SonarQube Scanner\" or \"SonarScanner for MSBuild\" build steps.</font>\n\n翻译过来就是：![](http://cdn.mjava.top/FrM7HmTx_APStJMI0OHlMQO6WL3W)\n因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；\n\n\n\n\n\n### 开始构建\n- 具体怎么构建项目可以看：[Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/),这里就不多介绍了\n\n#### 添加Execute SonarQube Scanner\n\n在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了\n\n![](http://cdn.mjava.top/FgZ021lPaTWzgOPsG7veK1cn7lIB)\n\n在<font color=orange>Analysis properties</font>里填上构建的参数\n\n![](http://cdn.mjava.top/FiFA65-xUZCh62Y5HfIgxQzvMx7D)\n\n>唯一的项目标识符（必填）\n>sonar.projectKey =tiny-config1\n>\n>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）\n>sonar.projectName =tiny-config1\n>sonar.projectVersion = 1.0\n>\n>源目录的路径（必需）\n>sonar.sources = srcDir1，srcDir2\n>\n>测试源目录的路径（可选）\n>sonar.tests = testDir1，testDir2\n>\n>Java项目编译类的路径（可选）\n>sonar.java.binaries = bin\n>\n>逗号分隔的库路径列表（可选）\n>sonar.java.libraries = path / to / library.jar，path / to / classes / dir\n>\n>附加参数\n>sonar.my.property =value\n\n保存后就可以正常构建了．\n\n#### 错误解决（没有错误可跳过这段）\n如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的\n![](http://cdn.mjava.top/FnTRL4pSwrKk5Xwbzobo89VKHf5m)\n\n##### 升级SonarQube的Java版本\n\n进入SonarQube的管理台： Administration->Marketplace->SonarJava\n\n> 如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮\n\n![](http://cdn.mjava.top/FgbCXvUiteJ9iGCCYC6qbInX0VSX)\n\n\n\n### 构建完成后\n\nJenkins控制台显示SUCCESS就表示构建成功了\n\n![](http://cdn.mjava.top/FoijfnBHiJAZ7lA7YqmdQb-bEqUF)\n\n这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了\n\n![](http://cdn.mjava.top/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ)\n\n\n这里就可以看到结果了\n\n![](http://cdn.mjava.top/FkPydWtLuuliKAq1hc8Ex45nnTlu)\n\n\n## 总结\n\n到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.\n\n在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；","source":"_posts/jenkins/build-jenkins-sonarqube.md","raw":"---\ntitle: Jenkins教程-集成SonarQube\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-13 15:38:02\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Jenkins\n- SonarQube\n- Docker\ncategories:\n- Jenkins\n---\n\n\n\n## 什么是SonarQube?\n\n看看维基百科的说明：\n![](http://cdn.mjava.top/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ)\n\n### SonarQube与CI/CD架构图\n![SonarQube与CI/CD架构图](http://cdn.mjava.top/FpResgoc3tny2jvGqaqudPwCwstj)\n\n## Docker运行SonarQube\n\n简单了解之后，开始安装SonarQube.这里用Docker安装\n\n> 注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL\n\n- SonarQube 6.7.7\n- Docker-CE 19.03.1\n- Mysql 5.7\n\n### 安装\n\n直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．\n\n> 注意：创建容器前一定要先保证你连的容器有对应的数据库\n\n```shell\ndocker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance&useSSL=false\" --restart=always sonarqube:6.7.7-community\n```\n\n- --link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．\n\n- SONARQUBE_JDBC_USERNAME ：数据库的账户\n\n- SONARQUBE_JDBC_PASSWORD ：数据库密码\n\n\n\n### 访问\n\n安装好后直接访问<font color=orange>9099</font>端口，登录的账户和密码默认都是<font color=orange>admin</font>．首页就是这个样子的．\n\n![](http://cdn.mjava.top/Fs08WpcVDcL3n32MxoCNPDMtu1r5)\n\n\n## Jenkins集成SonarQube\n\nJenkins和SonarQube都是运行在Docker容器里的\n\n### 下载和安装插件\n\n直接下载最新版的，然后导入，导入的方法可以看[插件导入方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n- 插件下载地址：https://updates.jenkins.io/download/plugins/sonar/\n\n\n\n### SonarQube生成Token\n\n进入SonarQube管理界面\n\nAdministration->Security->Users\n\n![](http://cdn.mjava.top/FpFSYEgJfsJIwgNMA6tHHZtdAtpV)\n\n\n\n然后随便输入一个名字，点击生成，记下Token\n\n![](http://cdn.mjava.top/FhTOSglZYOrP5poo_mmR3SGoobsD)\n\n\n\n### 添加全局凭证\n\n类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token\n\n![](http://cdn.mjava.top/FrKo5EjJ9-78uYbDjBpiuVkeu-_5)\n\n### 设置SonarQube servers\n\n进入　系统管理->系统设置->SonarQube servers　　　　<font color=orange>设置好后点保存</font>\n\n> 因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口\n\n![](http://cdn.mjava.top/FpevTpJePMDg9-HSoQoSOCNORHL8)\n\n\n\n### 安装SonarQube Scanner\n\n#### 下载压缩包\n\n- 下载SonarQube Scanner压缩包：[SonarQube Scanner](https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip)\n\n#### 解压到Jenkins挂载出来的目录里\n\n只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=orange>**我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了**</font>\n\n#### Jenkins配置全局工具\n\n进入　系统管理->全局工具配置->SonarQube Scanner     找到模块后点击<font color=orange>新增SonarQube Scanner</font>\n\n<font color=orange>SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font>\n\n![](http://cdn.mjava.top/Fpgv2yqskGjp37mfoxHC6MGtIAPt)\n\n\n\n## 构建一个Maven项目\n\n网上很多教程说要勾上这个选项：\n\n![](http://cdn.mjava.top/FsSrQCDF5O9x4sufLZkFRz40toHI)\n其实这个是可选的，下面有一句话：<font color=orange>These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you're using \"SonarQube Scanner\" or \"SonarScanner for MSBuild\" build steps.</font>\n\n翻译过来就是：![](http://cdn.mjava.top/FrM7HmTx_APStJMI0OHlMQO6WL3W)\n因为我们这里用的就是<font color=orange>SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；\n\n\n\n\n\n### 开始构建\n- 具体怎么构建项目可以看：[Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/),这里就不多介绍了\n\n#### 添加Execute SonarQube Scanner\n\n在原来构建的基础上加上<font color=orange>Execute SonarQube Scanner</font>，就可以了\n\n![](http://cdn.mjava.top/FgZ021lPaTWzgOPsG7veK1cn7lIB)\n\n在<font color=orange>Analysis properties</font>里填上构建的参数\n\n![](http://cdn.mjava.top/FiFA65-xUZCh62Y5HfIgxQzvMx7D)\n\n>唯一的项目标识符（必填）\n>sonar.projectKey =tiny-config1\n>\n>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）\n>sonar.projectName =tiny-config1\n>sonar.projectVersion = 1.0\n>\n>源目录的路径（必需）\n>sonar.sources = srcDir1，srcDir2\n>\n>测试源目录的路径（可选）\n>sonar.tests = testDir1，testDir2\n>\n>Java项目编译类的路径（可选）\n>sonar.java.binaries = bin\n>\n>逗号分隔的库路径列表（可选）\n>sonar.java.libraries = path / to / library.jar，path / to / classes / dir\n>\n>附加参数\n>sonar.my.property =value\n\n保存后就可以正常构建了．\n\n#### 错误解决（没有错误可跳过这段）\n如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的\n![](http://cdn.mjava.top/FnTRL4pSwrKk5Xwbzobo89VKHf5m)\n\n##### 升级SonarQube的Java版本\n\n进入SonarQube的管理台： Administration->Marketplace->SonarJava\n\n> 如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮\n\n![](http://cdn.mjava.top/FgbCXvUiteJ9iGCCYC6qbInX0VSX)\n\n\n\n### 构建完成后\n\nJenkins控制台显示SUCCESS就表示构建成功了\n\n![](http://cdn.mjava.top/FoijfnBHiJAZ7lA7YqmdQb-bEqUF)\n\n这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了\n\n![](http://cdn.mjava.top/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ)\n\n\n这里就可以看到结果了\n\n![](http://cdn.mjava.top/FkPydWtLuuliKAq1hc8Ex45nnTlu)\n\n\n## 总结\n\n到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.\n\n在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；","slug":"jenkins/build-jenkins-sonarqube","published":1,"updated":"2019-12-13T08:43:15.999Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02c0017w2g5unqckygm","content":"<h2 id=\"什么是SonarQube\"><a href=\"#什么是SonarQube\" class=\"headerlink\" title=\"什么是SonarQube?\"></a>什么是SonarQube?</h2><p>看看维基百科的说明：<br><img src=\"http://cdn.mjava.top/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ\" alt></p><h3 id=\"SonarQube与CI-CD架构图\"><a href=\"#SonarQube与CI-CD架构图\" class=\"headerlink\" title=\"SonarQube与CI/CD架构图\"></a>SonarQube与CI/CD架构图</h3><p><img src=\"http://cdn.mjava.top/FpResgoc3tny2jvGqaqudPwCwstj\" alt=\"SonarQube与CI/CD架构图\"></p><h2 id=\"Docker运行SonarQube\"><a href=\"#Docker运行SonarQube\" class=\"headerlink\" title=\"Docker运行SonarQube\"></a>Docker运行SonarQube</h2><p>简单了解之后，开始安装SonarQube.这里用Docker安装</p><blockquote>\n<p>注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL</p>\n</blockquote><a id=\"more\"></a>\n\n\n\n<ul>\n<li>SonarQube 6.7.7</li>\n<li>Docker-CE 19.03.1</li>\n<li>Mysql 5.7</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．</p>\n<blockquote>\n<p>注意：创建容器前一定要先保证你连的容器有对应的数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false\" --restart=always sonarqube:6.7.7-community</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．</p>\n</li>\n<li><p>SONARQUBE_JDBC_USERNAME ：数据库的账户</p>\n</li>\n<li><p>SONARQUBE_JDBC_PASSWORD ：数据库密码</p>\n</li>\n</ul>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p>安装好后直接访问<font color=\"orange\">9099</font>端口，登录的账户和密码默认都是<font color=\"orange\">admin</font>．首页就是这个样子的．</p>\n<p><img src=\"http://cdn.mjava.top/Fs08WpcVDcL3n32MxoCNPDMtu1r5\" alt></p>\n<h2 id=\"Jenkins集成SonarQube\"><a href=\"#Jenkins集成SonarQube\" class=\"headerlink\" title=\"Jenkins集成SonarQube\"></a>Jenkins集成SonarQube</h2><p>Jenkins和SonarQube都是运行在Docker容器里的</p>\n<h3 id=\"下载和安装插件\"><a href=\"#下载和安装插件\" class=\"headerlink\" title=\"下载和安装插件\"></a>下载和安装插件</h3><p>直接下载最新版的，然后导入，导入的方法可以看<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">插件导入方法</a></p>\n<ul>\n<li>插件下载地址：<a href=\"https://updates.jenkins.io/download/plugins/sonar/\" rel=\"noopener\" target=\"_blank\">https://updates.jenkins.io/download/plugins/sonar/</a></li>\n</ul>\n<h3 id=\"SonarQube生成Token\"><a href=\"#SonarQube生成Token\" class=\"headerlink\" title=\"SonarQube生成Token\"></a>SonarQube生成Token</h3><p>进入SonarQube管理界面</p>\n<p>Administration-&gt;Security-&gt;Users</p>\n<p><img src=\"http://cdn.mjava.top/FpFSYEgJfsJIwgNMA6tHHZtdAtpV\" alt></p>\n<p>然后随便输入一个名字，点击生成，记下Token</p>\n<p><img src=\"http://cdn.mjava.top/FhTOSglZYOrP5poo_mmR3SGoobsD\" alt></p>\n<h3 id=\"添加全局凭证\"><a href=\"#添加全局凭证\" class=\"headerlink\" title=\"添加全局凭证\"></a>添加全局凭证</h3><p>类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token</p>\n<p><img src=\"http://cdn.mjava.top/FrKo5EjJ9-78uYbDjBpiuVkeu-_5\" alt></p>\n<h3 id=\"设置SonarQube-servers\"><a href=\"#设置SonarQube-servers\" class=\"headerlink\" title=\"设置SonarQube servers\"></a>设置SonarQube servers</h3><p>进入　系统管理-&gt;系统设置-&gt;SonarQube servers　　　　<font color=\"orange\">设置好后点保存</font></p>\n<blockquote>\n<p>因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/FpevTpJePMDg9-HSoQoSOCNORHL8\" alt></p>\n<h3 id=\"安装SonarQube-Scanner\"><a href=\"#安装SonarQube-Scanner\" class=\"headerlink\" title=\"安装SonarQube Scanner\"></a>安装SonarQube Scanner</h3><h4 id=\"下载压缩包\"><a href=\"#下载压缩包\" class=\"headerlink\" title=\"下载压缩包\"></a>下载压缩包</h4><ul>\n<li>下载SonarQube Scanner压缩包：<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip\" rel=\"noopener\" target=\"_blank\">SonarQube Scanner</a></li>\n</ul>\n<h4 id=\"解压到Jenkins挂载出来的目录里\"><a href=\"#解压到Jenkins挂载出来的目录里\" class=\"headerlink\" title=\"解压到Jenkins挂载出来的目录里\"></a>解压到Jenkins挂载出来的目录里</h4><p>只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=\"orange\"><strong>我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了</strong></font></p>\n<h4 id=\"Jenkins配置全局工具\"><a href=\"#Jenkins配置全局工具\" class=\"headerlink\" title=\"Jenkins配置全局工具\"></a>Jenkins配置全局工具</h4><p>进入　系统管理-&gt;全局工具配置-&gt;SonarQube Scanner     找到模块后点击<font color=\"orange\">新增SonarQube Scanner</font></p>\n<p><font color=\"orange\">SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font></p>\n<p><img src=\"http://cdn.mjava.top/Fpgv2yqskGjp37mfoxHC6MGtIAPt\" alt></p>\n<h2 id=\"构建一个Maven项目\"><a href=\"#构建一个Maven项目\" class=\"headerlink\" title=\"构建一个Maven项目\"></a>构建一个Maven项目</h2><p>网上很多教程说要勾上这个选项：</p>\n<p><img src=\"http://cdn.mjava.top/FsSrQCDF5O9x4sufLZkFRz40toHI\" alt><br>其实这个是可选的，下面有一句话：<font color=\"orange\">These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you’re using “SonarQube Scanner” or “SonarScanner for MSBuild” build steps.</font></p>\n<p>翻译过来就是：<img src=\"http://cdn.mjava.top/FrM7HmTx_APStJMI0OHlMQO6WL3W\" alt><br>因为我们这里用的就是<font color=\"orange\">SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；</p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><ul>\n<li>具体怎么构建项目可以看：<a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a>,这里就不多介绍了</li>\n</ul>\n<h4 id=\"添加Execute-SonarQube-Scanner\"><a href=\"#添加Execute-SonarQube-Scanner\" class=\"headerlink\" title=\"添加Execute SonarQube Scanner\"></a>添加Execute SonarQube Scanner</h4><p>在原来构建的基础上加上<font color=\"orange\">Execute SonarQube Scanner</font>，就可以了</p>\n<p><img src=\"http://cdn.mjava.top/FgZ021lPaTWzgOPsG7veK1cn7lIB\" alt></p>\n<p>在<font color=\"orange\">Analysis properties</font>里填上构建的参数</p>\n<p><img src=\"http://cdn.mjava.top/FiFA65-xUZCh62Y5HfIgxQzvMx7D\" alt></p>\n<blockquote>\n<p>唯一的项目标识符（必填）<br>sonar.projectKey =tiny-config1</p>\n<p>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）<br>sonar.projectName =tiny-config1<br>sonar.projectVersion = 1.0</p>\n<p>源目录的路径（必需）<br>sonar.sources = srcDir1，srcDir2</p>\n<p>测试源目录的路径（可选）<br>sonar.tests = testDir1，testDir2</p>\n<p>Java项目编译类的路径（可选）<br>sonar.java.binaries = bin</p>\n<p>逗号分隔的库路径列表（可选）<br>sonar.java.libraries = path / to / library.jar，path / to / classes / dir</p>\n<p>附加参数<br>sonar.my.property =value</p>\n</blockquote>\n<p>保存后就可以正常构建了．</p>\n<h4 id=\"错误解决（没有错误可跳过这段）\"><a href=\"#错误解决（没有错误可跳过这段）\" class=\"headerlink\" title=\"错误解决（没有错误可跳过这段）\"></a>错误解决（没有错误可跳过这段）</h4><p>如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的<br><img src=\"http://cdn.mjava.top/FnTRL4pSwrKk5Xwbzobo89VKHf5m\" alt></p>\n<h5 id=\"升级SonarQube的Java版本\"><a href=\"#升级SonarQube的Java版本\" class=\"headerlink\" title=\"升级SonarQube的Java版本\"></a>升级SonarQube的Java版本</h5><p>进入SonarQube的管理台： Administration-&gt;Marketplace-&gt;SonarJava</p>\n<blockquote>\n<p>如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/FgbCXvUiteJ9iGCCYC6qbInX0VSX\" alt></p>\n<h3 id=\"构建完成后\"><a href=\"#构建完成后\" class=\"headerlink\" title=\"构建完成后\"></a>构建完成后</h3><p>Jenkins控制台显示SUCCESS就表示构建成功了</p>\n<p><img src=\"http://cdn.mjava.top/FoijfnBHiJAZ7lA7YqmdQb-bEqUF\" alt></p>\n<p>这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了</p>\n<p><img src=\"http://cdn.mjava.top/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ\" alt></p>\n<p>这里就可以看到结果了</p>\n<p><img src=\"http://cdn.mjava.top/FkPydWtLuuliKAq1hc8Ex45nnTlu\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.</p>\n<p>在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"什么是SonarQube\"><a href=\"#什么是SonarQube\" class=\"headerlink\" title=\"什么是SonarQube?\"></a>什么是SonarQube?</h2><p>看看维基百科的说明：<br><img src=\"http://cdn.mjava.top/Fi9bL7TAwFmCYPt3Cz_d0TIwm9rQ\" alt></p><h3 id=\"SonarQube与CI-CD架构图\"><a href=\"#SonarQube与CI-CD架构图\" class=\"headerlink\" title=\"SonarQube与CI/CD架构图\"></a>SonarQube与CI/CD架构图</h3><p><img src=\"http://cdn.mjava.top/FpResgoc3tny2jvGqaqudPwCwstj\" alt=\"SonarQube与CI/CD架构图\"></p><h2 id=\"Docker运行SonarQube\"><a href=\"#Docker运行SonarQube\" class=\"headerlink\" title=\"Docker运行SonarQube\"></a>Docker运行SonarQube</h2><p>简单了解之后，开始安装SonarQube.这里用Docker安装</p><blockquote>\n<p>注：这里用mysql来存储SonarQube的数据，SonarQube7.9起已经不在支持mysql了，可以安装官方推荐的PostgreSQL</p>\n</blockquote>","more":"\n\n\n\n<ul>\n<li>SonarQube 6.7.7</li>\n<li>Docker-CE 19.03.1</li>\n<li>Mysql 5.7</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>直接运行这个docker命令来安装，网上其他的教程有什么挂载文件什么的，我试了都会安装失败，原因还是因为权限原因，因为SonarQube不是以root用户运行的，导致没权限读写挂载出来的文件夹．</p>\n<blockquote>\n<p>注意：创建容器前一定要先保证你连的容器有对应的数据库</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d --name sonarqube -p 9099:9000 -p 9092:9092 --link=dev_mysql:mysql -e SONARQUBE_JDBC_USERNAME=app -e SONARQUBE_JDBC_PASSWORD=app -e SONARQUBE_JDBC_URL=\"jdbc:mysql://mysql:3306/sonar?useUnicode=true&amp;characterEncoding=utf8&amp;rewriteBatchedStatements=true&amp;useConfigs=maxPerformance&amp;useSSL=false\" --restart=always sonarqube:6.7.7-community</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>–link=dev_mysql:mysql     这个命令我链接到了我的mysql容器，dev_mysql是容器的名字，mysql是在SonarQube容器里的别名，所以链接数据库时直接用mysql这个别名就可了．</p>\n</li>\n<li><p>SONARQUBE_JDBC_USERNAME ：数据库的账户</p>\n</li>\n<li><p>SONARQUBE_JDBC_PASSWORD ：数据库密码</p>\n</li>\n</ul>\n<h3 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h3><p>安装好后直接访问<font color=\"orange\">9099</font>端口，登录的账户和密码默认都是<font color=\"orange\">admin</font>．首页就是这个样子的．</p>\n<p><img src=\"http://cdn.mjava.top/Fs08WpcVDcL3n32MxoCNPDMtu1r5\" alt></p>\n<h2 id=\"Jenkins集成SonarQube\"><a href=\"#Jenkins集成SonarQube\" class=\"headerlink\" title=\"Jenkins集成SonarQube\"></a>Jenkins集成SonarQube</h2><p>Jenkins和SonarQube都是运行在Docker容器里的</p>\n<h3 id=\"下载和安装插件\"><a href=\"#下载和安装插件\" class=\"headerlink\" title=\"下载和安装插件\"></a>下载和安装插件</h3><p>直接下载最新版的，然后导入，导入的方法可以看<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">插件导入方法</a></p>\n<ul>\n<li>插件下载地址：<a href=\"https://updates.jenkins.io/download/plugins/sonar/\" rel=\"noopener\" target=\"_blank\">https://updates.jenkins.io/download/plugins/sonar/</a></li>\n</ul>\n<h3 id=\"SonarQube生成Token\"><a href=\"#SonarQube生成Token\" class=\"headerlink\" title=\"SonarQube生成Token\"></a>SonarQube生成Token</h3><p>进入SonarQube管理界面</p>\n<p>Administration-&gt;Security-&gt;Users</p>\n<p><img src=\"http://cdn.mjava.top/FpFSYEgJfsJIwgNMA6tHHZtdAtpV\" alt></p>\n<p>然后随便输入一个名字，点击生成，记下Token</p>\n<p><img src=\"http://cdn.mjava.top/FhTOSglZYOrP5poo_mmR3SGoobsD\" alt></p>\n<h3 id=\"添加全局凭证\"><a href=\"#添加全局凭证\" class=\"headerlink\" title=\"添加全局凭证\"></a>添加全局凭证</h3><p>类型选Secret text,然后Secret和ID输入框都填入刚才生成的Token</p>\n<p><img src=\"http://cdn.mjava.top/FrKo5EjJ9-78uYbDjBpiuVkeu-_5\" alt></p>\n<h3 id=\"设置SonarQube-servers\"><a href=\"#设置SonarQube-servers\" class=\"headerlink\" title=\"设置SonarQube servers\"></a>设置SonarQube servers</h3><p>进入　系统管理-&gt;系统设置-&gt;SonarQube servers　　　　<font color=\"orange\">设置好后点保存</font></p>\n<blockquote>\n<p>因为我SonarQube和Jenkins安装在同一台机器不同的Docker容器里的,所以这里URL直接填SonarQube的Docker容器的IP和端口</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/FpevTpJePMDg9-HSoQoSOCNORHL8\" alt></p>\n<h3 id=\"安装SonarQube-Scanner\"><a href=\"#安装SonarQube-Scanner\" class=\"headerlink\" title=\"安装SonarQube Scanner\"></a>安装SonarQube Scanner</h3><h4 id=\"下载压缩包\"><a href=\"#下载压缩包\" class=\"headerlink\" title=\"下载压缩包\"></a>下载压缩包</h4><ul>\n<li>下载SonarQube Scanner压缩包：<a href=\"https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873-linux.zip\" rel=\"noopener\" target=\"_blank\">SonarQube Scanner</a></li>\n</ul>\n<h4 id=\"解压到Jenkins挂载出来的目录里\"><a href=\"#解压到Jenkins挂载出来的目录里\" class=\"headerlink\" title=\"解压到Jenkins挂载出来的目录里\"></a>解压到Jenkins挂载出来的目录里</h4><p>只有解压到挂载出来的Jenkins的目录里，Docker容器安装的Jenkins才能读取到,<font color=\"orange\"><strong>我这里是宿主机的/opt/jenkins挂载到了Jenkins容器里的/var/jenkins_home目录上，所以我只要解压到宿主机的/opt/jenkins目录中就可以了</strong></font></p>\n<h4 id=\"Jenkins配置全局工具\"><a href=\"#Jenkins配置全局工具\" class=\"headerlink\" title=\"Jenkins配置全局工具\"></a>Jenkins配置全局工具</h4><p>进入　系统管理-&gt;全局工具配置-&gt;SonarQube Scanner     找到模块后点击<font color=\"orange\">新增SonarQube Scanner</font></p>\n<p><font color=\"orange\">SONAR_RUNNER_HOME填你Jenkins这个Docker容器里的路径</font></p>\n<p><img src=\"http://cdn.mjava.top/Fpgv2yqskGjp37mfoxHC6MGtIAPt\" alt></p>\n<h2 id=\"构建一个Maven项目\"><a href=\"#构建一个Maven项目\" class=\"headerlink\" title=\"构建一个Maven项目\"></a>构建一个Maven项目</h2><p>网上很多教程说要勾上这个选项：</p>\n<p><img src=\"http://cdn.mjava.top/FsSrQCDF5O9x4sufLZkFRz40toHI\" alt><br>其实这个是可选的，下面有一句话：<font color=\"orange\">These variables are useful when configuring a SonarQube analysis using standard build steps such as Maven, Gradle, Ant, and command line scripts.This feature is not needed if you’re using “SonarQube Scanner” or “SonarScanner for MSBuild” build steps.</font></p>\n<p>翻译过来就是：<img src=\"http://cdn.mjava.top/FrM7HmTx_APStJMI0OHlMQO6WL3W\" alt><br>因为我们这里用的就是<font color=\"orange\">SonarQube Scanner</font>,所以这个我们是可以不用勾上的，但是勾上也没影响；</p>\n<h3 id=\"开始构建\"><a href=\"#开始构建\" class=\"headerlink\" title=\"开始构建\"></a>开始构建</h3><ul>\n<li>具体怎么构建项目可以看：<a href=\"https://mjava.top/jenkins/build-jenkins-mavne/\">Jenkins教程-创建Maven项目</a>,这里就不多介绍了</li>\n</ul>\n<h4 id=\"添加Execute-SonarQube-Scanner\"><a href=\"#添加Execute-SonarQube-Scanner\" class=\"headerlink\" title=\"添加Execute SonarQube Scanner\"></a>添加Execute SonarQube Scanner</h4><p>在原来构建的基础上加上<font color=\"orange\">Execute SonarQube Scanner</font>，就可以了</p>\n<p><img src=\"http://cdn.mjava.top/FgZ021lPaTWzgOPsG7veK1cn7lIB\" alt></p>\n<p>在<font color=\"orange\">Analysis properties</font>里填上构建的参数</p>\n<p><img src=\"http://cdn.mjava.top/FiFA65-xUZCh62Y5HfIgxQzvMx7D\" alt></p>\n<blockquote>\n<p>唯一的项目标识符（必填）<br>sonar.projectKey =tiny-config1</p>\n<p>项目元数据（以前是必需的，自SonarQube 6.1起是可选的）<br>sonar.projectName =tiny-config1<br>sonar.projectVersion = 1.0</p>\n<p>源目录的路径（必需）<br>sonar.sources = srcDir1，srcDir2</p>\n<p>测试源目录的路径（可选）<br>sonar.tests = testDir1，testDir2</p>\n<p>Java项目编译类的路径（可选）<br>sonar.java.binaries = bin</p>\n<p>逗号分隔的库路径列表（可选）<br>sonar.java.libraries = path / to / library.jar，path / to / classes / dir</p>\n<p>附加参数<br>sonar.my.property =value</p>\n</blockquote>\n<p>保存后就可以正常构建了．</p>\n<h4 id=\"错误解决（没有错误可跳过这段）\"><a href=\"#错误解决（没有错误可跳过这段）\" class=\"headerlink\" title=\"错误解决（没有错误可跳过这段）\"></a>错误解决（没有错误可跳过这段）</h4><p>如果在构建项目的时候,Jenkins控制台如果报一下错误，这是因为SonarQube的Java版本太低造成的<br><img src=\"http://cdn.mjava.top/FnTRL4pSwrKk5Xwbzobo89VKHf5m\" alt></p>\n<h5 id=\"升级SonarQube的Java版本\"><a href=\"#升级SonarQube的Java版本\" class=\"headerlink\" title=\"升级SonarQube的Java版本\"></a>升级SonarQube的Java版本</h5><p>进入SonarQube的管理台： Administration-&gt;Marketplace-&gt;SonarJava</p>\n<blockquote>\n<p>如果你版本没升级，右边会有个update按钮，点击就可以升级了，升级完后重启SonarQube;这边因为我已经升级过了，所以没有这个按钮</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/FgbCXvUiteJ9iGCCYC6qbInX0VSX\" alt></p>\n<h3 id=\"构建完成后\"><a href=\"#构建完成后\" class=\"headerlink\" title=\"构建完成后\"></a>构建完成后</h3><p>Jenkins控制台显示SUCCESS就表示构建成功了</p>\n<p><img src=\"http://cdn.mjava.top/FoijfnBHiJAZ7lA7YqmdQb-bEqUF\" alt></p>\n<p>这时候就可以点击构建项目的SonarQube直接跳转到SonarQube控制台了</p>\n<p><img src=\"http://cdn.mjava.top/FhXgRD7rBp5RBc2D6uBmH5mIBNKJ\" alt></p>\n<p>这里就可以看到结果了</p>\n<p><img src=\"http://cdn.mjava.top/FkPydWtLuuliKAq1hc8Ex45nnTlu\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到这里就可以根据SonarQube的提示区改BUG了．这BUG有点多＝＿＝！.</p>\n<p>在搭建过程中，最主要的就是那个SonarQube Scanner这个的安装了，因为Jenkins都是Docker化的，所以他可以选择自动安装，但是我这边选择自动安装却没用，所以就自己下载了SonarQube Scnner的包挂载到Jenkins容器里区，然后直接指定SonarQube Scnner的目录就可以了；</p>\n"},{"title":"Jenkins插件版本太旧的更新方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:27.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102254.png)","source":"_posts/jenkins/problem-jenkins-01.md","raw":"---\ntitle: Jenkins插件版本太旧的更新方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:27\npassword:\nsummary:\n---\n\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102254.png)","slug":"jenkins/problem-jenkins-01","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02d001aw2g5vdq7ih9o","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>Jenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：</code></pre><p><img src=\"http://cdn.mjava.top/blog/20191108102617.png\" alt=\"jenkins插件管理界面\"></p><p>Durable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.</p><a id=\"more\"></a>\n\n<h2 id=\"查看本地已安装版本\"><a href=\"#查看本地已安装版本\" class=\"headerlink\" title=\"查看本地已安装版本\"></a>查看本地已安装版本</h2><p>可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191108100855.png\" alt=\"jenkins插件管理界面\"></p>\n<h2 id=\"搜索插件\"><a href=\"#搜索插件\" class=\"headerlink\" title=\"搜索插件\"></a>搜索插件</h2><p>当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191108102907.png\" alt=\"jenkins插件管理界面\"></p>\n<p>不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站</p>\n<p><a href=\"https://plugins.jenkins.io/\" rel=\"noopener\" target=\"_blank\">Jenkins插件下载</a></p>\n<ul>\n<li>进入后在输入框里输入你刚才要下载的插件:</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20191108101610.png\" alt=\"jenkins插件下载\"></p>\n<ul>\n<li>选择对应的插件<br><img src=\"http://cdn.mjava.top/blog/20191108101748.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>然后点击右上角<br><img src=\"http://cdn.mjava.top/blog/20191108101807.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>下载刚才提示的1.33版本<br><img src=\"http://cdn.mjava.top/blog/20191108101832.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>下载完成后是一个hpi文件<br><img src=\"http://cdn.mjava.top/blog/20191108102109.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<h2 id=\"导入插件\"><a href=\"#导入插件\" class=\"headerlink\" title=\"导入插件\"></a>导入插件</h2><ul>\n<li><p>到插件管理界面，找到Upload Plugin<br><img src=\"http://cdn.mjava.top/blog/20191108102152.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后选择刚才下载的插件，点击导入<br><img src=\"http://cdn.mjava.top/blog/20191108102223.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>可以看到插件正在导入<br><img src=\"http://cdn.mjava.top/blog/20191108102240.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>导入完成后，重启Jenkins就OK了<br><img src=\"http://cdn.mjava.top/blog/20191108102254.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><pre><code>Jenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：</code></pre><p><img src=\"http://cdn.mjava.top/blog/20191108102617.png\" alt=\"jenkins插件管理界面\"></p><p>Durable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.</p>","more":"\n\n<h2 id=\"查看本地已安装版本\"><a href=\"#查看本地已安装版本\" class=\"headerlink\" title=\"查看本地已安装版本\"></a>查看本地已安装版本</h2><p>可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191108100855.png\" alt=\"jenkins插件管理界面\"></p>\n<h2 id=\"搜索插件\"><a href=\"#搜索插件\" class=\"headerlink\" title=\"搜索插件\"></a>搜索插件</h2><p>当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF</p>\n<p><img src=\"http://cdn.mjava.top/blog/20191108102907.png\" alt=\"jenkins插件管理界面\"></p>\n<p>不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站</p>\n<p><a href=\"https://plugins.jenkins.io/\" rel=\"noopener\" target=\"_blank\">Jenkins插件下载</a></p>\n<ul>\n<li>进入后在输入框里输入你刚才要下载的插件:</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20191108101610.png\" alt=\"jenkins插件下载\"></p>\n<ul>\n<li>选择对应的插件<br><img src=\"http://cdn.mjava.top/blog/20191108101748.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>然后点击右上角<br><img src=\"http://cdn.mjava.top/blog/20191108101807.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>下载刚才提示的1.33版本<br><img src=\"http://cdn.mjava.top/blog/20191108101832.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<ul>\n<li>下载完成后是一个hpi文件<br><img src=\"http://cdn.mjava.top/blog/20191108102109.png\" alt=\"jenkins插件下载\"></li>\n</ul>\n<h2 id=\"导入插件\"><a href=\"#导入插件\" class=\"headerlink\" title=\"导入插件\"></a>导入插件</h2><ul>\n<li><p>到插件管理界面，找到Upload Plugin<br><img src=\"http://cdn.mjava.top/blog/20191108102152.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>然后选择刚才下载的插件，点击导入<br><img src=\"http://cdn.mjava.top/blog/20191108102223.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>可以看到插件正在导入<br><img src=\"http://cdn.mjava.top/blog/20191108102240.png\" alt=\"jenkins插件下载\"></p>\n</li>\n<li><p>导入完成后，重启Jenkins就OK了<br><img src=\"http://cdn.mjava.top/blog/20191108102254.png\" alt=\"jenkins插件下载\"></p>\n</li>\n</ul>\n"},{"title":"Java8 Stream方法大全","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-10T01:53:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![Stream](http://cdn.mjava.top/blog/java_8_stream.png)","source":"_posts/java/java-8-stream-method.md","raw":"---\ntitle: Java8 Stream方法大全\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-10 09:53:34\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n![Stream](http://cdn.mjava.top/blog/java_8_stream.png)","slug":"java/java-8-stream-method","published":1,"updated":"2019-12-10T01:56:45.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02f001ew2g5ap7o8s79","content":"<p><img src=\"http://cdn.mjava.top/blog/java_8_stream.png\" alt=\"Stream\"></p>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":"<p><img src=\"http://cdn.mjava.top/blog/java_8_stream.png\" alt=\"Stream\"></p>"},{"title":"Jenkins初始化界面插件安装失败解决方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:52.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](http://cdn.mjava.top/blog/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](http://cdn.mjava.top/blog/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](http://cdn.mjava.top/blog/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](http://cdn.mjava.top/blog/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](http://cdn.mjava.top/blog/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](http://cdn.mjava.top/blog/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](http://cdn.mjava.top/blog/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](http://cdn.mjava.top/blog/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","source":"_posts/jenkins/problem-jenkins-02.md","raw":"---\ntitle: Jenkins初始化界面插件安装失败解决方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:52\npassword:\nsummary:\n---\n\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](http://cdn.mjava.top/blog/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](http://cdn.mjava.top/blog/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](http://cdn.mjava.top/blog/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](http://cdn.mjava.top/blog/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](http://cdn.mjava.top/blog/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](http://cdn.mjava.top/blog/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](http://cdn.mjava.top/blog/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](http://cdn.mjava.top/blog/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","slug":"jenkins/problem-jenkins-02","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02g001gw2g5l9063936","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面</p><p><img src=\"http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png\" alt=\"Jenkins插件安装失败\"></p><p>别着急，直接点击继续，先完成初始化步骤。</p><h2 id=\"设置源\"><a href=\"#设置源\" class=\"headerlink\" title=\"设置源\"></a>设置源</h2><ul>\n<li>插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins<br><img src=\"http://cdn.mjava.top/blog/20191107162947.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>点击Correct<br><img src=\"http://cdn.mjava.top/blog/20191107163016.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>点击Advanced<br><img src=\"http://cdn.mjava.top/blog/20191107163040.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>下拉找到Update Site<br><img src=\"http://cdn.mjava.top/blog/20191107163100.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>然后把输入框的内容换成</li>\n</ul><a id=\"more\"></a>\n\n\n\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20191107165325.png\" alt=\"Jenkins\"></p>\n<h2 id=\"重新下载插件\"><a href=\"#重新下载插件\" class=\"headerlink\" title=\"重新下载插件\"></a>重新下载插件</h2><ul>\n<li>然后重新下载刚才那些下载失败的插件,这里随机选一个<br><img src=\"http://cdn.mjava.top/blog/20191107165630.png\" alt=\"Jenkins\"></li>\n</ul>\n<ul>\n<li>在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install<br><img src=\"http://cdn.mjava.top/blog/20191107165916.png\" alt=\"Jenkins\"></li>\n</ul>\n<ul>\n<li>插件正在安装<br><img src=\"http://cdn.mjava.top/blog/20191107165947.png\" alt=\"Jenkins\"></li>\n</ul>\n<blockquote>\n<p>安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">Jenkins插件版本太旧的更新方法</a></p>\n</blockquote>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面</p><p><img src=\"http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png\" alt=\"Jenkins插件安装失败\"></p><p>别着急，直接点击继续，先完成初始化步骤。</p><h2 id=\"设置源\"><a href=\"#设置源\" class=\"headerlink\" title=\"设置源\"></a>设置源</h2><ul>\n<li>插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins<br><img src=\"http://cdn.mjava.top/blog/20191107162947.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>点击Correct<br><img src=\"http://cdn.mjava.top/blog/20191107163016.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>点击Advanced<br><img src=\"http://cdn.mjava.top/blog/20191107163040.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>下拉找到Update Site<br><img src=\"http://cdn.mjava.top/blog/20191107163100.png\" alt=\"Jenkins\"></li>\n</ul><ul>\n<li>然后把输入框的内容换成</li>\n</ul>","more":"\n\n\n\n\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20191107165325.png\" alt=\"Jenkins\"></p>\n<h2 id=\"重新下载插件\"><a href=\"#重新下载插件\" class=\"headerlink\" title=\"重新下载插件\"></a>重新下载插件</h2><ul>\n<li>然后重新下载刚才那些下载失败的插件,这里随机选一个<br><img src=\"http://cdn.mjava.top/blog/20191107165630.png\" alt=\"Jenkins\"></li>\n</ul>\n<ul>\n<li>在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install<br><img src=\"http://cdn.mjava.top/blog/20191107165916.png\" alt=\"Jenkins\"></li>\n</ul>\n<ul>\n<li>插件正在安装<br><img src=\"http://cdn.mjava.top/blog/20191107165947.png\" alt=\"Jenkins\"></li>\n</ul>\n<blockquote>\n<p>安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：<a href=\"https://mjava.top/jenkins/problem-jenkins-01/\">Jenkins插件版本太旧的更新方法</a></p>\n</blockquote>\n"},{"title":"Java数组的几种初始化方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-09T02:22:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","source":"_posts/java/java-array-init.md","raw":"---\ntitle: Java数组的几种初始化方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-09 10:22:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","slug":"java/java-array-init","published":1,"updated":"2019-12-09T02:44:25.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02h001kw2g545cf9rzd","content":"<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h3 id=\"初始化容量\"><a href=\"#初始化容量\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 定义容量为5,初始值为0的int一维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> array[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array2=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure><h3 id=\"初始化值\"><a href=\"#初始化值\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一维容量为5的一维数组的值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array10=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> aray12[]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"初始化容量-1\"><a href=\"#初始化容量-1\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><ul>\n<li>声明了列数的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行5列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array3=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> []array4[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> array5[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>未声明列数的</li>\n</ul>\n<blockquote>\n<p>此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行空列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"keyword\">int</span> []arra7[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"keyword\">int</span> array8[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 赋值方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">array6[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(array6[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化值-1\"><a href=\"#初始化值-1\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化并赋值一个2行3列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array13=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> []array14[]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> array15[][]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"一维数组\"><a href=\"#一维数组\" class=\"headerlink\" title=\"一维数组\"></a>一维数组</h2><h3 id=\"初始化容量\"><a href=\"#初始化容量\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 定义容量为5,初始值为0的int一维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> array[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array2=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure><h3 id=\"初始化值\"><a href=\"#初始化值\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一维容量为5的一维数组的值</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[] array10=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> aray12[]=&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<h2 id=\"二维数组\"><a href=\"#二维数组\" class=\"headerlink\" title=\"二维数组\"></a>二维数组</h2><blockquote>\n<p>二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"初始化容量-1\"><a href=\"#初始化容量-1\" class=\"headerlink\" title=\"初始化容量\"></a>初始化容量</h3><ul>\n<li>声明了列数的</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行5列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array3=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> []array4[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> array5[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][<span class=\"number\">5</span>];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>未声明列数的</li>\n</ul>\n<blockquote>\n<p>此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化一个5行空列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"keyword\">int</span> []arra7[]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\"><span class=\"keyword\">int</span> array8[][]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 赋值方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array6=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">5</span>][];</span><br><span class=\"line\">array6[<span class=\"number\">0</span>]=<span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[]&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\">System.out.println(array6[<span class=\"number\">0</span>][<span class=\"number\">0</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//输出:1</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"初始化值-1\"><a href=\"#初始化值-1\" class=\"headerlink\" title=\"初始化值\"></a>初始化值</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 初始化并赋值一个2行3列的二维数组</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">int</span>[][] array13=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> []array14[]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> array15[][]=&#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p>\n"},{"title":"【源码解析】扒开ArrayList的外衣","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-03T11:13:31.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。\n\n## 本文内容\n\n当然ArrayList里的方法不止这些，本文主要讲一些常用的方法\n\n![](http://cdn.mjava.top/blog/20200103101050.png)\n\n## 方法变量\n\n`Arraylist`里的方法变量主要有以下几个\n\n![](http://cdn.mjava.top/blog/Selection_005.png)\n\n\n\n## 构造方法\n\n### 有参构造\n\n#### 传入数组的大小\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(5);\n```\n\n##### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_004.png)\n\n#### 传入一个list对象\n\n其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(Arrays.asList(\"z\",\"m\",\"h\"));\n```\n\n> 这里用来`Arrays`工具类里的`asList`方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了\n\n##### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_006.png)\n\n### 无参构造\n\n这个比较简单，直接赋值一个空数组\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/20200103112943.png)\n\n## add方法\n\nadd一般常用的有两个方法，一个就是`add(E e)`在尾部添加数据，一个就是`add(int index,E element)`在指定位置插入元素\n\n### add(E e)\n\n这个是`Arrayist`的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"灰灰HK\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_007.png)\n\n- <font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足\n\n![](http://cdn.mjava.top/blog/Selection_009.png)\n\n- <font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font>\n\n![](http://cdn.mjava.top/blog/Selection_010.png)\n\n- 再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先`修改次数加1`，然后判断`size+1`是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的`1.5倍`\n\n> 比如第二次调用add方法，此时`size+1=2`, ` elementData.length=10`,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时`size+1`比`elementData.length`小，就不会进行扩容操作\n\n![](http://cdn.mjava.top/blog/Selection_011.png)\n\n- <font color=orange>grow(int minCapacity)</font>扩容\n\n> 这里调用`Arrays.copyOf()`方法进行复制操作，当进一步深入这个方法时，发现是由`System.arraycopy()`这个方法实现复制功能的，这个方法由`native`关键字修饰，表示不是由`Java`语言实现的，一般是c/cpp实现\n\n![](http://cdn.mjava.top/blog/Selection_012.png)\n\n#### 小结\n\n到这里，add的方法流程就走完了，其核心步骤：\n\n- 每次添加元素时判断数组容量是否充足\n\n- <font color=orange>第一次</font>添加元素，把数组容量扩容到10\n\n- 扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font>\n\n- 扩容后调用`System.arraycopy()`方法把原数组的元素复制到扩容后的新数组\n\n  \n\n### add(int index, E element)\n\n该方法为在指定位置插入元素，该位置及后面所有元素后移\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.add(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_013.png)\n\n> 可以看到，这边又用到了`System.arraycopy()`这个方法\n\n- <font color=orange>rangeCheckForAdd(int index)</font>判断是否越界\n\n> 这里他是和`size`对比，而不是和数组的`length`对比，我个人认为这样第一节省了空间，第二方便后面移动的操作\n\n![](http://cdn.mjava.top/blog/Selection_014.png)\n\n- <font color=orange>System.arraycopy()</font>拷贝数组\n\n```java\npublic static native void arraycopy(Object src,  int  srcPos,\n                             \t\tObject dest, int destPos,\n                                    int length)\n```\n\n> - src    原数组对象\n> - srcPos    原数组起始位置\n> - dest    目标数组\n> - destPos    目标数组起始位置\n> - length    复制多少个数据\n\n#### 小结\n\n插入方法其主要步骤如下:\n\n- 检查插入的位置是否越界\n- 检查数组容量是否充足，不充足进行扩容相关操作\n- 调用`System.arraycopy()`进行`index`及后面的元素后移\n\n## get方法\n\n### get(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.get(0);\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_015.png)\n\n- <font color=orange>rangeCheck(int index)</font>判断是否越界\n\n> get个add方法判断越界的方法是不一样的，这边是`index>=size`,多了个`等于`，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的\n\n```java\nprivate void rangeCheck(int index) {\n    if (index >= size)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n\n- <font color=orange>elementData(int index)</font>直接返回对应下标的数组元素\n\n```java\nE elementData(int index) {\n    return (E) elementData[index];\n}\n```\n\n#### 小结\n\nget方法比较简单，主要步骤为：\n\n- 检查是否越界\n- 返回对应元素\n\n## set方法\n\n### set(int index, E element)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.set(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_016.png)\n\n## remove方法\n\n### remove(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(0);\n```\n\n#### 源码解析\n\n> 当删除的元素为最后一个元素时，`numMoved`就小于0了，就不会进行移动元素的操作\n\n![](http://cdn.mjava.top/blog/Selection_017.png)\n\n### remove(Object o)\n\n> 这个方法在实际中用的比较少，因为`AraryList`是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font>\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(\"hk\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_018.png)\n\n- <font color=orange>fastRemove(int index)</font>删除元素\n\n> 这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素\n\n```java\nprivate void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}\n```\n\n## clear方法\n\n### clear()\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.clear();\n```\n\n#### 源码分析\n\n![](http://cdn.mjava.top/blog/Selection_019.png)\n\n## 总结\n\n`ArrayList`底层扩容或者移动数组元素时都调用了`System.arraycopy()`来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。\n\n文章好几次出现了`modCount++`这个操作，这个`modCount`主要用户内部类的迭代器","source":"_posts/java/java-arraylist-source-1.md","raw":"---\ntitle: 【源码解析】扒开ArrayList的外衣\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-03 19:13:31\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\n- ArrayList\n- 源码解析\ncategories:\n- Java\n---\n\n> 积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。\n\n## 本文内容\n\n当然ArrayList里的方法不止这些，本文主要讲一些常用的方法\n\n![](http://cdn.mjava.top/blog/20200103101050.png)\n\n## 方法变量\n\n`Arraylist`里的方法变量主要有以下几个\n\n![](http://cdn.mjava.top/blog/Selection_005.png)\n\n\n\n## 构造方法\n\n### 有参构造\n\n#### 传入数组的大小\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(5);\n```\n\n##### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_004.png)\n\n#### 传入一个list对象\n\n其实这个就相当于把传入的list对象里的数据<font color=orange>复制</font>到新的ArrayList对象\n\n##### 代码实现\n\n```java\nList<String> list=new ArrayList<>(Arrays.asList(\"z\",\"m\",\"h\"));\n```\n\n> 这里用来`Arrays`工具类里的`asList`方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了\n\n##### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_006.png)\n\n### 无参构造\n\n这个比较简单，直接赋值一个空数组\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/20200103112943.png)\n\n## add方法\n\nadd一般常用的有两个方法，一个就是`add(E e)`在尾部添加数据，一个就是`add(int index,E element)`在指定位置插入元素\n\n### add(E e)\n\n这个是`Arrayist`的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"灰灰HK\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_007.png)\n\n- <font color=orange>ensureCapacityInternal(int minCapacity)</font>确保数组容量充足\n\n![](http://cdn.mjava.top/blog/Selection_009.png)\n\n- <font color=orange>calculateCapacity(Object[] elementData, int minCapacity)</font>\n\n![](http://cdn.mjava.top/blog/Selection_010.png)\n\n- 再回到<font color=orange>ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先`修改次数加1`，然后判断`size+1`是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的`1.5倍`\n\n> 比如第二次调用add方法，此时`size+1=2`, ` elementData.length=10`,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时`size+1`比`elementData.length`小，就不会进行扩容操作\n\n![](http://cdn.mjava.top/blog/Selection_011.png)\n\n- <font color=orange>grow(int minCapacity)</font>扩容\n\n> 这里调用`Arrays.copyOf()`方法进行复制操作，当进一步深入这个方法时，发现是由`System.arraycopy()`这个方法实现复制功能的，这个方法由`native`关键字修饰，表示不是由`Java`语言实现的，一般是c/cpp实现\n\n![](http://cdn.mjava.top/blog/Selection_012.png)\n\n#### 小结\n\n到这里，add的方法流程就走完了，其核心步骤：\n\n- 每次添加元素时判断数组容量是否充足\n\n- <font color=orange>第一次</font>添加元素，把数组容量扩容到10\n\n- 扩容时，除第一次，以后的每次扩容为<font color=orange>原大小的1.5倍</font>\n\n- 扩容后调用`System.arraycopy()`方法把原数组的元素复制到扩容后的新数组\n\n  \n\n### add(int index, E element)\n\n该方法为在指定位置插入元素，该位置及后面所有元素后移\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.add(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_013.png)\n\n> 可以看到，这边又用到了`System.arraycopy()`这个方法\n\n- <font color=orange>rangeCheckForAdd(int index)</font>判断是否越界\n\n> 这里他是和`size`对比，而不是和数组的`length`对比，我个人认为这样第一节省了空间，第二方便后面移动的操作\n\n![](http://cdn.mjava.top/blog/Selection_014.png)\n\n- <font color=orange>System.arraycopy()</font>拷贝数组\n\n```java\npublic static native void arraycopy(Object src,  int  srcPos,\n                             \t\tObject dest, int destPos,\n                                    int length)\n```\n\n> - src    原数组对象\n> - srcPos    原数组起始位置\n> - dest    目标数组\n> - destPos    目标数组起始位置\n> - length    复制多少个数据\n\n#### 小结\n\n插入方法其主要步骤如下:\n\n- 检查插入的位置是否越界\n- 检查数组容量是否充足，不充足进行扩容相关操作\n- 调用`System.arraycopy()`进行`index`及后面的元素后移\n\n## get方法\n\n### get(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.get(0);\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_015.png)\n\n- <font color=orange>rangeCheck(int index)</font>判断是否越界\n\n> get个add方法判断越界的方法是不一样的，这边是`index>=size`,多了个`等于`，为什么要多个等于呢？因为数组是从0开始的，而size<font color=orange>相当于</font>是开始的从1开始的\n\n```java\nprivate void rangeCheck(int index) {\n    if (index >= size)\n        throw new IndexOutOfBoundsException(outOfBoundsMsg(index));\n}\n```\n\n- <font color=orange>elementData(int index)</font>直接返回对应下标的数组元素\n\n```java\nE elementData(int index) {\n    return (E) elementData[index];\n}\n```\n\n#### 小结\n\nget方法比较简单，主要步骤为：\n\n- 检查是否越界\n- 返回对应元素\n\n## set方法\n\n### set(int index, E element)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.set(0,\"灰灰\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_016.png)\n\n## remove方法\n\n### remove(int index)\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(0);\n```\n\n#### 源码解析\n\n> 当删除的元素为最后一个元素时，`numMoved`就小于0了，就不会进行移动元素的操作\n\n![](http://cdn.mjava.top/blog/Selection_017.png)\n\n### remove(Object o)\n\n> 这个方法在实际中用的比较少，因为`AraryList`是可以保存重复的元素，所以删除是<font color=orange>删除最早添加的元素</font>\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.remove(\"hk\");\n```\n\n#### 源码解析\n\n![](http://cdn.mjava.top/blog/Selection_018.png)\n\n- <font color=orange>fastRemove(int index)</font>删除元素\n\n> 这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素\n\n```java\nprivate void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}\n```\n\n## clear方法\n\n### clear()\n\n#### 代码实现\n\n```java\nList<String> list=new ArrayList<>();\nlist.add(\"hk\");\nlist.clear();\n```\n\n#### 源码分析\n\n![](http://cdn.mjava.top/blog/Selection_019.png)\n\n## 总结\n\n`ArrayList`底层扩容或者移动数组元素时都调用了`System.arraycopy()`来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。\n\n文章好几次出现了`modCount++`这个操作，这个`modCount`主要用户内部类的迭代器","slug":"java/java-arraylist-source-1","published":1,"updated":"2020-01-03T11:24:15.667Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02i001mw2g51d0aa68i","content":"<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n</blockquote><h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p><p><img src=\"http://cdn.mjava.top/blog/20200103101050.png\" alt></p><h2 id=\"方法变量\"><a href=\"#方法变量\" class=\"headerlink\" title=\"方法变量\"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p><p><img src=\"http://cdn.mjava.top/blog/Selection_005.png\" alt></p><h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><h3 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h3><h4 id=\"传入数组的大小\"><a href=\"#传入数组的大小\" class=\"headerlink\" title=\"传入数组的大小\"></a>传入数组的大小</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n\n\n\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"http://cdn.mjava.top/blog/Selection_004.png\" alt></p>\n<h4 id=\"传入一个list对象\"><a href=\"#传入一个list对象\" class=\"headerlink\" title=\"传入一个list对象\"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color=\"orange\">复制</font>到新的ArrayList对象</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class=\"string\">\"z\"</span>,<span class=\"string\">\"m\"</span>,<span class=\"string\">\"h\"</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p>\n</blockquote>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"http://cdn.mjava.top/blog/Selection_006.png\" alt></p>\n<h3 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/20200103112943.png\" alt></p>\n<h2 id=\"add方法\"><a href=\"#add方法\" class=\"headerlink\" title=\"add方法\"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p>\n<h3 id=\"add-E-e\"><a href=\"#add-E-e\" class=\"headerlink\" title=\"add(E e)\"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p>\n<h4 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"灰灰HK\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_007.png\" alt></p>\n<ul>\n<li><font color=\"orange\">ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_009.png\" alt></p>\n<ul>\n<li><font color=\"orange\">calculateCapacity(Object[] elementData, int minCapacity)</font></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_010.png\" alt></p>\n<ul>\n<li>再回到<font color=\"orange\">ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li>\n</ul>\n<blockquote>\n<p>比如第二次调用add方法，此时<code>size+1=2</code>, <code>elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_011.png\" alt></p>\n<ul>\n<li><font color=\"orange\">grow(int minCapacity)</font>扩容</li>\n</ul>\n<blockquote>\n<p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c/cpp实现</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_012.png\" alt></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p>\n<ul>\n<li><p>每次添加元素时判断数组容量是否充足</p>\n</li>\n<li><p><font color=\"orange\">第一次</font>添加元素，把数组容量扩容到10</p>\n</li>\n<li><p>扩容时，除第一次，以后的每次扩容为<font color=\"orange\">原大小的1.5倍</font></p>\n</li>\n<li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p>\n</li>\n</ul>\n<h3 id=\"add-int-index-E-element\"><a href=\"#add-int-index-E-element\" class=\"headerlink\" title=\"add(int index, E element)\"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p>\n<h4 id=\"代码实现-4\"><a href=\"#代码实现-4\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">0</span>,<span class=\"string\">\"灰灰\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_013.png\" alt></p>\n<blockquote>\n<p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p>\n</blockquote>\n<ul>\n<li><font color=\"orange\">rangeCheckForAdd(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_014.png\" alt></p>\n<ul>\n<li><font color=\"orange\">System.arraycopy()</font>拷贝数组</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             \t\tObject dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>src    原数组对象</li>\n<li>srcPos    原数组起始位置</li>\n<li>dest    目标数组</li>\n<li>destPos    目标数组起始位置</li>\n<li>length    复制多少个数据</li>\n</ul>\n</blockquote>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>插入方法其主要步骤如下:</p>\n<ul>\n<li>检查插入的位置是否越界</li>\n<li>检查数组容量是否充足，不充足进行扩容相关操作</li>\n<li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li>\n</ul>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><h3 id=\"get-int-index\"><a href=\"#get-int-index\" class=\"headerlink\" title=\"get(int index)\"></a>get(int index)</h3><h4 id=\"代码实现-5\"><a href=\"#代码实现-5\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_015.png\" alt></p>\n<ul>\n<li><font color=\"orange\">rangeCheck(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color=\"orange\">相当于</font>是开始的从1开始的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=\"orange\">elementData(int index)</font>直接返回对应下标的数组元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>get方法比较简单，主要步骤为：</p>\n<ul>\n<li>检查是否越界</li>\n<li>返回对应元素</li>\n</ul>\n<h2 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h2><h3 id=\"set-int-index-E-element\"><a href=\"#set-int-index-E-element\" class=\"headerlink\" title=\"set(int index, E element)\"></a>set(int index, E element)</h3><h4 id=\"代码实现-6\"><a href=\"#代码实现-6\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.set(<span class=\"number\">0</span>,<span class=\"string\">\"灰灰\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-6\"><a href=\"#源码解析-6\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_016.png\" alt></p>\n<h2 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h2><h3 id=\"remove-int-index\"><a href=\"#remove-int-index\" class=\"headerlink\" title=\"remove(int index)\"></a>remove(int index)</h3><h4 id=\"代码实现-7\"><a href=\"#代码实现-7\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.remove(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-7\"><a href=\"#源码解析-7\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><blockquote>\n<p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_017.png\" alt></p>\n<h3 id=\"remove-Object-o\"><a href=\"#remove-Object-o\" class=\"headerlink\" title=\"remove(Object o)\"></a>remove(Object o)</h3><blockquote>\n<p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color=\"orange\">删除最早添加的元素</font></p>\n</blockquote>\n<h4 id=\"代码实现-8\"><a href=\"#代码实现-8\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.remove(<span class=\"string\">\"hk\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-8\"><a href=\"#源码解析-8\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_018.png\" alt></p>\n<ul>\n<li><font color=\"orange\">fastRemove(int index)</font>删除元素</li>\n</ul>\n<blockquote>\n<p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear方法\"><a href=\"#clear方法\" class=\"headerlink\" title=\"clear方法\"></a>clear方法</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><h4 id=\"代码实现-9\"><a href=\"#代码实现-9\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.clear();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_019.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p>\n<p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<blockquote>\n<p>积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n</blockquote><h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>当然ArrayList里的方法不止这些，本文主要讲一些常用的方法</p><p><img src=\"http://cdn.mjava.top/blog/20200103101050.png\" alt></p><h2 id=\"方法变量\"><a href=\"#方法变量\" class=\"headerlink\" title=\"方法变量\"></a>方法变量</h2><p><code>Arraylist</code>里的方法变量主要有以下几个</p><p><img src=\"http://cdn.mjava.top/blog/Selection_005.png\" alt></p><h2 id=\"构造方法\"><a href=\"#构造方法\" class=\"headerlink\" title=\"构造方法\"></a>构造方法</h2><h3 id=\"有参构造\"><a href=\"#有参构造\" class=\"headerlink\" title=\"有参构造\"></a>有参构造</h3><h4 id=\"传入数组的大小\"><a href=\"#传入数组的大小\" class=\"headerlink\" title=\"传入数组的大小\"></a>传入数组的大小</h4><h5 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;(<span class=\"number\">5</span>);</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n\n\n\n<h5 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"http://cdn.mjava.top/blog/Selection_004.png\" alt></p>\n<h4 id=\"传入一个list对象\"><a href=\"#传入一个list对象\" class=\"headerlink\" title=\"传入一个list对象\"></a>传入一个list对象</h4><p>其实这个就相当于把传入的list对象里的数据<font color=\"orange\">复制</font>到新的ArrayList对象</p>\n<h5 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;(Arrays.asList(<span class=\"string\">\"z\"</span>,<span class=\"string\">\"m\"</span>,<span class=\"string\">\"h\"</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>这里用来<code>Arrays</code>工具类里的<code>asList</code>方法，它的源码里是直接返回一个List，有兴趣的可以去看看，这里就不介绍了</p>\n</blockquote>\n<h5 id=\"源码解析-1\"><a href=\"#源码解析-1\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h5><p><img src=\"http://cdn.mjava.top/blog/Selection_006.png\" alt></p>\n<h3 id=\"无参构造\"><a href=\"#无参构造\" class=\"headerlink\" title=\"无参构造\"></a>无参构造</h3><p>这个比较简单，直接赋值一个空数组</p>\n<h4 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-2\"><a href=\"#源码解析-2\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/20200103112943.png\" alt></p>\n<h2 id=\"add方法\"><a href=\"#add方法\" class=\"headerlink\" title=\"add方法\"></a>add方法</h2><p>add一般常用的有两个方法，一个就是<code>add(E e)</code>在尾部添加数据，一个就是<code>add(int index,E element)</code>在指定位置插入元素</p>\n<h3 id=\"add-E-e\"><a href=\"#add-E-e\" class=\"headerlink\" title=\"add(E e)\"></a>add(E e)</h3><p>这个是<code>Arrayist</code>的主要方法，平时用的也是最多的方法之一，所以源码比较复杂，比较长</p>\n<h4 id=\"代码实现-3\"><a href=\"#代码实现-3\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"灰灰HK\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-3\"><a href=\"#源码解析-3\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_007.png\" alt></p>\n<ul>\n<li><font color=\"orange\">ensureCapacityInternal(int minCapacity)</font>确保数组容量充足</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_009.png\" alt></p>\n<ul>\n<li><font color=\"orange\">calculateCapacity(Object[] elementData, int minCapacity)</font></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_010.png\" alt></p>\n<ul>\n<li>再回到<font color=\"orange\">ensureExplicitCapacity(int minCapacity)</font>这个方法，这个方法先<code>修改次数加1</code>，然后判断<code>size+1</code>是不是比当前的数组容量大，如果比当前的数组容量大，则进行扩容操作，扩大容量为原数组的<code>1.5倍</code></li>\n</ul>\n<blockquote>\n<p>比如第二次调用add方法，此时<code>size+1=2</code>, <code>elementData.length=10</code>,为什么等于10呢？因为第一次默认把数组容量从0扩大到了10,这时<code>size+1</code>比<code>elementData.length</code>小，就不会进行扩容操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_011.png\" alt></p>\n<ul>\n<li><font color=\"orange\">grow(int minCapacity)</font>扩容</li>\n</ul>\n<blockquote>\n<p>这里调用<code>Arrays.copyOf()</code>方法进行复制操作，当进一步深入这个方法时，发现是由<code>System.arraycopy()</code>这个方法实现复制功能的，这个方法由<code>native</code>关键字修饰，表示不是由<code>Java</code>语言实现的，一般是c/cpp实现</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_012.png\" alt></p>\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>到这里，add的方法流程就走完了，其核心步骤：</p>\n<ul>\n<li><p>每次添加元素时判断数组容量是否充足</p>\n</li>\n<li><p><font color=\"orange\">第一次</font>添加元素，把数组容量扩容到10</p>\n</li>\n<li><p>扩容时，除第一次，以后的每次扩容为<font color=\"orange\">原大小的1.5倍</font></p>\n</li>\n<li><p>扩容后调用<code>System.arraycopy()</code>方法把原数组的元素复制到扩容后的新数组</p>\n</li>\n</ul>\n<h3 id=\"add-int-index-E-element\"><a href=\"#add-int-index-E-element\" class=\"headerlink\" title=\"add(int index, E element)\"></a>add(int index, E element)</h3><p>该方法为在指定位置插入元素，该位置及后面所有元素后移</p>\n<h4 id=\"代码实现-4\"><a href=\"#代码实现-4\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.add(<span class=\"number\">0</span>,<span class=\"string\">\"灰灰\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-4\"><a href=\"#源码解析-4\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_013.png\" alt></p>\n<blockquote>\n<p>可以看到，这边又用到了<code>System.arraycopy()</code>这个方法</p>\n</blockquote>\n<ul>\n<li><font color=\"orange\">rangeCheckForAdd(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>这里他是和<code>size</code>对比，而不是和数组的<code>length</code>对比，我个人认为这样第一节省了空间，第二方便后面移动的操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_014.png\" alt></p>\n<ul>\n<li><font color=\"orange\">System.arraycopy()</font>拷贝数组</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title\">arraycopy</span><span class=\"params\">(Object src,  <span class=\"keyword\">int</span>  srcPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                             \t\tObject dest, <span class=\"keyword\">int</span> destPos,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    <span class=\"keyword\">int</span> length)</span></span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>src    原数组对象</li>\n<li>srcPos    原数组起始位置</li>\n<li>dest    目标数组</li>\n<li>destPos    目标数组起始位置</li>\n<li>length    复制多少个数据</li>\n</ul>\n</blockquote>\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>插入方法其主要步骤如下:</p>\n<ul>\n<li>检查插入的位置是否越界</li>\n<li>检查数组容量是否充足，不充足进行扩容相关操作</li>\n<li>调用<code>System.arraycopy()</code>进行<code>index</code>及后面的元素后移</li>\n</ul>\n<h2 id=\"get方法\"><a href=\"#get方法\" class=\"headerlink\" title=\"get方法\"></a>get方法</h2><h3 id=\"get-int-index\"><a href=\"#get-int-index\" class=\"headerlink\" title=\"get(int index)\"></a>get(int index)</h3><h4 id=\"代码实现-5\"><a href=\"#代码实现-5\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.get(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-5\"><a href=\"#源码解析-5\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_015.png\" alt></p>\n<ul>\n<li><font color=\"orange\">rangeCheck(int index)</font>判断是否越界</li>\n</ul>\n<blockquote>\n<p>get个add方法判断越界的方法是不一样的，这边是<code>index&gt;=size</code>,多了个<code>等于</code>，为什么要多个等于呢？因为数组是从0开始的，而size<font color=\"orange\">相当于</font>是开始的从1开始的</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index &gt;= size)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(outOfBoundsMsg(index));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><font color=\"orange\">elementData(int index)</font>直接返回对应下标的数组元素</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (E) elementData[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>get方法比较简单，主要步骤为：</p>\n<ul>\n<li>检查是否越界</li>\n<li>返回对应元素</li>\n</ul>\n<h2 id=\"set方法\"><a href=\"#set方法\" class=\"headerlink\" title=\"set方法\"></a>set方法</h2><h3 id=\"set-int-index-E-element\"><a href=\"#set-int-index-E-element\" class=\"headerlink\" title=\"set(int index, E element)\"></a>set(int index, E element)</h3><h4 id=\"代码实现-6\"><a href=\"#代码实现-6\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.set(<span class=\"number\">0</span>,<span class=\"string\">\"灰灰\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-6\"><a href=\"#源码解析-6\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_016.png\" alt></p>\n<h2 id=\"remove方法\"><a href=\"#remove方法\" class=\"headerlink\" title=\"remove方法\"></a>remove方法</h2><h3 id=\"remove-int-index\"><a href=\"#remove-int-index\" class=\"headerlink\" title=\"remove(int index)\"></a>remove(int index)</h3><h4 id=\"代码实现-7\"><a href=\"#代码实现-7\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.remove(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-7\"><a href=\"#源码解析-7\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><blockquote>\n<p>当删除的元素为最后一个元素时，<code>numMoved</code>就小于0了，就不会进行移动元素的操作</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/Selection_017.png\" alt></p>\n<h3 id=\"remove-Object-o\"><a href=\"#remove-Object-o\" class=\"headerlink\" title=\"remove(Object o)\"></a>remove(Object o)</h3><blockquote>\n<p>这个方法在实际中用的比较少，因为<code>AraryList</code>是可以保存重复的元素，所以删除是<font color=\"orange\">删除最早添加的元素</font></p>\n</blockquote>\n<h4 id=\"代码实现-8\"><a href=\"#代码实现-8\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.remove(<span class=\"string\">\"hk\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码解析-8\"><a href=\"#源码解析-8\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_018.png\" alt></p>\n<ul>\n<li><font color=\"orange\">fastRemove(int index)</font>删除元素</li>\n</ul>\n<blockquote>\n<p>这个方法和remove(int index)内部的操作类似，不过这边不保存被删除的元素</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">fastRemove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">    modCount++;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        System.arraycopy(elementData, index+<span class=\"number\">1</span>, elementData, index,</span><br><span class=\"line\">                         numMoved);</span><br><span class=\"line\">    elementData[--size] = <span class=\"keyword\">null</span>; <span class=\"comment\">// clear to let GC do its work</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear方法\"><a href=\"#clear方法\" class=\"headerlink\" title=\"clear方法\"></a>clear方法</h2><h3 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear()\"></a>clear()</h3><h4 id=\"代码实现-9\"><a href=\"#代码实现-9\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list=<span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"hk\"</span>);</span><br><span class=\"line\">list.clear();</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p><img src=\"http://cdn.mjava.top/blog/Selection_019.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>ArrayList</code>底层扩容或者移动数组元素时都调用了<code>System.arraycopy()</code>来进行相关操作，平时进行我们进行数组复制或移动的时候也可以调用这个方法了，这个性能比循环复制性能高多了，特别是在大量数据的时候。</p>\n<p>文章好几次出现了<code>modCount++</code>这个操作，这个<code>modCount</code>主要用户内部类的迭代器</p>\n"},{"title":"Java包装类缓存机制","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:08:18.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n## 面试题\n\n首先,来看一道常见的面试题,下面代码运行后会输出什么?\n\n![](http://cdn.mjava.top/blog/20200603110911.png)\n\n上面代码运行后,最终会输出`false`和`true`;为什么会这样呢?\n\n按道理来说,在Java中`==`是比较两个对象的地址,上面代码中`i3`和`i4`是两个不同的对象,理应也应该返回是`false`,怎么返回是`true`呢?让我们慢慢往下看\n\n## Integer的缓存机制\n\n让我们来看看他的源代码.\n\n当执行`Integer i=128;`这个语句时,Java会调用`valueOf(int i)`方法,然后`自动装箱`的方式,让其变成`Integer i=new Integer(128)`,具体源码如下:\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    //装箱\n    return new Integer(i);\n}\n```\n\n从上面的源码中可以看到,在装箱之前会执行一个`if`语句,这个`if`语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.\n\n```java\n//Integer包装类缓存源码\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n        private IntegerCache() {}\n    }\n```\n\n从源码中可以看到,`Integer`的缓存范围是`-128~127`,所以过程大致如下:\n\n![](http://cdn.mjava.top/blog/20200603114246.png)\n\n按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的`i3==i4`会输出为`true`;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用`==`比较返回也不同;\n\n## 其他包装类缓存机制\n\n除了`Integer`之外,其他的包装类也使用了缓存技术;\n\n### Long\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l >= -128 && l <= 127) { // will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n\n\nprivate static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n```\n\n### Byte\n\n> 缓存范围-128~127   (byte范围:一个byte占8位,所以取值范围是**-2^7~2^7-1**)\n\n\n\n```java\npublic static Byte valueOf(byte b) {\n    final int offset = 128;\n    return ByteCache.cache[(int)b + offset];\n}\n\nprivate static class ByteCache {\n    private ByteCache(){}\n\n    static final Byte cache[] = new Byte[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Byte((byte)(i - 128));\n    }\n}\n```\n\n### Character\n\n> 缓存范围0~127  (ascii码范围) \n\n\n\n```java\npublic static Character valueOf(char c) {\n    if (c <= 127) { // must cache\n        return CharacterCache.cache[(int)c];\n    }\n    return new Character(c);\n}\n\nprivate static class CharacterCache {\n    private CharacterCache(){}\n\n    static final Character cache[] = new Character[127 + 1];\n\n    static {\n        for (int i = 0; i < cache.length; i++)\n            cache[i] = new Character((char)i);\n    }\n}\n```\n\n### Short\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Short valueOf(short s) {\n    final int offset = 128;\n    int sAsInt = s;\n    if (sAsInt >= -128 && sAsInt <= 127) { // must cache\n        return ShortCache.cache[sAsInt + offset];\n    }\n    return new Short(s);\n}\n\nprivate static class ShortCache {\n    private ShortCache(){}\n\n    static final Short cache[] = new Short[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Short((short)(i - 128));\n    }\n}\n```\n\n### Boolean\n\n> 缓存范围 `true`  `false`     它只设置了两个静态变量用来充当缓存\n\n\n\n```java\npublic static final Boolean TRUE = new Boolean(true);\npublic static final Boolean FALSE = new Boolean(false);\n\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n\n## 建议\n\n包装类对比数据是否相同的时候,建议采用重写的`equals()`方法.","source":"_posts/java/java-base-data-pack.md","raw":"---\ntitle: Java包装类缓存机制\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:08:18\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n\n\n\n\n## 面试题\n\n首先,来看一道常见的面试题,下面代码运行后会输出什么?\n\n![](http://cdn.mjava.top/blog/20200603110911.png)\n\n上面代码运行后,最终会输出`false`和`true`;为什么会这样呢?\n\n按道理来说,在Java中`==`是比较两个对象的地址,上面代码中`i3`和`i4`是两个不同的对象,理应也应该返回是`false`,怎么返回是`true`呢?让我们慢慢往下看\n\n## Integer的缓存机制\n\n让我们来看看他的源代码.\n\n当执行`Integer i=128;`这个语句时,Java会调用`valueOf(int i)`方法,然后`自动装箱`的方式,让其变成`Integer i=new Integer(128)`,具体源码如下:\n\n```java\npublic static Integer valueOf(int i) {\n    if (i >= IntegerCache.low && i <= IntegerCache.high)\n        return IntegerCache.cache[i + (-IntegerCache.low)];\n    //装箱\n    return new Integer(i);\n}\n```\n\n从上面的源码中可以看到,在装箱之前会执行一个`if`语句,这个`if`语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.\n\n```java\n//Integer包装类缓存源码\nprivate static class IntegerCache {\n        static final int low = -128;\n        static final int high;\n        static final Integer cache[];\n        static {\n            // high value may be configured by property\n            int h = 127;\n            String integerCacheHighPropValue =\n                sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\");\n            if (integerCacheHighPropValue != null) {\n                try {\n                    int i = parseInt(integerCacheHighPropValue);\n                    i = Math.max(i, 127);\n                    // Maximum array size is Integer.MAX_VALUE\n                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);\n                } catch( NumberFormatException nfe) {\n                    // If the property cannot be parsed into an int, ignore it.\n                }\n            }\n            high = h;\n            cache = new Integer[(high - low) + 1];\n            int j = low;\n            for(int k = 0; k < cache.length; k++)\n                cache[k] = new Integer(j++);\n            // range [-128, 127] must be interned (JLS7 5.1.7)\n            assert IntegerCache.high >= 127;\n        }\n        private IntegerCache() {}\n    }\n```\n\n从源码中可以看到,`Integer`的缓存范围是`-128~127`,所以过程大致如下:\n\n![](http://cdn.mjava.top/blog/20200603114246.png)\n\n按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的`i3==i4`会输出为`true`;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用`==`比较返回也不同;\n\n## 其他包装类缓存机制\n\n除了`Integer`之外,其他的包装类也使用了缓存技术;\n\n### Long\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Long valueOf(long l) {\n    final int offset = 128;\n    if (l >= -128 && l <= 127) { // will cache\n        return LongCache.cache[(int)l + offset];\n    }\n    return new Long(l);\n}\n\n\nprivate static class LongCache {\n    private LongCache(){}\n\n    static final Long cache[] = new Long[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Long(i - 128);\n    }\n}\n```\n\n### Byte\n\n> 缓存范围-128~127   (byte范围:一个byte占8位,所以取值范围是**-2^7~2^7-1**)\n\n\n\n```java\npublic static Byte valueOf(byte b) {\n    final int offset = 128;\n    return ByteCache.cache[(int)b + offset];\n}\n\nprivate static class ByteCache {\n    private ByteCache(){}\n\n    static final Byte cache[] = new Byte[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Byte((byte)(i - 128));\n    }\n}\n```\n\n### Character\n\n> 缓存范围0~127  (ascii码范围) \n\n\n\n```java\npublic static Character valueOf(char c) {\n    if (c <= 127) { // must cache\n        return CharacterCache.cache[(int)c];\n    }\n    return new Character(c);\n}\n\nprivate static class CharacterCache {\n    private CharacterCache(){}\n\n    static final Character cache[] = new Character[127 + 1];\n\n    static {\n        for (int i = 0; i < cache.length; i++)\n            cache[i] = new Character((char)i);\n    }\n}\n```\n\n### Short\n\n> 缓存范围-128~127\n\n\n\n```java\npublic static Short valueOf(short s) {\n    final int offset = 128;\n    int sAsInt = s;\n    if (sAsInt >= -128 && sAsInt <= 127) { // must cache\n        return ShortCache.cache[sAsInt + offset];\n    }\n    return new Short(s);\n}\n\nprivate static class ShortCache {\n    private ShortCache(){}\n\n    static final Short cache[] = new Short[-(-128) + 127 + 1];\n\n    static {\n        for(int i = 0; i < cache.length; i++)\n            cache[i] = new Short((short)(i - 128));\n    }\n}\n```\n\n### Boolean\n\n> 缓存范围 `true`  `false`     它只设置了两个静态变量用来充当缓存\n\n\n\n```java\npublic static final Boolean TRUE = new Boolean(true);\npublic static final Boolean FALSE = new Boolean(false);\n\npublic static Boolean valueOf(boolean b) {\n    return (b ? TRUE : FALSE);\n}\n```\n\n## 建议\n\n包装类对比数据是否相同的时候,建议采用重写的`equals()`方法.","slug":"java/java-base-data-pack","published":1,"updated":"2020-09-16T07:09:58.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02k001qw2g5eqvsce3x","content":"<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>首先,来看一道常见的面试题,下面代码运行后会输出什么?</p><p><img src=\"http://cdn.mjava.top/blog/20200603110911.png\" alt></p><p>上面代码运行后,最终会输出<code>false</code>和<code>true</code>;为什么会这样呢?</p><p>按道理来说,在Java中<code>==</code>是比较两个对象的地址,上面代码中<code>i3</code>和<code>i4</code>是两个不同的对象,理应也应该返回是<code>false</code>,怎么返回是<code>true</code>呢?让我们慢慢往下看</p><h2 id=\"Integer的缓存机制\"><a href=\"#Integer的缓存机制\" class=\"headerlink\" title=\"Integer的缓存机制\"></a>Integer的缓存机制</h2><a id=\"more\"></a>\n\n\n\n<p>让我们来看看他的源代码.</p>\n<p>当执行<code>Integer i=128;</code>这个语句时,Java会调用<code>valueOf(int i)</code>方法,然后<code>自动装箱</code>的方式,让其变成<code>Integer i=new Integer(128)</code>,具体源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"comment\">//装箱</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的源码中可以看到,在装箱之前会执行一个<code>if</code>语句,这个<code>if</code>语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Integer包装类缓存源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</span><br><span class=\"line\">            String integerCacheHighPropValue =</span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中可以看到,<code>Integer</code>的缓存范围是<code>-128~127</code>,所以过程大致如下:</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200603114246.png\" alt></p>\n<p>按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的<code>i3==i4</code>会输出为<code>true</code>;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用<code>==</code>比较返回也不同;</p>\n<h2 id=\"其他包装类缓存机制\"><a href=\"#其他包装类缓存机制\" class=\"headerlink\" title=\"其他包装类缓存机制\"></a>其他包装类缓存机制</h2><p>除了<code>Integer</code>之外,其他的包装类也使用了缓存技术;</p>\n<h3 id=\"Long\"><a href=\"#Long\" class=\"headerlink\" title=\"Long\"></a>Long</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= -<span class=\"number\">128</span> &amp;&amp; l &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// will cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> LongCache.cache[(<span class=\"keyword\">int</span>)l + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Long(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LongCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long cache[] = <span class=\"keyword\">new</span> Long[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Long(i - <span class=\"number\">128</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><blockquote>\n<p>缓存范围-128<del>127   (byte范围:一个byte占8位,所以取值范围是**-2^7</del>2^7-1**)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Byte <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ByteCache.cache[(<span class=\"keyword\">int</span>)b + offset];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ByteCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ByteCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Byte cache[] = <span class=\"keyword\">new</span> Byte[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Byte((<span class=\"keyword\">byte</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Character\"><a href=\"#Character\" class=\"headerlink\" title=\"Character\"></a>Character</h3><blockquote>\n<p>缓存范围0~127  (ascii码范围) </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Character <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CharacterCache.cache[(<span class=\"keyword\">int</span>)c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Character(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CharacterCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Character cache[] = <span class=\"keyword\">new</span> Character[<span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Character((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Short\"><a href=\"#Short\" class=\"headerlink\" title=\"Short\"></a>Short</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Short <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">short</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sAsInt = s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sAsInt &gt;= -<span class=\"number\">128</span> &amp;&amp; sAsInt &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Short(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShortCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShortCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Short cache[] = <span class=\"keyword\">new</span> Short[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Short((<span class=\"keyword\">short</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p>缓存范围 <code>true</code>  <code>false</code>     它只设置了两个静态变量用来充当缓存</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Boolean TRUE = <span class=\"keyword\">new</span> Boolean(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Boolean FALSE = <span class=\"keyword\">new</span> Boolean(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>包装类对比数据是否相同的时候,建议采用重写的<code>equals()</code>方法.</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"面试题\"><a href=\"#面试题\" class=\"headerlink\" title=\"面试题\"></a>面试题</h2><p>首先,来看一道常见的面试题,下面代码运行后会输出什么?</p><p><img src=\"http://cdn.mjava.top/blog/20200603110911.png\" alt></p><p>上面代码运行后,最终会输出<code>false</code>和<code>true</code>;为什么会这样呢?</p><p>按道理来说,在Java中<code>==</code>是比较两个对象的地址,上面代码中<code>i3</code>和<code>i4</code>是两个不同的对象,理应也应该返回是<code>false</code>,怎么返回是<code>true</code>呢?让我们慢慢往下看</p><h2 id=\"Integer的缓存机制\"><a href=\"#Integer的缓存机制\" class=\"headerlink\" title=\"Integer的缓存机制\"></a>Integer的缓存机制</h2>","more":"\n\n\n\n<p>让我们来看看他的源代码.</p>\n<p>当执行<code>Integer i=128;</code>这个语句时,Java会调用<code>valueOf(int i)</code>方法,然后<code>自动装箱</code>的方式,让其变成<code>Integer i=new Integer(128)</code>,具体源码如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Integer <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class=\"line\">    <span class=\"comment\">//装箱</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Integer(i);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从上面的源码中可以看到,在装箱之前会执行一个<code>if</code>语句,这个<code>if</code>语句就是判断传入的值是否在缓存内,如果在缓存内,就直接返回缓存内的值,如果不在缓存内,就装箱,在堆内创建一个新空间来存放.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Integer包装类缓存源码</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">IntegerCache</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> low = -<span class=\"number\">128</span>;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> high;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer cache[];</span><br><span class=\"line\">        <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// high value may be configured by property</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> h = <span class=\"number\">127</span>;</span><br><span class=\"line\">            String integerCacheHighPropValue =</span><br><span class=\"line\">                sun.misc.VM.getSavedProperty(<span class=\"string\">\"java.lang.Integer.IntegerCache.high\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (integerCacheHighPropValue != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class=\"line\">                    i = Math.max(i, <span class=\"number\">127</span>);</span><br><span class=\"line\">                    <span class=\"comment\">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class=\"line\">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class=\"number\">1</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span>( NumberFormatException nfe) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            high = h;</span><br><span class=\"line\">            cache = <span class=\"keyword\">new</span> Integer[(high - low) + <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = low;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; cache.length; k++)</span><br><span class=\"line\">                cache[k] = <span class=\"keyword\">new</span> Integer(j++);</span><br><span class=\"line\">            <span class=\"comment\">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class=\"line\">            <span class=\"keyword\">assert</span> IntegerCache.high &gt;= <span class=\"number\">127</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">IntegerCache</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>从源码中可以看到,<code>Integer</code>的缓存范围是<code>-128~127</code>,所以过程大致如下:</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200603114246.png\" alt></p>\n<p>按照上面这个方法,只要在数据在缓存池范围内的,都会引用缓存在堆内的地址,所有上面的<code>i3==i4</code>会输出为<code>true</code>;而不在缓存范围内的,就会在堆中开放新的空间来存放对象,所以地址不同,用<code>==</code>比较返回也不同;</p>\n<h2 id=\"其他包装类缓存机制\"><a href=\"#其他包装类缓存机制\" class=\"headerlink\" title=\"其他包装类缓存机制\"></a>其他包装类缓存机制</h2><p>除了<code>Integer</code>之外,其他的包装类也使用了缓存技术;</p>\n<h3 id=\"Long\"><a href=\"#Long\" class=\"headerlink\" title=\"Long\"></a>Long</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">long</span> l)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= -<span class=\"number\">128</span> &amp;&amp; l &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// will cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> LongCache.cache[(<span class=\"keyword\">int</span>)l + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Long(l);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LongCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">LongCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Long cache[] = <span class=\"keyword\">new</span> Long[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Long(i - <span class=\"number\">128</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Byte\"><a href=\"#Byte\" class=\"headerlink\" title=\"Byte\"></a>Byte</h3><blockquote>\n<p>缓存范围-128<del>127   (byte范围:一个byte占8位,所以取值范围是**-2^7</del>2^7-1**)</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Byte <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">byte</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ByteCache.cache[(<span class=\"keyword\">int</span>)b + offset];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ByteCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ByteCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Byte cache[] = <span class=\"keyword\">new</span> Byte[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Byte((<span class=\"keyword\">byte</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Character\"><a href=\"#Character\" class=\"headerlink\" title=\"Character\"></a>Character</h3><blockquote>\n<p>缓存范围0~127  (ascii码范围) </p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Character <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> CharacterCache.cache[(<span class=\"keyword\">int</span>)c];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Character(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CharacterCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CharacterCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Character cache[] = <span class=\"keyword\">new</span> Character[<span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Character((<span class=\"keyword\">char</span>)i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Short\"><a href=\"#Short\" class=\"headerlink\" title=\"Short\"></a>Short</h3><blockquote>\n<p>缓存范围-128~127</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Short <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">short</span> s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> offset = <span class=\"number\">128</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sAsInt = s;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sAsInt &gt;= -<span class=\"number\">128</span> &amp;&amp; sAsInt &lt;= <span class=\"number\">127</span>) &#123; <span class=\"comment\">// must cache</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> ShortCache.cache[sAsInt + offset];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Short(s);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShortCache</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">ShortCache</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Short cache[] = <span class=\"keyword\">new</span> Short[-(-<span class=\"number\">128</span>) + <span class=\"number\">127</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cache.length; i++)</span><br><span class=\"line\">            cache[i] = <span class=\"keyword\">new</span> Short((<span class=\"keyword\">short</span>)(i - <span class=\"number\">128</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Boolean\"><a href=\"#Boolean\" class=\"headerlink\" title=\"Boolean\"></a>Boolean</h3><blockquote>\n<p>缓存范围 <code>true</code>  <code>false</code>     它只设置了两个静态变量用来充当缓存</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Boolean TRUE = <span class=\"keyword\">new</span> Boolean(<span class=\"keyword\">true</span>);</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Boolean FALSE = <span class=\"keyword\">new</span> Boolean(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title\">valueOf</span><span class=\"params\">(<span class=\"keyword\">boolean</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"建议\"><a href=\"#建议\" class=\"headerlink\" title=\"建议\"></a>建议</h2><p>包装类对比数据是否相同的时候,建议采用重写的<code>equals()</code>方法.</p>\n"},{"title":"【图】用图片告诉你Java中的位运算","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-30T14:17:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![](http://cdn.mjava.top/20191230221924.jpg)\n\n## 前言\n\n​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;\n\n讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font>\n\n> 其中正数的<font color=orange>原码=反码=补码</font>\n\n## 原码、反码、补码\n\n> 在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值\n\n比如说-9在内存中的二进制码,这里用8位表示:\n\n![](http://cdn.mjava.top/20191230212102.png)\n\n最后<font color=orange>-9在内存中的二进制值为11110111</font>\n\n> 在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font>\n\n## 位运算\n\n### 左移和右移\n\n在`Java`中的`int`类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数\n\n#### 负数的左移和右移\n\n> <font color=orange>这边负数表示是在内存中表示的二进制值</font>\n>\n> 右移时:最高位<font color=orange>补符号位1</font>\n>\n> 左移时:末尾补0\n\n![](http://cdn.mjava.top/20191230212836.png)\n\n#### 正数的左移和右移\n\n> 右移时:最高位<font color=orange>补符号位0</font>\n>\n> 左移时:末尾补0\n\n![](http://cdn.mjava.top/20191230212951.png)\n\n### 无符号右移\n\n>无论是正数还是负数,右移<font color=orange>最高位一律补0</font>\n\n![](http://cdn.mjava.top/20191230213359.png)\n\n### &(位与)\n\n> 当相对应的位都为1时,等于1,否则等于0\n\n为了方便表示,接下来全部都用8位表示一个数\n\n![](http://cdn.mjava.top/20191230215214.png)\n\n### |(位或)\n\n> 当相对应的位有一个为1时,等于1,否则等于0\n\n![](http://cdn.mjava.top/20191230215609.png)\n\n### ^(异或)\n\n> 当相对应的位不同时,等于1,相同时等于0\n\n![](http://cdn.mjava.top/20191230220948.png)\n\n### ~(取反)\n\n> 1等于0,0等于1\n\n![](http://cdn.mjava.top/20191230220449.png)\n\n## 总结\n\n| 含义       | 运算符 | 说明                                                         |\n| ---------- | ------ | ------------------------------------------------------------ |\n| 左移       | <<     | 末尾补0                                                      |\n| 右移       | \\>>    | 负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font> |\n| 无符号右移 | \\>>>   | 无论是正数还是负数,右移<font color=orange>最高位一律补0</font> |\n| &(位与)    | &      | 当相对应的位都为1时,等于1,否则等于0                          |\n| \\|(位或)   | \\|     | 当相对应的位有一个为1时,等于1,否则等于0                      |\n| ^(异或)    | ^      | 当相对应的位 不同时,等于1  相同时,等于0                      |\n| ~(取反)    | ~      | 1等于0,0等于1                                                |\n\n> 最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font>\n\n$$\n9向左移n位=9*2^n\n$$\n\n> <font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font>\n\n$$\n9向右移n位=⌊9/2^n⌋\n$$\n\n<font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章[向上取整与向下取整函数](https://www.shuxuele.com/sets/function-floor-ceiling.html);该技巧不适用无符号右移</font>\n\n","source":"_posts/java/java-base-wei.md","raw":"---\ntitle: 【图】用图片告诉你Java中的位运算\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-30 22:17:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n![](http://cdn.mjava.top/20191230221924.jpg)\n\n## 前言\n\n​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;\n\n讲位操作之前,就必须要知道<font color=orange>原码、反码、补码</font>\n\n> 其中正数的<font color=orange>原码=反码=补码</font>\n\n## 原码、反码、补码\n\n> 在机器的内存中,一个负数的表示是<font color=orange>这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值\n\n比如说-9在内存中的二进制码,这里用8位表示:\n\n![](http://cdn.mjava.top/20191230212102.png)\n\n最后<font color=orange>-9在内存中的二进制值为11110111</font>\n\n> 在二进制中,最高位为符号位,<font color=red>0代表正,1代表负</font>\n\n## 位运算\n\n### 左移和右移\n\n在`Java`中的`int`类型有<font color=orange>4字节</font>,一个字节有<font color=orange>8位</font>,所以这边用32位表示一个数\n\n#### 负数的左移和右移\n\n> <font color=orange>这边负数表示是在内存中表示的二进制值</font>\n>\n> 右移时:最高位<font color=orange>补符号位1</font>\n>\n> 左移时:末尾补0\n\n![](http://cdn.mjava.top/20191230212836.png)\n\n#### 正数的左移和右移\n\n> 右移时:最高位<font color=orange>补符号位0</font>\n>\n> 左移时:末尾补0\n\n![](http://cdn.mjava.top/20191230212951.png)\n\n### 无符号右移\n\n>无论是正数还是负数,右移<font color=orange>最高位一律补0</font>\n\n![](http://cdn.mjava.top/20191230213359.png)\n\n### &(位与)\n\n> 当相对应的位都为1时,等于1,否则等于0\n\n为了方便表示,接下来全部都用8位表示一个数\n\n![](http://cdn.mjava.top/20191230215214.png)\n\n### |(位或)\n\n> 当相对应的位有一个为1时,等于1,否则等于0\n\n![](http://cdn.mjava.top/20191230215609.png)\n\n### ^(异或)\n\n> 当相对应的位不同时,等于1,相同时等于0\n\n![](http://cdn.mjava.top/20191230220948.png)\n\n### ~(取反)\n\n> 1等于0,0等于1\n\n![](http://cdn.mjava.top/20191230220449.png)\n\n## 总结\n\n| 含义       | 运算符 | 说明                                                         |\n| ---------- | ------ | ------------------------------------------------------------ |\n| 左移       | <<     | 末尾补0                                                      |\n| 右移       | \\>>    | 负数:最高位<font color=orange>补符号位1</font>      正数:最高位<font color=orange>补符号位0</font> |\n| 无符号右移 | \\>>>   | 无论是正数还是负数,右移<font color=orange>最高位一律补0</font> |\n| &(位与)    | &      | 当相对应的位都为1时,等于1,否则等于0                          |\n| \\|(位或)   | \\|     | 当相对应的位有一个为1时,等于1,否则等于0                      |\n| ^(异或)    | ^      | 当相对应的位 不同时,等于1  相同时,等于0                      |\n| ~(取反)    | ~      | 1等于0,0等于1                                                |\n\n> 最后有个小技巧,<font color=orange>向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font>\n\n$$\n9向左移n位=9*2^n\n$$\n\n> <font color=orange>向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font>\n\n$$\n9向右移n位=⌊9/2^n⌋\n$$\n\n<font color=red>注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章[向上取整与向下取整函数](https://www.shuxuele.com/sets/function-floor-ceiling.html);该技巧不适用无符号右移</font>\n\n","slug":"java/java-base-wei","published":1,"updated":"2019-12-31T07:33:55.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02l001sw2g5fviz53h9","content":"<p><img src=\"http://cdn.mjava.top/20191230221924.jpg\" alt></p><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p><p>讲位操作之前,就必须要知道<font color=\"orange\">原码、反码、补码</font></p><blockquote>\n<p>其中正数的<font color=\"orange\">原码=反码=补码</font></p>\n</blockquote><h2 id=\"原码、反码、补码\"><a href=\"#原码、反码、补码\" class=\"headerlink\" title=\"原码、反码、补码\"></a>原码、反码、补码</h2><a id=\"more\"></a>\n\n\n\n<blockquote>\n<p>在机器的内存中,一个负数的表示是<font color=\"orange\">这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p>\n</blockquote>\n<p>比如说-9在内存中的二进制码,这里用8位表示:</p>\n<p><img src=\"http://cdn.mjava.top/20191230212102.png\" alt></p>\n<p>最后<font color=\"orange\">-9在内存中的二进制值为11110111</font></p>\n<blockquote>\n<p>在二进制中,最高位为符号位,<font color=\"red\">0代表正,1代表负</font></p>\n</blockquote>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"左移和右移\"><a href=\"#左移和右移\" class=\"headerlink\" title=\"左移和右移\"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color=\"orange\">4字节</font>,一个字节有<font color=\"orange\">8位</font>,所以这边用32位表示一个数</p>\n<h4 id=\"负数的左移和右移\"><a href=\"#负数的左移和右移\" class=\"headerlink\" title=\"负数的左移和右移\"></a>负数的左移和右移</h4><blockquote>\n<p><font color=\"orange\">这边负数表示是在内存中表示的二进制值</font></p>\n<p>右移时:最高位<font color=\"orange\">补符号位1</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230212836.png\" alt></p>\n<h4 id=\"正数的左移和右移\"><a href=\"#正数的左移和右移\" class=\"headerlink\" title=\"正数的左移和右移\"></a>正数的左移和右移</h4><blockquote>\n<p>右移时:最高位<font color=\"orange\">补符号位0</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230212951.png\" alt></p>\n<h3 id=\"无符号右移\"><a href=\"#无符号右移\" class=\"headerlink\" title=\"无符号右移\"></a>无符号右移</h3><blockquote>\n<p>无论是正数还是负数,右移<font color=\"orange\">最高位一律补0</font></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230213359.png\" alt></p>\n<h3 id=\"amp-位与\"><a href=\"#amp-位与\" class=\"headerlink\" title=\"&amp;(位与)\"></a>&amp;(位与)</h3><blockquote>\n<p>当相对应的位都为1时,等于1,否则等于0</p>\n</blockquote>\n<p>为了方便表示,接下来全部都用8位表示一个数</p>\n<p><img src=\"http://cdn.mjava.top/20191230215214.png\" alt></p>\n<h3 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"|(位或)\"></a>|(位或)</h3><blockquote>\n<p>当相对应的位有一个为1时,等于1,否则等于0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230215609.png\" alt></p>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"^(异或)\"></a>^(异或)</h3><blockquote>\n<p>当相对应的位不同时,等于1,相同时等于0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230220948.png\" alt></p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"~(取反)\"></a>~(取反)</h3><blockquote>\n<p>1等于0,0等于1</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230220449.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td>&lt;&lt;</td>\n<td>末尾补0</td>\n</tr>\n<tr>\n<td>右移</td>\n<td>&gt;&gt;</td>\n<td>负数:最高位<font color=\"orange\">补符号位1</font>      正数:最高位<font color=\"orange\">补符号位0</font></td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>&gt;&gt;&gt;</td>\n<td>无论是正数还是负数,右移<font color=\"orange\">最高位一律补0</font></td>\n</tr>\n<tr>\n<td>&amp;(位与)</td>\n<td>&amp;</td>\n<td>当相对应的位都为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>|(位或)</td>\n<td>|</td>\n<td>当相对应的位有一个为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>^(异或)</td>\n<td>^</td>\n<td>当相对应的位 不同时,等于1  相同时,等于0</td>\n</tr>\n<tr>\n<td>~(取反)</td>\n<td>~</td>\n<td>1等于0,0等于1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后有个小技巧,<font color=\"orange\">向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向左移n位=9*2^n<br>$$</p>\n<blockquote>\n<p><font color=\"orange\">向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向右移n位=⌊9/2^n⌋<br>$$</p>\n<p><font color=\"red\">注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href=\"https://www.shuxuele.com/sets/function-floor-ceiling.html\" rel=\"noopener\" target=\"_blank\">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/20191230221924.jpg\" alt></p><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​        虽然位运算在实际开发中并不常用,但是在各种算法中却常常见到它们的身影.因为是直接操作二进制的,所以机器执行起来就快很多,所以尽管实际业务中不常用,但如果你不想只做个码农,这个基础还是要掌握的;</p><p>讲位操作之前,就必须要知道<font color=\"orange\">原码、反码、补码</font></p><blockquote>\n<p>其中正数的<font color=\"orange\">原码=反码=补码</font></p>\n</blockquote><h2 id=\"原码、反码、补码\"><a href=\"#原码、反码、补码\" class=\"headerlink\" title=\"原码、反码、补码\"></a>原码、反码、补码</h2>","more":"\n\n\n\n<blockquote>\n<p>在机器的内存中,一个负数的表示是<font color=\"orange\">这个负数的绝对值取原码,再取反码,再加一</font>,最后出现的就是这个负数在内存中的表示的二进制数值</p>\n</blockquote>\n<p>比如说-9在内存中的二进制码,这里用8位表示:</p>\n<p><img src=\"http://cdn.mjava.top/20191230212102.png\" alt></p>\n<p>最后<font color=\"orange\">-9在内存中的二进制值为11110111</font></p>\n<blockquote>\n<p>在二进制中,最高位为符号位,<font color=\"red\">0代表正,1代表负</font></p>\n</blockquote>\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><h3 id=\"左移和右移\"><a href=\"#左移和右移\" class=\"headerlink\" title=\"左移和右移\"></a>左移和右移</h3><p>在<code>Java</code>中的<code>int</code>类型有<font color=\"orange\">4字节</font>,一个字节有<font color=\"orange\">8位</font>,所以这边用32位表示一个数</p>\n<h4 id=\"负数的左移和右移\"><a href=\"#负数的左移和右移\" class=\"headerlink\" title=\"负数的左移和右移\"></a>负数的左移和右移</h4><blockquote>\n<p><font color=\"orange\">这边负数表示是在内存中表示的二进制值</font></p>\n<p>右移时:最高位<font color=\"orange\">补符号位1</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230212836.png\" alt></p>\n<h4 id=\"正数的左移和右移\"><a href=\"#正数的左移和右移\" class=\"headerlink\" title=\"正数的左移和右移\"></a>正数的左移和右移</h4><blockquote>\n<p>右移时:最高位<font color=\"orange\">补符号位0</font></p>\n<p>左移时:末尾补0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230212951.png\" alt></p>\n<h3 id=\"无符号右移\"><a href=\"#无符号右移\" class=\"headerlink\" title=\"无符号右移\"></a>无符号右移</h3><blockquote>\n<p>无论是正数还是负数,右移<font color=\"orange\">最高位一律补0</font></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230213359.png\" alt></p>\n<h3 id=\"amp-位与\"><a href=\"#amp-位与\" class=\"headerlink\" title=\"&amp;(位与)\"></a>&amp;(位与)</h3><blockquote>\n<p>当相对应的位都为1时,等于1,否则等于0</p>\n</blockquote>\n<p>为了方便表示,接下来全部都用8位表示一个数</p>\n<p><img src=\"http://cdn.mjava.top/20191230215214.png\" alt></p>\n<h3 id=\"位或\"><a href=\"#位或\" class=\"headerlink\" title=\"|(位或)\"></a>|(位或)</h3><blockquote>\n<p>当相对应的位有一个为1时,等于1,否则等于0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230215609.png\" alt></p>\n<h3 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"^(异或)\"></a>^(异或)</h3><blockquote>\n<p>当相对应的位不同时,等于1,相同时等于0</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230220948.png\" alt></p>\n<h3 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"~(取反)\"></a>~(取反)</h3><blockquote>\n<p>1等于0,0等于1</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/20191230220449.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><table>\n<thead>\n<tr>\n<th>含义</th>\n<th>运算符</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>左移</td>\n<td>&lt;&lt;</td>\n<td>末尾补0</td>\n</tr>\n<tr>\n<td>右移</td>\n<td>&gt;&gt;</td>\n<td>负数:最高位<font color=\"orange\">补符号位1</font>      正数:最高位<font color=\"orange\">补符号位0</font></td>\n</tr>\n<tr>\n<td>无符号右移</td>\n<td>&gt;&gt;&gt;</td>\n<td>无论是正数还是负数,右移<font color=\"orange\">最高位一律补0</font></td>\n</tr>\n<tr>\n<td>&amp;(位与)</td>\n<td>&amp;</td>\n<td>当相对应的位都为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>|(位或)</td>\n<td>|</td>\n<td>当相对应的位有一个为1时,等于1,否则等于0</td>\n</tr>\n<tr>\n<td>^(异或)</td>\n<td>^</td>\n<td>当相对应的位 不同时,等于1  相同时,等于0</td>\n</tr>\n<tr>\n<td>~(取反)</td>\n<td>~</td>\n<td>1等于0,0等于1</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>最后有个小技巧,<font color=\"orange\">向左位移几位就是乘以2的几次方,比如9向左移n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向左移n位=9*2^n<br>$$</p>\n<blockquote>\n<p><font color=\"orange\">向右移几位就是除以2的几次方然后向下取整,比如9向右移动n位,就是</font></p>\n</blockquote>\n<p>$$<br>9向右移n位=⌊9/2^n⌋<br>$$</p>\n<p><font color=\"red\">注:⌊⌋是数学符号向下取整,例如:2.25向下取整是2;   -2.25向下取整是-3; 具体的话可以看看这篇文章<a href=\"https://www.shuxuele.com/sets/function-floor-ceiling.html\" rel=\"noopener\" target=\"_blank\">向上取整与向下取整函数</a>;该技巧不适用无符号右移</font></p>\n"},{"title":"Java中String判断为空的4大方法比较","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T10:59:15.000Z","password":null,"summary":null,"_content":"\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](http://cdn.mjava.top/blog/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","source":"_posts/java/java-isnull-four.md","raw":"---\ntitle: Java中String判断为空的4大方法比较\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\ncategories:\n  - Java\ndate: 2019-08-20 18:59:15\npassword:\nsummary:\n---\n\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](http://cdn.mjava.top/blog/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","slug":"java/java-isnull-four","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02m001ww2g501cds6ex","content":"<h2 id=\"一-四大方法\"><a href=\"#一-四大方法\" class=\"headerlink\" title=\"一.四大方法\"></a>一.四大方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo1</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       String a=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">       String a2=<span class=\"keyword\">new</span> String();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(a==<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(a2.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a.isEmpty());</span><br><span class=\"line\">       System.out.println(a2.isEmpty());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n<h2 id=\"二-输出结果\"><a href=\"#二-输出结果\" class=\"headerlink\" title=\"二.输出结果\"></a>二.输出结果</h2><p><img src=\"http://cdn.mjava.top/blog/javaands1.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>可以看到用”==”判断的那组出现了不一致的情况</p>\n</blockquote>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"一-四大方法\"><a href=\"#一-四大方法\" class=\"headerlink\" title=\"一.四大方法\"></a>一.四大方法</h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo1</span> </span>&#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">       String a=<span class=\"string\">\"\"</span>;</span><br><span class=\"line\">       String a2=<span class=\"keyword\">new</span> String();</span><br><span class=\"line\"></span><br><span class=\"line\">       System.out.println(a==<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       System.out.println(a2==<span class=\"keyword\">null</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(a2.length()&lt;=<span class=\"number\">0</span>);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       System.out.println(a.isEmpty());</span><br><span class=\"line\">       System.out.println(a2.isEmpty());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">\"------------------------------\"</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"\n\n<h2 id=\"二-输出结果\"><a href=\"#二-输出结果\" class=\"headerlink\" title=\"二.输出结果\"></a>二.输出结果</h2><p><img src=\"http://cdn.mjava.top/blog/javaands1.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>可以看到用”==”判断的那组出现了不一致的情况</p>\n</blockquote>\n"},{"title":"Java的==和equals","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T11:22:50.000Z","password":null,"summary":null,"_content":"在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](http://cdn.mjava.top/blog/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](http://cdn.mjava.top/blog/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","source":"_posts/java/java-equals.md","raw":"---\ntitle: Java的==和equals\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Java\ntags:\n  - Java\ndate: 2019-08-20 19:22:50\npassword:\nsummary:\n---\n在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](http://cdn.mjava.top/blog/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](http://cdn.mjava.top/blog/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","slug":"java/java-equals","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02n001yw2g5moep733u","content":"<p>在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；</p><h2 id=\"首先看看Java的栈空间和堆空间的地址引用\"><a href=\"#首先看看Java的栈空间和堆空间的地址引用\" class=\"headerlink\" title=\"首先看看Java的栈空间和堆空间的地址引用\"></a>首先看看Java的栈空间和堆空间的地址引用</h2><p><img src=\"http://cdn.mjava.top/blog/javaand1.png\" alt=\"Java栈空间和堆空间\"></p><h2 id=\"的说明\"><a href=\"#的说明\" class=\"headerlink\" title=\"==的说明\"></a>==的说明</h2><p>  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。</p><a id=\"more\"></a>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t1\"</span>);</span><br><span class=\"line\">        String s2=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">        String s3=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t3\"</span>);</span><br><span class=\"line\">        String s5=<span class=\"string\">\"t3\"</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">\"t3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s2==s3:\"</span>+(s2==s3));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s5==s6:\"</span>+(s5==s6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br><img src=\"http://cdn.mjava.top/blog/javaand2.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p>\n</blockquote>\n<h2 id=\"equals的说明\"><a href=\"#equals的说明\" class=\"headerlink\" title=\"equals的说明\"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先它会对比地址，如果地址相等，就直接返回true</li>\n<li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；</p><h2 id=\"首先看看Java的栈空间和堆空间的地址引用\"><a href=\"#首先看看Java的栈空间和堆空间的地址引用\" class=\"headerlink\" title=\"首先看看Java的栈空间和堆空间的地址引用\"></a>首先看看Java的栈空间和堆空间的地址引用</h2><p><img src=\"http://cdn.mjava.top/blog/javaand1.png\" alt=\"Java栈空间和堆空间\"></p><h2 id=\"的说明\"><a href=\"#的说明\" class=\"headerlink\" title=\"==的说明\"></a>==的说明</h2><p>  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。</p>","more":"\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">demo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        String s1=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t1\"</span>);</span><br><span class=\"line\">        String s2=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\">        String s3=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t2\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        String s4=<span class=\"keyword\">new</span> String(<span class=\"string\">\"t3\"</span>);</span><br><span class=\"line\">        String s5=<span class=\"string\">\"t3\"</span>;</span><br><span class=\"line\">        String s6=<span class=\"string\">\"t3\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s2==s3:\"</span>+(s2==s3));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"s5==s6:\"</span>+(s5==s6));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：<br><img src=\"http://cdn.mjava.top/blog/javaand2.png\" alt=\"控制台输出\"></p>\n<blockquote>\n<p>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。</p>\n</blockquote>\n<h2 id=\"equals的说明\"><a href=\"#equals的说明\" class=\"headerlink\" title=\"equals的说明\"></a>equals的说明</h2><p>  每个Object里的equals都不一样，我们看看String里的源码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">equals</span><span class=\"params\">(Object anObject)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span> == anObject) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anObject <span class=\"keyword\">instanceof</span> String) &#123;</span><br><span class=\"line\">        String anotherString = (String)anObject;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = value.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == anotherString.value.length) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v1[] = value;</span><br><span class=\"line\">            <span class=\"keyword\">char</span> v2[] = anotherString.value;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (n-- != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (v1[i] != v2[i])</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                i++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先它会对比地址，如果地址相等，就直接返回true</li>\n<li>如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。</p>\n"},{"title":"JDKproxy和Cglib初探","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:09:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# JDKproxy和Cglib初探\n\n\n\n## 简介\n\n在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。\n\n## JDK原生动态代理(JDKProxy)\n\n`JDKProxy`只能对`实现了接口的类`生成代理，而不能针对`普通类` 。`JDKProxy`原生的`反射API`进行操作，在生成类上比较高效。\n\n### 使用\n\n[](http://cdn.mjava.top/blog/20200729000830.png)\n\n```java\ninterface TestInterface{\n    void test();\n}\nclass TestClass implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"JDK动态代理\");\n    }\n}\n\n//主方法\npublic class JDKProxy {\n    public static void main(String[] args) {\n        TestClass testClass=new TestClass();\n        ProxyHandle proxyHandle=new ProxyHandle(testClass);\n        //使用接口\n        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(\n                testClass.getClass().getClassLoader(),\n                testClass.getClass().getInterfaces(),proxyHandle);\n        testClass1.test();\n        System.out.println(\"代理类名称：\"+testClass1.getClass());\n    }\n}\n\n//代理\nclass ProxyHandle implements InvocationHandler{\n\n    private Object originaObj;\n    public ProxyHandle(Object o){\n        this.originaObj=o;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"前置\");\n        Object object=method.invoke(originaObj,args);\n        System.out.println(\"后置\");\n        return object;\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    JDK动态代理\n    后置\n    代理类名称：class com.example.demo.aop.$Proxy0\n```\n\n\n\n## Cglib\n\n`Cglib`代理是针对`所有类`（包括实现接口的类和普通的类）实现代理，主要是对指定的类**生成一个子类**，覆盖其中的方法(**所以该类或方法不能声明称final的**) 。`Cglib`使用`ASM框架`直接对字节码进行操作，在类的执行过程中比较高效\n\n### 使用\n\n[](http://cdn.mjava.top/blog/20200729001250.png)\n\n```java\ninterface InterTest{\n    void t1();\n}\n\nclass InterClass implements InterTest{\n    @Override\n    public void t1() {\n        System.out.println(\"我是接口测试方法\");\n    }\n}\n\npublic class CglibTest {\n\n    public static void main(String[] args) {\n        /**\n         * 普通类\n         * */\n        Enhancer enhancer=new Enhancer();\n        enhancer.setSuperclass(CG.class);\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"后置\");\n                return object;\n            }\n        });\n        CG cglibTest= (CG) enhancer.create();\n        cglibTest.test();\n        System.out.println(\"代理类名称1：\"+cglibTest.getClass());\n\n        /*\n         * 实现了接口的类\n         * */\n        Enhancer enhancer2=new Enhancer();\n        enhancer2.setSuperclass(InterClass.class);\n        enhancer2.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"接口类前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"接口类后置\");\n                return object;\n            }\n        });\n        InterClass interClass= (InterClass) enhancer2.create();\n        interClass.t1();\n        System.out.println(\"代理类名称2：\"+interClass.getClass());\n    }\n}\n\nclass CG{\n    public void test(){\n        System.out.println(\"代理类测试\");\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    代理类测试\n    后置\n    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31\n    \n    接口类前置\n    我是接口测试方法\n    接口类后置\n    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859\n\n```","source":"_posts/java/jdkproxy-cglib.md","raw":"---\ntitle: JDKproxy和Cglib初探\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:09:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n# JDKproxy和Cglib初探\n\n\n\n## 简介\n\n在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。\n\n## JDK原生动态代理(JDKProxy)\n\n`JDKProxy`只能对`实现了接口的类`生成代理，而不能针对`普通类` 。`JDKProxy`原生的`反射API`进行操作，在生成类上比较高效。\n\n### 使用\n\n[](http://cdn.mjava.top/blog/20200729000830.png)\n\n```java\ninterface TestInterface{\n    void test();\n}\nclass TestClass implements TestInterface{\n    @Override\n    public void test(){\n        System.out.println(\"JDK动态代理\");\n    }\n}\n\n//主方法\npublic class JDKProxy {\n    public static void main(String[] args) {\n        TestClass testClass=new TestClass();\n        ProxyHandle proxyHandle=new ProxyHandle(testClass);\n        //使用接口\n        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(\n                testClass.getClass().getClassLoader(),\n                testClass.getClass().getInterfaces(),proxyHandle);\n        testClass1.test();\n        System.out.println(\"代理类名称：\"+testClass1.getClass());\n    }\n}\n\n//代理\nclass ProxyHandle implements InvocationHandler{\n\n    private Object originaObj;\n    public ProxyHandle(Object o){\n        this.originaObj=o;\n    }\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"前置\");\n        Object object=method.invoke(originaObj,args);\n        System.out.println(\"后置\");\n        return object;\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    JDK动态代理\n    后置\n    代理类名称：class com.example.demo.aop.$Proxy0\n```\n\n\n\n## Cglib\n\n`Cglib`代理是针对`所有类`（包括实现接口的类和普通的类）实现代理，主要是对指定的类**生成一个子类**，覆盖其中的方法(**所以该类或方法不能声明称final的**) 。`Cglib`使用`ASM框架`直接对字节码进行操作，在类的执行过程中比较高效\n\n### 使用\n\n[](http://cdn.mjava.top/blog/20200729001250.png)\n\n```java\ninterface InterTest{\n    void t1();\n}\n\nclass InterClass implements InterTest{\n    @Override\n    public void t1() {\n        System.out.println(\"我是接口测试方法\");\n    }\n}\n\npublic class CglibTest {\n\n    public static void main(String[] args) {\n        /**\n         * 普通类\n         * */\n        Enhancer enhancer=new Enhancer();\n        enhancer.setSuperclass(CG.class);\n        enhancer.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"后置\");\n                return object;\n            }\n        });\n        CG cglibTest= (CG) enhancer.create();\n        cglibTest.test();\n        System.out.println(\"代理类名称1：\"+cglibTest.getClass());\n\n        /*\n         * 实现了接口的类\n         * */\n        Enhancer enhancer2=new Enhancer();\n        enhancer2.setSuperclass(InterClass.class);\n        enhancer2.setCallback(new MethodInterceptor() {\n            @Override\n            public Object intercept(Object o, Method method,\n                                    Object[] objects,\n                                    MethodProxy methodProxy) throws Throwable {\n                System.out.println(\"接口类前置\");\n                Object object=methodProxy.invokeSuper(o,objects);\n                System.out.println(\"接口类后置\");\n                return object;\n            }\n        });\n        InterClass interClass= (InterClass) enhancer2.create();\n        interClass.t1();\n        System.out.println(\"代理类名称2：\"+interClass.getClass());\n    }\n}\n\nclass CG{\n    public void test(){\n        System.out.println(\"代理类测试\");\n    }\n}\n```\n\n```\n输出结果：\n\t前置\n    代理类测试\n    后置\n    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31\n    \n    接口类前置\n    我是接口测试方法\n    接口类后置\n    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859\n\n```","slug":"java/jdkproxy-cglib","published":1,"updated":"2020-09-16T07:10:26.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02o0023w2g533fspzvd","content":"<h1 id=\"JDKproxy和Cglib初探\"><a href=\"#JDKproxy和Cglib初探\" class=\"headerlink\" title=\"JDKproxy和Cglib初探\"></a>JDKproxy和Cglib初探</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。</p><a id=\"more\"></a>\n<h2 id=\"JDK原生动态代理-JDKProxy\"><a href=\"#JDK原生动态代理-JDKProxy\" class=\"headerlink\" title=\"JDK原生动态代理(JDKProxy)\"></a>JDK原生动态代理(JDKProxy)</h2><p><code>JDKProxy</code>只能对<code>实现了接口的类</code>生成代理，而不能针对<code>普通类</code> 。<code>JDKProxy</code>原生的<code>反射API</code>进行操作，在生成类上比较高效。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"http://cdn.mjava.top/blog/20200729000830.png\" rel=\"noopener\" target=\"_blank\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">TestInterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass testClass=<span class=\"keyword\">new</span> TestClass();</span><br><span class=\"line\">        ProxyHandle proxyHandle=<span class=\"keyword\">new</span> ProxyHandle(testClass);</span><br><span class=\"line\">        <span class=\"comment\">//使用接口</span></span><br><span class=\"line\">        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                testClass.getClass().getClassLoader(),</span><br><span class=\"line\">                testClass.getClass().getInterfaces(),proxyHandle);</span><br><span class=\"line\">        testClass1.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称：\"</span>+testClass1.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyHandle</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object originaObj;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyHandle</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.originaObj=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置\"</span>);</span><br><span class=\"line\">        Object object=method.invoke(originaObj,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    JDK动态代理</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称：class com.example.demo.aop.$Proxy0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cglib\"><a href=\"#Cglib\" class=\"headerlink\" title=\"Cglib\"></a>Cglib</h2><p><code>Cglib</code>代理是针对<code>所有类</code>（包括实现接口的类和普通的类）实现代理，主要是对指定的类<strong>生成一个子类</strong>，覆盖其中的方法(<strong>所以该类或方法不能声明称final的</strong>) 。<code>Cglib</code>使用<code>ASM框架</code>直接对字节码进行操作，在类的执行过程中比较高效</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"http://cdn.mjava.top/blog/20200729001250.png\" rel=\"noopener\" target=\"_blank\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">t1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">t1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是接口测试方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 普通类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(CG.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object[] objects,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"前置\"</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"后置\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        CG cglibTest= (CG) enhancer.create();</span><br><span class=\"line\">        cglibTest.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称1：\"</span>+cglibTest.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现了接口的类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer2=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer2.setSuperclass(InterClass.class);</span><br><span class=\"line\">        enhancer2.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object[] objects,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"接口类前置\"</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"接口类后置\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        InterClass interClass= (InterClass) enhancer2.create();</span><br><span class=\"line\">        interClass.t1();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称2：\"</span>+interClass.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CG</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类测试\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    代理类测试</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31</span><br><span class=\"line\">    </span><br><span class=\"line\">    接口类前置</span><br><span class=\"line\">    我是接口测试方法</span><br><span class=\"line\">    接口类后置</span><br><span class=\"line\">    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859</span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h1 id=\"JDKproxy和Cglib初探\"><a href=\"#JDKproxy和Cglib初探\" class=\"headerlink\" title=\"JDKproxy和Cglib初探\"></a>JDKproxy和Cglib初探</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>在Java中，动态代理机制的出现，使得Java开发人员不用手工编写代理类，只要简单地制定一组接口及委托类对象，便能动态地获得代理类。动态代理在Java中有着广泛的应用，比如Spring AOP，Hibernate数据查询、测试框架的后端mock、RPC，Java注解对象获取等。</p>","more":"\n<h2 id=\"JDK原生动态代理-JDKProxy\"><a href=\"#JDK原生动态代理-JDKProxy\" class=\"headerlink\" title=\"JDK原生动态代理(JDKProxy)\"></a>JDK原生动态代理(JDKProxy)</h2><p><code>JDKProxy</code>只能对<code>实现了接口的类</code>生成代理，而不能针对<code>普通类</code> 。<code>JDKProxy</code>原生的<code>反射API</code>进行操作，在生成类上比较高效。</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"http://cdn.mjava.top/blog/20200729000830.png\" rel=\"noopener\" target=\"_blank\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">TestInterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">TestInterface</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"JDK动态代理\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//主方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JDKProxy</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        TestClass testClass=<span class=\"keyword\">new</span> TestClass();</span><br><span class=\"line\">        ProxyHandle proxyHandle=<span class=\"keyword\">new</span> ProxyHandle(testClass);</span><br><span class=\"line\">        <span class=\"comment\">//使用接口</span></span><br><span class=\"line\">        TestInterface testClass1= (TestInterface) Proxy.newProxyInstance(</span><br><span class=\"line\">                testClass.getClass().getClassLoader(),</span><br><span class=\"line\">                testClass.getClass().getInterfaces(),proxyHandle);</span><br><span class=\"line\">        testClass1.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称：\"</span>+testClass1.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//代理</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProxyHandle</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object originaObj;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ProxyHandle</span><span class=\"params\">(Object o)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.originaObj=o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"前置\"</span>);</span><br><span class=\"line\">        Object object=method.invoke(originaObj,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"后置\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    JDK动态代理</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称：class com.example.demo.aop.$Proxy0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Cglib\"><a href=\"#Cglib\" class=\"headerlink\" title=\"Cglib\"></a>Cglib</h2><p><code>Cglib</code>代理是针对<code>所有类</code>（包括实现接口的类和普通的类）实现代理，主要是对指定的类<strong>生成一个子类</strong>，覆盖其中的方法(<strong>所以该类或方法不能声明称final的</strong>) 。<code>Cglib</code>使用<code>ASM框架</code>直接对字节码进行操作，在类的执行过程中比较高效</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p><a href=\"http://cdn.mjava.top/blog/20200729001250.png\" rel=\"noopener\" target=\"_blank\"></a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">InterTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">t1</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InterClass</span> <span class=\"keyword\">implements</span> <span class=\"title\">InterTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">t1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"我是接口测试方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CglibTest</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 普通类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer.setSuperclass(CG.class);</span><br><span class=\"line\">        enhancer.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object[] objects,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"前置\"</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"后置\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        CG cglibTest= (CG) enhancer.create();</span><br><span class=\"line\">        cglibTest.test();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称1：\"</span>+cglibTest.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">         * 实现了接口的类</span></span><br><span class=\"line\"><span class=\"comment\">         * */</span></span><br><span class=\"line\">        Enhancer enhancer2=<span class=\"keyword\">new</span> Enhancer();</span><br><span class=\"line\">        enhancer2.setSuperclass(InterClass.class);</span><br><span class=\"line\">        enhancer2.setCallback(<span class=\"keyword\">new</span> MethodInterceptor() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">intercept</span><span class=\"params\">(Object o, Method method,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    Object[] objects,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                                    MethodProxy methodProxy)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"接口类前置\"</span>);</span><br><span class=\"line\">                Object object=methodProxy.invokeSuper(o,objects);</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"接口类后置\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> object;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        InterClass interClass= (InterClass) enhancer2.create();</span><br><span class=\"line\">        interClass.t1();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类名称2：\"</span>+interClass.getClass());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CG</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"代理类测试\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">输出结果：</span><br><span class=\"line\">\t前置</span><br><span class=\"line\">    代理类测试</span><br><span class=\"line\">    后置</span><br><span class=\"line\">    代理类名称1：class com.example.demo.aop.CG$$EnhancerByCGLIB$$5c6cbf31</span><br><span class=\"line\">    </span><br><span class=\"line\">    接口类前置</span><br><span class=\"line\">    我是接口测试方法</span><br><span class=\"line\">    接口类后置</span><br><span class=\"line\">    代理类名称2：class com.example.demo.aop.InterClass$$EnhancerByCGLIB$$80c75859</span><br></pre></td></tr></table></figure>"},{"title":"Nacos报[NACOS HTTP-POST]","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-14T15:50:58.000Z","password":null,"summary":null,"_content":"\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","source":"_posts/java/nacos-post-error.md","raw":"---\ntitle: Nacos报[NACOS HTTP-POST]\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-14 23:50:58\npassword:\nsummary:\ntags:\n  - Nacos\ncategories:\n  - Java\n---\n\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","slug":"java/nacos-post-error","published":1,"updated":"2019-11-14T15:53:43.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02p0025w2g5dkxsnp84","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。</p><h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；</p><a id=\"more\"></a>\n\n<p>　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。</p>\n<h3 id=\"修正Nacos的地址\"><a href=\"#修正Nacos的地址\" class=\"headerlink\" title=\"修正Nacos的地址\"></a>修正Nacos的地址</h3><p>　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.cloud.nacos.config.server-addr</span>=<span class=\"string\">172.16.X.X     //更改到最新nacos的地址</span></span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。</p><h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><p>　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；</p>","more":"\n\n<p>　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。</p>\n<h3 id=\"修正Nacos的地址\"><a href=\"#修正Nacos的地址\" class=\"headerlink\" title=\"修正Nacos的地址\"></a>修正Nacos的地址</h3><p>　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.cloud.nacos.config.server-addr</span>=<span class=\"string\">172.16.X.X     //更改到最新nacos的地址</span></span><br></pre></td></tr></table></figure>"},{"title":"Base64影响泰文字段取值问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-14T02:39:23.000Z","password":null,"summary":null,"_content":"\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","source":"_posts/java/problem-java-base64.md","raw":"---\ntitle: Base64影响泰文字段取值问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Base64\n  - Pit\ncategories:\n  - Java\ndate: 2019-08-14 10:39:23\npassword:\nsummary:\n---\n\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","slug":"java/problem-java-base64","published":1,"updated":"2019-11-14T07:33:33.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02q002aw2g5r99tu52p","content":"<h2 id=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"><a href=\"#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\" class=\"headerlink\" title=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><blockquote>\n<p>what,日志里面竟然有他们传过来的泰文的值</p>\n</blockquote><h4 id=\"对比ios和android的数据\"><a href=\"#对比ios和android的数据\" class=\"headerlink\" title=\"对比ios和android的数据\"></a>对比ios和android的数据</h4><blockquote>\n<p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p>\n</blockquote><a id=\"more\"></a>\n\n<h4 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h4><blockquote>\n<p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p>\n</blockquote>\n<h4 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h4><blockquote>\n<p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p>\n</blockquote>\n<p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"><a href=\"#今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\" class=\"headerlink\" title=\"今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\"></a>今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作</h2><h4 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h4><blockquote>\n<p>what,日志里面竟然有他们传过来的泰文的值</p>\n</blockquote><h4 id=\"对比ios和android的数据\"><a href=\"#对比ios和android的数据\" class=\"headerlink\" title=\"对比ios和android的数据\"></a>对比ios和android的数据</h4><blockquote>\n<p>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里</p>\n</blockquote>","more":"\n\n<h4 id=\"确定问题\"><a href=\"#确定问题\" class=\"headerlink\" title=\"确定问题\"></a>确定问题</h4><blockquote>\n<p>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处</p>\n</blockquote>\n<h4 id=\"修复bug\"><a href=\"#修复bug\" class=\"headerlink\" title=\"修复bug\"></a>修复bug</h4><blockquote>\n<p>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333</p>\n</blockquote>\n<p>总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。</p>\n"},{"title":"浅谈MDC","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:10:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## MDC是什么？\n\n`MDC` 全拼 `Mapped Diagnostic Contexts`，是`SLF4J`类日志系统中实现分布式多线程日志数据传递的重要工具；可利用`MDC`将一些运行时的上下文数据打印出来。目前只有`log4j`和`logback`提供原生的`MDC`支持；\n\n## 简单使用\n\n`MDC`里面提供的都是静态方法，所以可以直接调用\n\n```java\n// 设置一个key\nMDC.put(\"name\",\"灰色Code\");\n\n// 获取一个key的值\nMDC.get(\"name\");\n    \n// 删除一个key\nMDC.remove(\"name\");\n    \n// 清空MDC里的内容\nMDC.clear();\n\n// 获取上下文中的map\nMap<String,String> map = MDC.getCopyOfContextMap();\n\n// 设置MDC的map\nMDC.setContextMap(map);\n```\n\n\n\n## 源码解析\n\n### MDC\n\n通过阅读`MDC`的源码可以发现，它其实是调用了`MDCAdapter`的接口来实现的\n\n![](http://cdn.mjava.top/blog/20200729200214.png)\n\n\n\n### MDCAdapter\n\n`MDCAdapter`接口有三个实现类，而`MDC`是调用了`LogbackMDCAdapter`里的方法(在MDC里有一个静态代码块，实例化了这个对象)\n\n![](http://cdn.mjava.top/blog/20200729201118.png)\n\n### LogbackMDCAdapter\n\n**而**`LogbackMDCAdapter`主要是用`ThreadLocal`在线程上下文中维护一个`HashMap`来实现的\n\n![](http://cdn.mjava.top/blog/20200729201650.png)\n\n## 总结\n\n怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的`MDC`。\n\n所以简单来说，`MDC`就是利用`ThreadLocal`在线程中维护了一个`HashMap`，利用`HashMap`来存放数据","source":"_posts/java/mdc-test.md","raw":"---\ntitle: 浅谈MDC\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:10:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Logback\n- MDC\ncategories:\n- Java\n---\n\n\n\n## MDC是什么？\n\n`MDC` 全拼 `Mapped Diagnostic Contexts`，是`SLF4J`类日志系统中实现分布式多线程日志数据传递的重要工具；可利用`MDC`将一些运行时的上下文数据打印出来。目前只有`log4j`和`logback`提供原生的`MDC`支持；\n\n## 简单使用\n\n`MDC`里面提供的都是静态方法，所以可以直接调用\n\n```java\n// 设置一个key\nMDC.put(\"name\",\"灰色Code\");\n\n// 获取一个key的值\nMDC.get(\"name\");\n    \n// 删除一个key\nMDC.remove(\"name\");\n    \n// 清空MDC里的内容\nMDC.clear();\n\n// 获取上下文中的map\nMap<String,String> map = MDC.getCopyOfContextMap();\n\n// 设置MDC的map\nMDC.setContextMap(map);\n```\n\n\n\n## 源码解析\n\n### MDC\n\n通过阅读`MDC`的源码可以发现，它其实是调用了`MDCAdapter`的接口来实现的\n\n![](http://cdn.mjava.top/blog/20200729200214.png)\n\n\n\n### MDCAdapter\n\n`MDCAdapter`接口有三个实现类，而`MDC`是调用了`LogbackMDCAdapter`里的方法(在MDC里有一个静态代码块，实例化了这个对象)\n\n![](http://cdn.mjava.top/blog/20200729201118.png)\n\n### LogbackMDCAdapter\n\n**而**`LogbackMDCAdapter`主要是用`ThreadLocal`在线程上下文中维护一个`HashMap`来实现的\n\n![](http://cdn.mjava.top/blog/20200729201650.png)\n\n## 总结\n\n怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的`MDC`。\n\n所以简单来说，`MDC`就是利用`ThreadLocal`在线程中维护了一个`HashMap`，利用`HashMap`来存放数据","slug":"java/mdc-test","published":1,"updated":"2020-09-16T07:11:33.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02r002cw2g5amf7tfru","content":"<h2 id=\"MDC是什么？\"><a href=\"#MDC是什么？\" class=\"headerlink\" title=\"MDC是什么？\"></a>MDC是什么？</h2><p><code>MDC</code> 全拼 <code>Mapped Diagnostic Contexts</code>，是<code>SLF4J</code>类日志系统中实现分布式多线程日志数据传递的重要工具；可利用<code>MDC</code>将一些运行时的上下文数据打印出来。目前只有<code>log4j</code>和<code>logback</code>提供原生的<code>MDC</code>支持；</p><h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><code>MDC</code>里面提供的都是静态方法，所以可以直接调用</p><a id=\"more\"></a>\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个key</span></span><br><span class=\"line\">MDC.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"灰色Code\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个key的值</span></span><br><span class=\"line\">MDC.get(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 删除一个key</span></span><br><span class=\"line\">MDC.remove(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 清空MDC里的内容</span></span><br><span class=\"line\">MDC.clear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文中的map</span></span><br><span class=\"line\">Map&lt;String,String&gt; map = MDC.getCopyOfContextMap();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置MDC的map</span></span><br><span class=\"line\">MDC.setContextMap(map);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"MDC\"><a href=\"#MDC\" class=\"headerlink\" title=\"MDC\"></a>MDC</h3><p>通过阅读<code>MDC</code>的源码可以发现，它其实是调用了<code>MDCAdapter</code>的接口来实现的</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729200214.png\" alt></p>\n<h3 id=\"MDCAdapter\"><a href=\"#MDCAdapter\" class=\"headerlink\" title=\"MDCAdapter\"></a>MDCAdapter</h3><p><code>MDCAdapter</code>接口有三个实现类，而<code>MDC</code>是调用了<code>LogbackMDCAdapter</code>里的方法(在MDC里有一个静态代码块，实例化了这个对象)</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729201118.png\" alt></p>\n<h3 id=\"LogbackMDCAdapter\"><a href=\"#LogbackMDCAdapter\" class=\"headerlink\" title=\"LogbackMDCAdapter\"></a>LogbackMDCAdapter</h3><p><strong>而</strong><code>LogbackMDCAdapter</code>主要是用<code>ThreadLocal</code>在线程上下文中维护一个<code>HashMap</code>来实现的</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729201650.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的<code>MDC</code>。</p>\n<p>所以简单来说，<code>MDC</code>就是利用<code>ThreadLocal</code>在线程中维护了一个<code>HashMap</code>，利用<code>HashMap</code>来存放数据</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"MDC是什么？\"><a href=\"#MDC是什么？\" class=\"headerlink\" title=\"MDC是什么？\"></a>MDC是什么？</h2><p><code>MDC</code> 全拼 <code>Mapped Diagnostic Contexts</code>，是<code>SLF4J</code>类日志系统中实现分布式多线程日志数据传递的重要工具；可利用<code>MDC</code>将一些运行时的上下文数据打印出来。目前只有<code>log4j</code>和<code>logback</code>提供原生的<code>MDC</code>支持；</p><h2 id=\"简单使用\"><a href=\"#简单使用\" class=\"headerlink\" title=\"简单使用\"></a>简单使用</h2><p><code>MDC</code>里面提供的都是静态方法，所以可以直接调用</p>","more":"\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置一个key</span></span><br><span class=\"line\">MDC.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"灰色Code\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取一个key的值</span></span><br><span class=\"line\">MDC.get(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 删除一个key</span></span><br><span class=\"line\">MDC.remove(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">// 清空MDC里的内容</span></span><br><span class=\"line\">MDC.clear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取上下文中的map</span></span><br><span class=\"line\">Map&lt;String,String&gt; map = MDC.getCopyOfContextMap();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置MDC的map</span></span><br><span class=\"line\">MDC.setContextMap(map);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"源码解析\"><a href=\"#源码解析\" class=\"headerlink\" title=\"源码解析\"></a>源码解析</h2><h3 id=\"MDC\"><a href=\"#MDC\" class=\"headerlink\" title=\"MDC\"></a>MDC</h3><p>通过阅读<code>MDC</code>的源码可以发现，它其实是调用了<code>MDCAdapter</code>的接口来实现的</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729200214.png\" alt></p>\n<h3 id=\"MDCAdapter\"><a href=\"#MDCAdapter\" class=\"headerlink\" title=\"MDCAdapter\"></a>MDCAdapter</h3><p><code>MDCAdapter</code>接口有三个实现类，而<code>MDC</code>是调用了<code>LogbackMDCAdapter</code>里的方法(在MDC里有一个静态代码块，实例化了这个对象)</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729201118.png\" alt></p>\n<h3 id=\"LogbackMDCAdapter\"><a href=\"#LogbackMDCAdapter\" class=\"headerlink\" title=\"LogbackMDCAdapter\"></a>LogbackMDCAdapter</h3><p><strong>而</strong><code>LogbackMDCAdapter</code>主要是用<code>ThreadLocal</code>在线程上下文中维护一个<code>HashMap</code>来实现的</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200729201650.png\" alt></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>怎么样,实现原理是不是很简单，就这么短短几行代码，就实现了听起来很高大上的<code>MDC</code>。</p>\n<p>所以简单来说，<code>MDC</code>就是利用<code>ThreadLocal</code>在线程中维护了一个<code>HashMap</code>，利用<code>HashMap</code>来存放数据</p>\n"},{"title":"树莓派安装docker","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-30T10:33:03.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","source":"_posts/linux/build-docker-pi.md","raw":"---\ntitle: 树莓派安装docker\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Linux\n  - Docker\n  - RaspberryPi\ncategories:\n  - Linux\ndate: 2019-08-30 18:33:03\npassword:\nsummary:\n---\n\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","slug":"linux/build-docker-pi","published":1,"updated":"2019-11-14T07:34:38.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02s002hw2g56dd3hysy","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p><h2 id=\"使用APT源安装docker\"><a href=\"#使用APT源安装docker\" class=\"headerlink\" title=\"使用APT源安装docker\"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install \\</span></span><br><span class=\"line\">\t apt-transport-https \\</span><br><span class=\"line\">     ca-certificates \\</span><br><span class=\"line\">     curl \\</span><br><span class=\"line\">     gnupg2 \\</span><br><span class=\"line\">     lsb-release \\</span><br><span class=\"line\">     software-properties-common</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<h2 id=\"添加docker-ce-软件源\"><a href=\"#添加docker-ce-软件源\" class=\"headerlink\" title=\"添加docker ce 软件源\"></a>添加docker ce 软件源</h2><ul>\n<li><p>首先执行以下一行命令，然后记一下输出的结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $(lsb_release -cs)</span></span><br><span class=\"line\">stretch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在/etc/apt/sources.list.d目录下新建文件docker.list</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vi /etc/apt/sources.list.d/docker.list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件里添加下面这行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存，退出</p>\n</li>\n</ul>\n<h2 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker ce\"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker start           启动</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker stop            停止</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker status          状态</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker restart         重启</span></span><br></pre></td></tr></table></figure>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。</p><h2 id=\"使用APT源安装docker\"><a href=\"#使用APT源安装docker\" class=\"headerlink\" title=\"使用APT源安装docker\"></a>使用APT源安装docker</h2><p>  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">sudo apt-get install \\</span></span><br><span class=\"line\">\t apt-transport-https \\</span><br><span class=\"line\">     ca-certificates \\</span><br><span class=\"line\">     curl \\</span><br><span class=\"line\">     gnupg2 \\</span><br><span class=\"line\">     lsb-release \\</span><br><span class=\"line\">     software-properties-common</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -</span></span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<h2 id=\"添加docker-ce-软件源\"><a href=\"#添加docker-ce-软件源\" class=\"headerlink\" title=\"添加docker ce 软件源\"></a>添加docker ce 软件源</h2><ul>\n<li><p>首先执行以下一行命令，然后记一下输出的结果</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> $(lsb_release -cs)</span></span><br><span class=\"line\">stretch</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在/etc/apt/sources.list.d目录下新建文件docker.list</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vi /etc/apt/sources.list.d/docker.list</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在文件里添加下面这行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>保存，退出</p>\n</li>\n</ul>\n<h2 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker ce\"></a>安装docker ce</h2><p>  依次执行以下两行命令，即可完成安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get update</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo apt-get install docker-ce</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker start           启动</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker stop            停止</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker status          状态</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> service docker restart         重启</span></span><br></pre></td></tr></table></figure>"},{"title":"fastDFS安装使用教程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-07T05:34:10.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## FastDFS简介\n\nFastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB < file_size <500MB）为载体的在线服务。\n\nFastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。\n\n- **Tracker Server**：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。\n\n- **Storage Server**：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。\n\n- **Client**：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。\n\n- 结构图![](http://cdn.mjava.top/blog/20200507152801.webp)\n\n\n\n- 上传文件流程![](http://cdn.mjava.top/blog/20200507152857.webp)\n\n## 安装环境\n\n| 系统及软件版本        | Git开源地址                                   |\n| --------------------- | --------------------------------------------- |\n| Centos 7              | #                                             |\n| libfastcommon V1.0.43 | https://github.com/happyfish100/fastdfs       |\n| fastdfs V6.06         | https://github.com/happyfish100/libfastcommon |\n\n> 我虚拟机装的Centos7的ip地址是172.16.54.137\n\n## 安装前工作\n\n### 关闭防火墙\n> 为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。\n\n```shell\nservice firewalld stop\n```\n\n\n\n### 下载所需安装包\n\n- libfastcommon\n\n```shell\nwget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz\n```\n\n- fastDFS\n\n```shell\nwget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz\n```\n\n\n\n### 安装fastDFS环境\n\n- 解压安装`libfastcommon`\n\n```shell\ntar -zxvf libfastcommon.tar.gz && cd libfastcommon-1.0.43/ && ./make.sh && ./make.sh install\n```\n\n\n\n## 安装fastDFS\n\n### 解压安装\n\n```shell\ntar -zxvf fastdfs.tar.gz && cd fastdfs-6.06/ && ./make.sh && ./make.sh install\n```\n> 安装好fastDFS后，在`/etc/fdfs/`目录下会生成4个示例的配置文件\n>\n> - client.conf.sample\tfastDFS客户端配置文件\n> - storage.conf.sample\n> - storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理\n> - tracker.conf.sample\n\n\n### 配置并启动Tracker\n\n进入`/etc/fdfs/`复制一份`Tracker`配置文件，\n\n```shell\ncd /etc/fdfs/ && cp tracker.conf.sample tracker.conf\n```\n\n\n\n修改`tracker.conf`配置文件里的`base_path`目录\n\n```shell\nbase_path=/data/fastdfs/tracker\n```\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/tracker\n```\n\n\n\n服务命令\n\n```shell\n#启动Tracker\nservice fdfs_trackerd start\n\n#关闭Tracker\nservice fdfs_trackerd stop\n\n#开机自启\nsystemctl enable fdfs_trackerd\n```\n\n\n\n### 配置并启动Storage\n\n进入`/etc/fdfs/`复制一份`Storage`配置文件，\n\n```shell\ncd /etc/fdfs && cp storage.conf.sample storage.conf\n```\n\n\n\n修改`storage.conf`配置文件\n\n```shell\nbase_path=/data/fastdfs/storage\n\n#存放文件地址\nstore_path0=/data/fastdfs/file\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/storage && mkdir -p /data/fastdfs/file\n```\n\n\n\n服务命令\n\n```shell\n#启动Storage\nservice fdfs_storaged start\n\n#关闭Storage\nservice fdfs_storaged stop\n\n#开机自启\nsystemctl enable fdfs_storaged\n```\n\n\n\n### 上传文件测试\n\n> 上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份`client.conf`并修改一下里面的内容\n\n```shell\n#复制一份客户端配置文件\ncd /etc/fdfs && cp client.conf.sample client.conf\n```\n\n\n\n修改`client.config`配置文件\n\n```shell\nbase_path=/data/fastdfs/client\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应文件夹\n\n```shell\nmkdir -p /data/fastdfs/client\n```\n\n\n\n使用方法\n\n```shell\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]\n\n#上传成功后返回\ngroup1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n![](http://cdn.mjava.top/blog/20200506215501.png)\n\n## 安装Nginx\n\n> 为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料\n\n首先创建一个文件夹，存放nginx的配置文件\n\n```shell\n#创建文件夹\nmkdir -p /data/nginx\n#进入文件夹并下载nginx配置文件\ncd /data/nginx && wget http://cdn.mjava.top/file/nginx.conf\n```\n\n> 配置文件已经修改过了，直接下载即可使用\n\n\n\n然后运行docker命令（第一次运行会自动下载nginx镜像）\n\n```shell\ndocker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx\n```\n\n\n\n然后就可以通过`http://ip:port/[filePth]`访问上传到fastDFS的文件了\n\n```shell\n#例如刚才上传的文件 可以通过如下地址访问\nhttp://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n\n\n## 拓展\n\n这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装`fastdfs-nginx-module`这个nginx的模块。\n\n![](http://cdn.mjava.top/blog/20200507132841.png)","source":"_posts/linux/linux-fastdfs-install.md","raw":"---\ntitle: fastDFS安装使用教程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-07 13:34:10\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Linux\n- fastDFS\ncategories:\n- Linux\n---\n\n## FastDFS简介\n\nFastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB < file_size <500MB）为载体的在线服务。\n\nFastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。\n\n- **Tracker Server**：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。\n\n- **Storage Server**：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。\n\n- **Client**：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。\n\n- 结构图![](http://cdn.mjava.top/blog/20200507152801.webp)\n\n\n\n- 上传文件流程![](http://cdn.mjava.top/blog/20200507152857.webp)\n\n## 安装环境\n\n| 系统及软件版本        | Git开源地址                                   |\n| --------------------- | --------------------------------------------- |\n| Centos 7              | #                                             |\n| libfastcommon V1.0.43 | https://github.com/happyfish100/fastdfs       |\n| fastdfs V6.06         | https://github.com/happyfish100/libfastcommon |\n\n> 我虚拟机装的Centos7的ip地址是172.16.54.137\n\n## 安装前工作\n\n### 关闭防火墙\n> 为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。\n\n```shell\nservice firewalld stop\n```\n\n\n\n### 下载所需安装包\n\n- libfastcommon\n\n```shell\nwget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz\n```\n\n- fastDFS\n\n```shell\nwget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz\n```\n\n\n\n### 安装fastDFS环境\n\n- 解压安装`libfastcommon`\n\n```shell\ntar -zxvf libfastcommon.tar.gz && cd libfastcommon-1.0.43/ && ./make.sh && ./make.sh install\n```\n\n\n\n## 安装fastDFS\n\n### 解压安装\n\n```shell\ntar -zxvf fastdfs.tar.gz && cd fastdfs-6.06/ && ./make.sh && ./make.sh install\n```\n> 安装好fastDFS后，在`/etc/fdfs/`目录下会生成4个示例的配置文件\n>\n> - client.conf.sample\tfastDFS客户端配置文件\n> - storage.conf.sample\n> - storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理\n> - tracker.conf.sample\n\n\n### 配置并启动Tracker\n\n进入`/etc/fdfs/`复制一份`Tracker`配置文件，\n\n```shell\ncd /etc/fdfs/ && cp tracker.conf.sample tracker.conf\n```\n\n\n\n修改`tracker.conf`配置文件里的`base_path`目录\n\n```shell\nbase_path=/data/fastdfs/tracker\n```\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/tracker\n```\n\n\n\n服务命令\n\n```shell\n#启动Tracker\nservice fdfs_trackerd start\n\n#关闭Tracker\nservice fdfs_trackerd stop\n\n#开机自启\nsystemctl enable fdfs_trackerd\n```\n\n\n\n### 配置并启动Storage\n\n进入`/etc/fdfs/`复制一份`Storage`配置文件，\n\n```shell\ncd /etc/fdfs && cp storage.conf.sample storage.conf\n```\n\n\n\n修改`storage.conf`配置文件\n\n```shell\nbase_path=/data/fastdfs/storage\n\n#存放文件地址\nstore_path0=/data/fastdfs/file\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应的文件夹\n\n```shell\nmkdir -p /data/fastdfs/storage && mkdir -p /data/fastdfs/file\n```\n\n\n\n服务命令\n\n```shell\n#启动Storage\nservice fdfs_storaged start\n\n#关闭Storage\nservice fdfs_storaged stop\n\n#开机自启\nsystemctl enable fdfs_storaged\n```\n\n\n\n### 上传文件测试\n\n> 上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份`client.conf`并修改一下里面的内容\n\n```shell\n#复制一份客户端配置文件\ncd /etc/fdfs && cp client.conf.sample client.conf\n```\n\n\n\n修改`client.config`配置文件\n\n```shell\nbase_path=/data/fastdfs/client\n\n#更改为你的tracker地址\ntracker_server=172.16.54.137:22122\n```\n\n\n\n创建对应文件夹\n\n```shell\nmkdir -p /data/fastdfs/client\n```\n\n\n\n使用方法\n\n```shell\n/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]\n\n#上传成功后返回\ngroup1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n![](http://cdn.mjava.top/blog/20200506215501.png)\n\n## 安装Nginx\n\n> 为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料\n\n首先创建一个文件夹，存放nginx的配置文件\n\n```shell\n#创建文件夹\nmkdir -p /data/nginx\n#进入文件夹并下载nginx配置文件\ncd /data/nginx && wget http://cdn.mjava.top/file/nginx.conf\n```\n\n> 配置文件已经修改过了，直接下载即可使用\n\n\n\n然后运行docker命令（第一次运行会自动下载nginx镜像）\n\n```shell\ndocker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx\n```\n\n\n\n然后就可以通过`http://ip:port/[filePth]`访问上传到fastDFS的文件了\n\n```shell\n#例如刚才上传的文件 可以通过如下地址访问\nhttp://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml\n```\n\n\n\n## 拓展\n\n这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装`fastdfs-nginx-module`这个nginx的模块。\n\n![](http://cdn.mjava.top/blog/20200507132841.png)","slug":"linux/linux-fastdfs-install","published":1,"updated":"2020-05-07T07:29:32.971Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02t002jw2g5c09k7fre","content":"<h2 id=\"FastDFS简介\"><a href=\"#FastDFS简介\" class=\"headerlink\" title=\"FastDFS简介\"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p><a id=\"more\"></a>\n\n<ul>\n<li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p>\n</li>\n<li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p>\n</li>\n<li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>\n</li>\n<li><p>结构图<img src=\"http://cdn.mjava.top/blog/20200507152801.webp\" alt></p>\n</li>\n</ul>\n<ul>\n<li>上传文件流程<img src=\"http://cdn.mjava.top/blog/20200507152857.webp\" alt></li>\n</ul>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><table>\n<thead>\n<tr>\n<th>系统及软件版本</th>\n<th>Git开源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Centos 7</td>\n<td>#</td>\n</tr>\n<tr>\n<td>libfastcommon V1.0.43</td>\n<td><a href=\"https://github.com/happyfish100/fastdfs\" rel=\"noopener\" target=\"_blank\">https://github.com/happyfish100/fastdfs</a></td>\n</tr>\n<tr>\n<td>fastdfs V6.06</td>\n<td><a href=\"https://github.com/happyfish100/libfastcommon\" rel=\"noopener\" target=\"_blank\">https://github.com/happyfish100/libfastcommon</a></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>我虚拟机装的Centos7的ip地址是172.16.54.137</p>\n</blockquote>\n<h2 id=\"安装前工作\"><a href=\"#安装前工作\" class=\"headerlink\" title=\"安装前工作\"></a>安装前工作</h2><h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><blockquote>\n<p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载所需安装包\"><a href=\"#下载所需安装包\" class=\"headerlink\" title=\"下载所需安装包\"></a>下载所需安装包</h3><ul>\n<li>libfastcommon</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastDFS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装fastDFS环境\"><a href=\"#安装fastDFS环境\" class=\"headerlink\" title=\"安装fastDFS环境\"></a>安装fastDFS环境</h3><ul>\n<li>解压安装<code>libfastcommon</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装fastDFS\"><a href=\"#安装fastDFS\" class=\"headerlink\" title=\"安装fastDFS\"></a>安装fastDFS</h2><h3 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p>\n<ul>\n<li>client.conf.sample    fastDFS客户端配置文件</li>\n<li>storage.conf.sample</li>\n<li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li>\n<li>tracker.conf.sample</li>\n</ul>\n</blockquote>\n<h3 id=\"配置并启动Tracker\"><a href=\"#配置并启动Tracker\" class=\"headerlink\" title=\"配置并启动Tracker\"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动Tracker</span></span><br><span class=\"line\">service fdfs_trackerd start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭Tracker</span></span><br><span class=\"line\">service fdfs_trackerd stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置并启动Storage\"><a href=\"#配置并启动Storage\" class=\"headerlink\" title=\"配置并启动Storage\"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>storage.conf</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/storage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">存放文件地址</span></span><br><span class=\"line\">store_path0=/data/fastdfs/file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure>\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动Storage</span></span><br><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭Storage</span></span><br><span class=\"line\">service fdfs_storaged stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><blockquote>\n<p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">复制一份客户端配置文件</span></span><br><span class=\"line\">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>client.config</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n<p>创建对应文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传成功后返回</span></span><br><span class=\"line\">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20200506215501.png\" alt></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p>\n</blockquote>\n<p>首先创建一个文件夹，存放nginx的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">创建文件夹</span></span><br><span class=\"line\">mkdir -p /data/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入文件夹并下载nginx配置文件</span></span><br><span class=\"line\">cd /data/nginx &amp;&amp; wget http://cdn.mjava.top/file/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置文件已经修改过了，直接下载即可使用</p>\n</blockquote>\n<p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class=\"line\">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200507132841.png\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"FastDFS简介\"><a href=\"#FastDFS简介\" class=\"headerlink\" title=\"FastDFS简介\"></a>FastDFS简介</h2><p>FastDFS 是一个开源的高性能分布式文件系统（DFS）。 它的主要功能包括：文件存储，文件同步和文件访问，以及高容量和负载平衡。主要解决了海量数据存储问题，特别适合以中小文件（建议范围：4KB &lt; file_size &lt;500MB）为载体的在线服务。</p><p>FastDFS 系统有三个角色：跟踪服务器(Tracker Server)、存储服务器(Storage Server)和客户端(Client)。</p>","more":"\n\n<ul>\n<li><p><strong>Tracker Server</strong>：跟踪服务器，主要做调度工作，起到均衡的作用；负责管理所有的 storage server和 group，每个 storage 在启动后会连接 Tracker，告知自己所属 group 等信息，并保持周期性心跳。</p>\n</li>\n<li><p><strong>Storage Server</strong>：存储服务器，主要提供容量和备份服务；以 group 为单位，每个 group 内可以有多台 storage server，数据互为备份。</p>\n</li>\n<li><p><strong>Client</strong>：客户端，上传下载数据的服务器，也就是我们自己的项目所部署在的服务器。</p>\n</li>\n<li><p>结构图<img src=\"http://cdn.mjava.top/blog/20200507152801.webp\" alt></p>\n</li>\n</ul>\n<ul>\n<li>上传文件流程<img src=\"http://cdn.mjava.top/blog/20200507152857.webp\" alt></li>\n</ul>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><table>\n<thead>\n<tr>\n<th>系统及软件版本</th>\n<th>Git开源地址</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Centos 7</td>\n<td>#</td>\n</tr>\n<tr>\n<td>libfastcommon V1.0.43</td>\n<td><a href=\"https://github.com/happyfish100/fastdfs\" rel=\"noopener\" target=\"_blank\">https://github.com/happyfish100/fastdfs</a></td>\n</tr>\n<tr>\n<td>fastdfs V6.06</td>\n<td><a href=\"https://github.com/happyfish100/libfastcommon\" rel=\"noopener\" target=\"_blank\">https://github.com/happyfish100/libfastcommon</a></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>我虚拟机装的Centos7的ip地址是172.16.54.137</p>\n</blockquote>\n<h2 id=\"安装前工作\"><a href=\"#安装前工作\" class=\"headerlink\" title=\"安装前工作\"></a>安装前工作</h2><h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><blockquote>\n<p>为了方便，先关闭防火墙。线上环境安装可安装后开放对应端口。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">service firewalld stop</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载所需安装包\"><a href=\"#下载所需安装包\" class=\"headerlink\" title=\"下载所需安装包\"></a>下载所需安装包</h3><ul>\n<li>libfastcommon</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz -O libfastcommon.tar.gz</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>fastDFS</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz -O fastdfs.tar.gz</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装fastDFS环境\"><a href=\"#安装fastDFS环境\" class=\"headerlink\" title=\"安装fastDFS环境\"></a>安装fastDFS环境</h3><ul>\n<li>解压安装<code>libfastcommon</code></li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf libfastcommon.tar.gz &amp;&amp; cd libfastcommon-1.0.43/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装fastDFS\"><a href=\"#安装fastDFS\" class=\"headerlink\" title=\"安装fastDFS\"></a>安装fastDFS</h2><h3 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">tar -zxvf fastdfs.tar.gz &amp;&amp; cd fastdfs-6.06/ &amp;&amp; ./make.sh &amp;&amp; ./make.sh install</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>安装好fastDFS后，在<code>/etc/fdfs/</code>目录下会生成4个示例的配置文件</p>\n<ul>\n<li>client.conf.sample    fastDFS客户端配置文件</li>\n<li>storage.conf.sample</li>\n<li>storage_ids.conf.sample    当storage超过1个时，可以用这个配置文件来配置管理</li>\n<li>tracker.conf.sample</li>\n</ul>\n</blockquote>\n<h3 id=\"配置并启动Tracker\"><a href=\"#配置并启动Tracker\" class=\"headerlink\" title=\"配置并启动Tracker\"></a>配置并启动Tracker</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Tracker</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs/ &amp;&amp; cp tracker.conf.sample tracker.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>tracker.conf</code>配置文件里的<code>base_path</code>目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/tracker</span><br></pre></td></tr></table></figure>\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动Tracker</span></span><br><span class=\"line\">service fdfs_trackerd start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭Tracker</span></span><br><span class=\"line\">service fdfs_trackerd stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_trackerd</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置并启动Storage\"><a href=\"#配置并启动Storage\" class=\"headerlink\" title=\"配置并启动Storage\"></a>配置并启动Storage</h3><p>进入<code>/etc/fdfs/</code>复制一份<code>Storage</code>配置文件，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd /etc/fdfs &amp;&amp; cp storage.conf.sample storage.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>storage.conf</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/storage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">存放文件地址</span></span><br><span class=\"line\">store_path0=/data/fastdfs/file</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n<p>创建对应的文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/storage &amp;&amp; mkdir -p /data/fastdfs/file</span><br></pre></td></tr></table></figure>\n\n<p>服务命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">启动Storage</span></span><br><span class=\"line\">service fdfs_storaged start</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">关闭Storage</span></span><br><span class=\"line\">service fdfs_storaged stop</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">开机自启</span></span><br><span class=\"line\">systemctl enable fdfs_storaged</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上传文件测试\"><a href=\"#上传文件测试\" class=\"headerlink\" title=\"上传文件测试\"></a>上传文件测试</h3><blockquote>\n<p>上传文件可以用他自带的客户端进行测试，使用客户端前，要复制一份<code>client.conf</code>并修改一下里面的内容</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">复制一份客户端配置文件</span></span><br><span class=\"line\">cd /etc/fdfs &amp;&amp; cp client.conf.sample client.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改<code>client.config</code>配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">base_path=/data/fastdfs/client</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">更改为你的tracker地址</span></span><br><span class=\"line\">tracker_server=172.16.54.137:22122</span><br></pre></td></tr></table></figure>\n\n<p>创建对应文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p /data/fastdfs/client</span><br></pre></td></tr></table></figure>\n\n<p>使用方法</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">/usr/bin/fdfs_upload_file /etc/fdfs/client.conf [filename]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">上传成功后返回</span></span><br><span class=\"line\">group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20200506215501.png\" alt></p>\n<h2 id=\"安装Nginx\"><a href=\"#安装Nginx\" class=\"headerlink\" title=\"安装Nginx\"></a>安装Nginx</h2><blockquote>\n<p>为了方便，这里直接使用nginx的docker镜像来进行安装。docker安装请自行查找资料</p>\n</blockquote>\n<p>首先创建一个文件夹，存放nginx的配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">创建文件夹</span></span><br><span class=\"line\">mkdir -p /data/nginx</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">进入文件夹并下载nginx配置文件</span></span><br><span class=\"line\">cd /data/nginx &amp;&amp; wget http://cdn.mjava.top/file/nginx.conf</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>配置文件已经修改过了，直接下载即可使用</p>\n</blockquote>\n<p>然后运行docker命令（第一次运行会自动下载nginx镜像）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">docker run -d -p 81:80 -v /data/nginx/nginx.conf:/etc/nginx/nginx.conf -v /data/:/data/ --name fastDFS-nginx nginx</span><br></pre></td></tr></table></figure>\n\n<p>然后就可以通过<code>http://ip:port/[filePth]</code>访问上传到fastDFS的文件了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">例如刚才上传的文件 可以通过如下地址访问</span></span><br><span class=\"line\">http://172.16.54.137:81/group1/M00/00/00/rBA2iV6yvU2AEXUfAAACGTXt3Kw94.yaml</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h2><p>这里只是示例了单机的fastDFS安装，一般fastDFS都是分布式安装的。具体可以通过下载这个结构图去进行安装。此时如果配置了多个group，则需要安装<code>fastdfs-nginx-module</code>这个nginx的模块。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200507132841.png\" alt></p>\n"},{"title":"JDK时区问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-27T07:26:30.000Z","password":null,"summary":null,"_content":"\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","source":"_posts/linux/problem-jdk-timezone.md","raw":"---\ntitle: JDK时区问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Linux\ncategories:\n  - Linux\ndate: 2019-08-27 15:26:30\npassword:\nsummary:\n---\n\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","slug":"linux/problem-jdk-timezone","published":1,"updated":"2019-11-14T07:14:56.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02u002ow2g5fmz28edc","content":"<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p><p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p><hr><ul>\n<li>于是改之,三台容器都输入一下代码</li>\n</ul><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n\n\n<p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p>\n<hr>\n<ul>\n<li>于是又查资料，换另外一种设置时区的方法；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>\n\n<p>在里面输入如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZONE=\"Asia/Shanghai\"</span><br><span class=\"line\">UTC=false</span><br><span class=\"line\">ARC=false</span><br></pre></td></tr></table></figure>\n\n<p>保存，重启，测试。。。。。发现还是一样,快疯了</p>\n<hr>\n<ul>\n<li>第三种方法，设置TZ环境变量</li>\n</ul>\n<blockquote>\n<p>设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ='CST-8'</span><br></pre></td></tr></table></figure>\n\n<p>保存：然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>使设置立即生效。</p>\n<p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>今天碰到一个大坑，弄了快一个小时才解决掉；</p><p>一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；</p><hr><ul>\n<li>于是改之,三台容器都输入一下代码</li>\n</ul><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n\n\n<p>测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。</p>\n<hr>\n<ul>\n<li>于是又查资料，换另外一种设置时区的方法；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vi /etc/sysconfig/clock</span><br></pre></td></tr></table></figure>\n\n<p>在里面输入如下内容</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">ZONE=\"Asia/Shanghai\"</span><br><span class=\"line\">UTC=false</span><br><span class=\"line\">ARC=false</span><br></pre></td></tr></table></figure>\n\n<p>保存，重启，测试。。。。。发现还是一样,快疯了</p>\n<hr>\n<ul>\n<li>第三种方法，设置TZ环境变量</li>\n</ul>\n<blockquote>\n<p>设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">export TZ='CST-8'</span><br></pre></td></tr></table></figure>\n\n<p>保存：然后执行</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source .bashrc</span><br></pre></td></tr></table></figure>\n\n<p>使设置立即生效。</p>\n<p>重启容器，测试，发现时间正常了。。。。哈哈哈哈</p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；</p>\n"},{"title":"更新驱动到mysql-connector-java-8遇到的一些问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-25T09:07:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# 更新驱动到mysql-connector-java-8遇到的一些问题\n\n\n\n## 问题\n\n### POM\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.16</version>\n</dependency>\n```\n\n## application.properties\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n\n项目是`SpringBoot`构建的,数据库版本是:`MySQL5.7`,用了`mysql-connector-java-8`来链接数据库,`application.properties`也配置成`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`,中间遇到了几个问题;\n\n### 问题一\n\n#### 描述\n\n如上配置后,控制台报了一下错误:\n\n```shell\nLoading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n```\n\n翻译过来后就是:\n\n加载类` com.mysql.jdbc.Driver`。 不推荐使用。 新的驱动程序类为` com.mysql.cj.jdbc.Driver`。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。\n\n#### 解决\n\n根据提示,解决方法有<font color=orange>两种</font>:\n\n- 更改`application.properties`文件\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n//改成下面这样\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n\n- 去掉`application.properties`文件中的`spring.datasource.driver-class-name`,因为它说会通过SPI自动注册的;\n\n### 问题二\n\n#### 描述\n\n数据库的数据时间总是和实际时间差8个小时\n\n#### 解决\n\n在数据库url添加`serverTimezone=GMT%2B8`\n\n```properties\nspring.datasource.url=jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&autoReconnect=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8\n```\n\n## 总结\n\n`mysql-connector-java`5.X的版本驱动名是:`com.mysql.jdbc.Driver`; 6.X及以上版本的驱动名是:`com.mysql.cj.jdbc.Driver`","source":"_posts/mysql/mysql-update-driver-connector-8.md","raw":"---\ntitle: 更新驱动到mysql-connector-java-8遇到的一些问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-25 17:07:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Pit\n- MySQL\ncategories:\n- MySQL\n---\n\n# 更新驱动到mysql-connector-java-8遇到的一些问题\n\n\n\n## 问题\n\n### POM\n\n```java\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.16</version>\n</dependency>\n```\n\n## application.properties\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n```\n\n\n\n项目是`SpringBoot`构建的,数据库版本是:`MySQL5.7`,用了`mysql-connector-java-8`来链接数据库,`application.properties`也配置成`spring.datasource.driver-class-name=com.mysql.jdbc.Driver`,中间遇到了几个问题;\n\n### 问题一\n\n#### 描述\n\n如上配置后,控制台报了一下错误:\n\n```shell\nLoading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.\n```\n\n翻译过来后就是:\n\n加载类` com.mysql.jdbc.Driver`。 不推荐使用。 新的驱动程序类为` com.mysql.cj.jdbc.Driver`。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。\n\n#### 解决\n\n根据提示,解决方法有<font color=orange>两种</font>:\n\n- 更改`application.properties`文件\n\n```properties\nspring.datasource.driver-class-name=com.mysql.jdbc.Driver\n//改成下面这样\nspring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\n```\n\n- 去掉`application.properties`文件中的`spring.datasource.driver-class-name`,因为它说会通过SPI自动注册的;\n\n### 问题二\n\n#### 描述\n\n数据库的数据时间总是和实际时间差8个小时\n\n#### 解决\n\n在数据库url添加`serverTimezone=GMT%2B8`\n\n```properties\nspring.datasource.url=jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&autoReconnect=true&characterEncoding=UTF-8&serverTimezone=GMT%2B8\n```\n\n## 总结\n\n`mysql-connector-java`5.X的版本驱动名是:`com.mysql.jdbc.Driver`; 6.X及以上版本的驱动名是:`com.mysql.cj.jdbc.Driver`","slug":"mysql/mysql-update-driver-connector-8","published":1,"updated":"2019-12-25T09:08:44.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02v002qw2g5r3xfwcgc","content":"<h1 id=\"更新驱动到mysql-connector-java-8遇到的一些问题\"><a href=\"#更新驱动到mysql-connector-java-8遇到的一些问题\" class=\"headerlink\" title=\"更新驱动到mysql-connector-java-8遇到的一些问题\"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n<h2 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure>\n\n<p>翻译过来后就是:</p>\n<p>加载类<code>com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code>com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>根据提示,解决方法有<font color=\"orange\">两种</font>:</p>\n<ul>\n<li>更改<code>application.properties</code>文件</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">//改成下面这样</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li>\n</ul>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h1 id=\"更新驱动到mysql-connector-java-8遇到的一些问题\"><a href=\"#更新驱动到mysql-connector-java-8遇到的一些问题\" class=\"headerlink\" title=\"更新驱动到mysql-connector-java-8遇到的一些问题\"></a>更新驱动到mysql-connector-java-8遇到的一些问题</h1><h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><h3 id=\"POM\"><a href=\"#POM\" class=\"headerlink\" title=\"POM\"></a>POM</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.0.16&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>","more":"\n\n<h2 id=\"application-properties\"><a href=\"#application-properties\" class=\"headerlink\" title=\"application.properties\"></a>application.properties</h2><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<p>项目是<code>SpringBoot</code>构建的,数据库版本是:<code>MySQL5.7</code>,用了<code>mysql-connector-java-8</code>来链接数据库,<code>application.properties</code>也配置成<code>spring.datasource.driver-class-name=com.mysql.jdbc.Driver</code>,中间遇到了几个问题;</p>\n<h3 id=\"问题一\"><a href=\"#问题一\" class=\"headerlink\" title=\"问题一\"></a>问题一</h3><h4 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>如上配置后,控制台报了一下错误:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Loading class `com.mysql.jdbc.Driver'. This is deprecated. The new driver class is `com.mysql.cj.jdbc.Driver'. The driver is automatically registered via the SPI and manual loading of the driver class is generally unnecessary.</span><br></pre></td></tr></table></figure>\n\n<p>翻译过来后就是:</p>\n<p>加载类<code>com.mysql.jdbc.Driver</code>。 不推荐使用。 新的驱动程序类为<code>com.mysql.cj.jdbc.Driver</code>。 通过SPI自动注册驱动程序，通常不需要手动加载驱动程序类。</p>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>根据提示,解决方法有<font color=\"orange\">两种</font>:</p>\n<ul>\n<li>更改<code>application.properties</code>文件</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.jdbc.Driver</span></span><br><span class=\"line\"><span class=\"attr\">//改成下面这样</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.driver-class-name</span>=<span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>去掉<code>application.properties</code>文件中的<code>spring.datasource.driver-class-name</code>,因为它说会通过SPI自动注册的;</li>\n</ul>\n<h3 id=\"问题二\"><a href=\"#问题二\" class=\"headerlink\" title=\"问题二\"></a>问题二</h3><h4 id=\"描述-1\"><a href=\"#描述-1\" class=\"headerlink\" title=\"描述\"></a>描述</h4><p>数据库的数据时间总是和实际时间差8个小时</p>\n<h4 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>在数据库url添加<code>serverTimezone=GMT%2B8</code></p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://10.25.0.01:3307/db?useUnicode=true&amp;autoReconnect=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><code>mysql-connector-java</code>5.X的版本驱动名是:<code>com.mysql.jdbc.Driver</code>; 6.X及以上版本的驱动名是:<code>com.mysql.cj.jdbc.Driver</code></p>\n"},{"title":"插入emoji到mysql时提示了一个表里不存在的字段的错误","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-04-29T09:16:27.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 1.问题描述\n\n由于公司前端有需求，需要在`tiny_user_info`表的`nickname`这个字段里存入emoji表情，于是我熟练地将这个字段修改为`utf8mb4`，改好后测试插入一条带emoji数据。于是报了这个错误：\n\n```shell\n[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14\n```\n\n当时我就傻了，我这个表里也没有`user_name`这个字段啊，怎么会报这个字段错误,我明明修改的是`nickname`这个字段啊。于是google和百度搜了一圈，无解。\n\n## ２.解决方案\n\n试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现`tiny_user_info`这个表有三个文件\n\n![](http://cdn.mjava.top/blog/20200429171012.png)\n\n和常见的多了一个`TRG`文件。这是一个触发器文件，打开一看，发现了`user_name`字段。。。。。。\n\n\n\n原来是同事在这个表里加了个触发器，当`tiny_user_info`里新增数据时，会触发新增到另一张表里，`nickname`的值同时会插入到另一张表的`user_name`字段，而他那张表的字段没有设置`utf8mb4编码`,所以导致插入失败。于是叫同事把他那张表设置一下`utf8mb4`编码后，就可以正常插入了。","source":"_posts/mysql/mysql-utf8mb4-error.md","raw":"---\ntitle: 插入emoji到mysql时提示了一个表里不存在的字段的错误\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-04-29 17:16:27\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Pit\n- MySQL\ncategories:\n- MySQL\n---\n\n## 1.问题描述\n\n由于公司前端有需求，需要在`tiny_user_info`表的`nickname`这个字段里存入emoji表情，于是我熟练地将这个字段修改为`utf8mb4`，改好后测试插入一条带emoji数据。于是报了这个错误：\n\n```shell\n[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14\n```\n\n当时我就傻了，我这个表里也没有`user_name`这个字段啊，怎么会报这个字段错误,我明明修改的是`nickname`这个字段啊。于是google和百度搜了一圈，无解。\n\n## ２.解决方案\n\n试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现`tiny_user_info`这个表有三个文件\n\n![](http://cdn.mjava.top/blog/20200429171012.png)\n\n和常见的多了一个`TRG`文件。这是一个触发器文件，打开一看，发现了`user_name`字段。。。。。。\n\n\n\n原来是同事在这个表里加了个触发器，当`tiny_user_info`里新增数据时，会触发新增到另一张表里，`nickname`的值同时会插入到另一张表的`user_name`字段，而他那张表的字段没有设置`utf8mb4编码`,所以导致插入失败。于是叫同事把他那张表设置一下`utf8mb4`编码后，就可以正常插入了。","slug":"mysql/mysql-utf8mb4-error","published":1,"updated":"2020-04-29T09:18:36.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx02w002vw2g5l7ncrtvb","content":"<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n<p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p>\n<h2 id=\"２-解决方案\"><a href=\"#２-解决方案\" class=\"headerlink\" title=\"２.解决方案\"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200429171012.png\" alt></p>\n<p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p>\n<p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"1-问题描述\"><a href=\"#1-问题描述\" class=\"headerlink\" title=\"1.问题描述\"></a>1.问题描述</h2><p>由于公司前端有需求，需要在<code>tiny_user_info</code>表的<code>nickname</code>这个字段里存入emoji表情，于是我熟练地将这个字段修改为<code>utf8mb4</code>，改好后测试插入一条带emoji数据。于是报了这个错误：</p><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">[2020-04-29 15:57:25] [HY000][1366] Incorrect string value: '\\xF0\\x9F\\x98\\x98' for column 'user_name' at row 14</span><br></pre></td></tr></table></figure>","more":"\n\n\n<p>当时我就傻了，我这个表里也没有<code>user_name</code>这个字段啊，怎么会报这个字段错误,我明明修改的是<code>nickname</code>这个字段啊。于是google和百度搜了一圈，无解。</p>\n<h2 id=\"２-解决方案\"><a href=\"#２-解决方案\" class=\"headerlink\" title=\"２.解决方案\"></a>２.解决方案</h2><p>试了好几种方法，删字段，重新建。删表，重新建。都不行。。。。。静下心来，于是打算从mysql服务器入手。进入到mysql对应库的文件夹，发现<code>tiny_user_info</code>这个表有三个文件</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200429171012.png\" alt></p>\n<p>和常见的多了一个<code>TRG</code>文件。这是一个触发器文件，打开一看，发现了<code>user_name</code>字段。。。。。。</p>\n<p>原来是同事在这个表里加了个触发器，当<code>tiny_user_info</code>里新增数据时，会触发新增到另一张表里，<code>nickname</code>的值同时会插入到另一张表的<code>user_name</code>字段，而他那张表的字段没有设置<code>utf8mb4编码</code>,所以导致插入失败。于是叫同事把他那张表设置一下<code>utf8mb4</code>编码后，就可以正常插入了。</p>\n"},{"title":"RocketMQ集群搭建","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-09T12:55:36.000Z","password":null,"summary":null,"_content":"\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](http://cdn.mjava.top/blog/rocketmq_console.png)","source":"_posts/rocketmq/rocketmq-cluster-build.md","raw":"---\ntitle: RocketMQ集群搭建\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - RocketMQ\n  - Linux\ncategories:\n  - RocketMq\ndate: 2019-10-09 20:55:36\npassword:\nsummary:\n---\n\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](http://cdn.mjava.top/blog/rocketmq_console.png)","slug":"rocketmq/rocketmq-cluster-build","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03s006bw2g55izkl3ea","content":"<p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>JDK1.8</li>\n<li>Centos7</li>\n</ul><h2 id=\"主机-两台\"><a href=\"#主机-两台\" class=\"headerlink\" title=\"主机-两台\"></a>主机-两台</h2><ul>\n<li>centos7_1 :172.16.54.130</li>\n<li>centos7_2 :172.16.54.128</li>\n</ul><h2 id=\"软件资源\"><a href=\"#软件资源\" class=\"headerlink\" title=\"软件资源\"></a>软件资源</h2><ul>\n<li>JDK1.8 :<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"noopener\" target=\"_blank\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n<li>RocketMQ4.5.2 :<a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\" rel=\"noopener\" target=\"_blank\">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li>\n</ul><a id=\"more\"></a>\n\n\n\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p>\n<h2 id=\"配置RocketMQ\"><a href=\"#配置RocketMQ\" class=\"headerlink\" title=\"配置RocketMQ\"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip rocketmq-all-4.5.2-bin-release.zip</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所属集群名字 </span></span><br><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">rocketmq-cluster</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#broker名字，每队master和slave保持一致</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定主机ip</span></span><br><span class=\"line\"><span class=\"attr\">brokerIP1</span> = <span class=\"string\">主机IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nameServer地址，分号分割</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">主机IP:9876;主机IP:9876</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span></span><br><span class=\"line\"><span class=\"attr\">defaultTopicQueueNums</span>=<span class=\"string\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateTopicEnable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateSubscriptionGroup</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Broker 对外服务的监听端口 </span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除文件时间点，默认凌晨 4点</span></span><br><span class=\"line\"> <span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件保留时间，默认 48 小时 </span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#commitLog每个文件的大小默认1G </span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeCommitLog</span>=<span class=\"string\">1073741824</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeConsumeQueue</span>=<span class=\"string\">300000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测物理文件磁盘空间</span></span><br><span class=\"line\"><span class=\"attr\">diskMaxUsedSpaceRatio</span>=<span class=\"string\">88</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/store/checkpoint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Broker 的角色</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_MASTER 异步复制Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_MASTER 同步双写Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SLAVE </span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#刷盘方式</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"comment\">#checkTransactionMessageEnable=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#abort 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">abortFile</span>=<span class=\"string\">/usr/javawork/apache-rocketmq/store/abort</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#限制的消息大小 maxMessageSize=65536</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p>\n<ul>\n<li>2m-2s-async :2个master，2个slave，async异步复制</li>\n<li>2m-2s-sync :2个master，2个slave，sync同步双写</li>\n<li>2m-noslave :2个master,没有slave</li>\n</ul>\n<p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p>\n<h4 id=\"centos7-1主机编辑如下两个配置文件\"><a href=\"#centos7-1主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_1主机编辑如下两个配置文件\"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote>\n<p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p>\n</blockquote>\n<h5 id=\"broker-a-properties\"><a href=\"#broker-a-properties\" class=\"headerlink\" title=\"broker-a.properties\"></a>broker-a.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/master/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/master/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/master/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/master/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/master/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h5 id=\"broker-a-s-properties\"><a href=\"#broker-a-s-properties\" class=\"headerlink\" title=\"broker-a-s.properties\"></a>broker-a-s.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">SLAVE</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">20911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/slave/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h4 id=\"centos7-2主机编辑如下两个配置文件\"><a href=\"#centos7-2主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_2主机编辑如下两个配置文件\"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id=\"和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"><a href=\"#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\" class=\"headerlink\" title=\"和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id=\"设置RocketMQ运行的JVM内存-非必须\"><a href=\"#设置RocketMQ运行的JVM内存-非必须\" class=\"headerlink\" title=\"设置RocketMQ运行的JVM内存(非必须)\"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote>\n<p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p>\n<ul>\n<li>runbroker.sh：找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runserver.sh: 找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动RocketMQ\"><a href=\"#启动RocketMQ\" class=\"headerlink\" title=\"启动RocketMQ\"></a>启动RocketMQ</h2><blockquote>\n<p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># service firewalld stop</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：</p>\n<ul>\n<li>启动namesrv</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqnamesrv &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-master</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-slave</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqbroker -c ../conf/2m-2s-async/broker<span class=\"_\">-a</span>-s.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p>\n<h2 id=\"搭建Console可视化控制台\"><a href=\"#搭建Console可视化控制台\" class=\"headerlink\" title=\"搭建Console可视化控制台\"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href=\"https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\" rel=\"noopener\" target=\"_blank\">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/apache/rocketmq-externals.git</span></span><br></pre></td></tr></table></figure>\n\n<p>进去目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> rocketmq-externals-master/rocketmq-console</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim src/main/resources/application.properties</span></span><br></pre></td></tr></table></figure>\n\n<p>添加两个namesvr的主机ip</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">rocketmq.config.namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br></pre></td></tr></table></figure>\n\n<p>然后进项目跟目录，运行项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mvn sprint-boot:run</span></span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：</p>\n<p><img src=\"http://cdn.mjava.top/blog/rocketmq_console.png\" alt=\"可视化Console界面\"></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;</p><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>JDK1.8</li>\n<li>Centos7</li>\n</ul><h2 id=\"主机-两台\"><a href=\"#主机-两台\" class=\"headerlink\" title=\"主机-两台\"></a>主机-两台</h2><ul>\n<li>centos7_1 :172.16.54.130</li>\n<li>centos7_2 :172.16.54.128</li>\n</ul><h2 id=\"软件资源\"><a href=\"#软件资源\" class=\"headerlink\" title=\"软件资源\"></a>软件资源</h2><ul>\n<li>JDK1.8 :<a href=\"https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" rel=\"noopener\" target=\"_blank\">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></li>\n<li>RocketMQ4.5.2 :<a href=\"http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\" rel=\"noopener\" target=\"_blank\">http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip</a></li>\n</ul>","more":"\n\n\n\n<h2 id=\"安装JDK\"><a href=\"#安装JDK\" class=\"headerlink\" title=\"安装JDK\"></a>安装JDK</h2><p>  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；</p>\n<h2 id=\"配置RocketMQ\"><a href=\"#配置RocketMQ\" class=\"headerlink\" title=\"配置RocketMQ\"></a>配置RocketMQ</h2><p>  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:</p>\n  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> unzip rocketmq-all-4.5.2-bin-release.zip</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编写配置文件\"><a href=\"#编写配置文件\" class=\"headerlink\" title=\"编写配置文件\"></a>编写配置文件</h3><p>  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#所属集群名字 </span></span><br><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">rocketmq-cluster</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#broker名字，每队master和slave保持一致</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#0 表示 Master，&gt;0 表示 Slave</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0 </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#指定主机ip</span></span><br><span class=\"line\"><span class=\"attr\">brokerIP1</span> = <span class=\"string\">主机IP</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#nameServer地址，分号分割</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">主机IP:9876;主机IP:9876</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 </span></span><br><span class=\"line\"><span class=\"attr\">defaultTopicQueueNums</span>=<span class=\"string\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateTopicEnable</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 </span></span><br><span class=\"line\"><span class=\"attr\">autoCreateSubscriptionGroup</span>=<span class=\"string\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Broker 对外服务的监听端口 </span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#删除文件时间点，默认凌晨 4点</span></span><br><span class=\"line\"> <span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#文件保留时间，默认 48 小时 </span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">120</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#commitLog每个文件的大小默认1G </span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeCommitLog</span>=<span class=\"string\">1073741824</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#ConsumeQueue每个文件默认存30W条，根据业务情况调整</span></span><br><span class=\"line\"><span class=\"attr\">mapedFileSizeConsumeQueue</span>=<span class=\"string\">300000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检测物理文件磁盘空间</span></span><br><span class=\"line\"><span class=\"attr\">diskMaxUsedSpaceRatio</span>=<span class=\"string\">88</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/store/checkpoint</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#Broker 的角色</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_MASTER 异步复制Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_MASTER 同步双写Master</span></span><br><span class=\"line\"><span class=\"comment\">#- SLAVE </span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#刷盘方式</span></span><br><span class=\"line\"><span class=\"comment\">#- ASYNC_FLUSH 异步刷盘</span></span><br><span class=\"line\"><span class=\"comment\">#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"comment\">#checkTransactionMessageEnable=false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#abort 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">abortFile</span>=<span class=\"string\">/usr/javawork/apache-rocketmq/store/abort</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#限制的消息大小 maxMessageSize=65536</span></span><br></pre></td></tr></table></figure>\n\n<p>以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：</p>\n<ul>\n<li>2m-2s-async :2个master，2个slave，async异步复制</li>\n<li>2m-2s-sync :2个master，2个slave，sync同步双写</li>\n<li>2m-noslave :2个master,没有slave</li>\n</ul>\n<p>这里我们用async异步复制模式，进入文件夹，分别编辑：</p>\n<h4 id=\"centos7-1主机编辑如下两个配置文件\"><a href=\"#centos7-1主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_1主机编辑如下两个配置文件\"></a>centos7_1主机编辑如下两个配置文件</h4><blockquote>\n<p>注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。</p>\n</blockquote>\n<h5 id=\"broker-a-properties\"><a href=\"#broker-a-properties\" class=\"headerlink\" title=\"broker-a.properties\"></a>broker-a.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">0</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">ASYNC_MASTER</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">10911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/master/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/master/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/master/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/master/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/master/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h5 id=\"broker-a-s-properties\"><a href=\"#broker-a-s-properties\" class=\"headerlink\" title=\"broker-a-s.properties\"></a>broker-a-s.properties</h5><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">brokerClusterName</span>=<span class=\"string\">DefaultCluster</span></span><br><span class=\"line\"><span class=\"attr\">brokerName</span>=<span class=\"string\">broker-a</span></span><br><span class=\"line\"><span class=\"attr\">brokerId</span>=<span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">deleteWhen</span>=<span class=\"string\">04</span></span><br><span class=\"line\"><span class=\"attr\">fileReservedTime</span>=<span class=\"string\">48</span></span><br><span class=\"line\"><span class=\"attr\">brokerRole</span>=<span class=\"string\">SLAVE</span></span><br><span class=\"line\"><span class=\"attr\">flushDiskType</span>=<span class=\"string\">ASYNC_FLUSH</span></span><br><span class=\"line\"><span class=\"attr\">namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br><span class=\"line\"><span class=\"attr\">listenPort</span>=<span class=\"string\">20911</span></span><br><span class=\"line\"><span class=\"comment\">#存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathRootDir</span>=<span class=\"string\">/usr/local/rocketmq/slave/store</span></span><br><span class=\"line\"><span class=\"comment\">#commitLog 存储路径 </span></span><br><span class=\"line\"><span class=\"attr\">storePathCommitLog</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/commitlog</span></span><br><span class=\"line\"><span class=\"comment\">#消费队列存储路径存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathConsumeQueue</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/consumequeue</span></span><br><span class=\"line\"><span class=\"comment\">#消息索引存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storePathIndex</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/index</span></span><br><span class=\"line\"><span class=\"comment\">#checkpoint 文件存储路径</span></span><br><span class=\"line\"><span class=\"attr\">storeCheckpoint</span>=<span class=\"string\">/usr/local/rocketmq/slave/store/checkpoint</span></span><br></pre></td></tr></table></figure>\n\n<p><em>这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。</em></p>\n<h4 id=\"centos7-2主机编辑如下两个配置文件\"><a href=\"#centos7-2主机编辑如下两个配置文件\" class=\"headerlink\" title=\"centos7_2主机编辑如下两个配置文件\"></a>centos7_2主机编辑如下两个配置文件</h4><h5 id=\"和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"><a href=\"#和centos7-1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\" class=\"headerlink\" title=\"和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\"></a>和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。</h5><h2 id=\"设置RocketMQ运行的JVM内存-非必须\"><a href=\"#设置RocketMQ运行的JVM内存-非必须\" class=\"headerlink\" title=\"设置RocketMQ运行的JVM内存(非必须)\"></a>设置RocketMQ运行的JVM内存(非必须)</h2><blockquote>\n<p>此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。</p>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。</p>\n<ul>\n<li>runbroker.sh：找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms8g -Xmx8g -Xmn4g\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m\"</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>runserver.sh: 找到如下一行配置</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">改成：</span></span><br><span class=\"line\"><span class=\"attr\">JAVA_OPT</span>=<span class=\"string\">\"$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动RocketMQ\"><a href=\"#启动RocketMQ\" class=\"headerlink\" title=\"启动RocketMQ\"></a>启动RocketMQ</h2><blockquote>\n<p>启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> <span class=\"comment\"># service firewalld stop</span></span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></span><br></pre></td></tr></table></figure>\n</blockquote>\n<blockquote>\n</blockquote>\n<p>  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：</p>\n<ul>\n<li>启动namesrv</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqnamesrv &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-master</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>启动broker-slave</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> nohup sh mqbroker -c ../conf/2m-2s-async/broker<span class=\"_\">-a</span>-s.properties &amp;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了</em></p>\n<h2 id=\"搭建Console可视化控制台\"><a href=\"#搭建Console可视化控制台\" class=\"headerlink\" title=\"搭建Console可视化控制台\"></a>搭建Console可视化控制台</h2><p>  任意一台机器或者本地下载Console源码，地址：<a href=\"https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\" rel=\"noopener\" target=\"_blank\">https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> git <span class=\"built_in\">clone</span> https://github.com/apache/rocketmq-externals.git</span></span><br></pre></td></tr></table></figure>\n\n<p>进去目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">cd</span> rocketmq-externals-master/rocketmq-console</span></span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> vim src/main/resources/application.properties</span></span><br></pre></td></tr></table></figure>\n\n<p>添加两个namesvr的主机ip</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">rocketmq.config.namesrvAddr</span>=<span class=\"string\">172.16.54.128:9876;172.16.54.130:9876</span></span><br></pre></td></tr></table></figure>\n\n<p>然后进项目跟目录，运行项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> mvn sprint-boot:run</span></span><br></pre></td></tr></table></figure>\n\n<p>浏览器访问：</p>\n<p><img src=\"http://cdn.mjava.top/blog/rocketmq_console.png\" alt=\"可视化Console界面\"></p>\n"},{"title":"Vue Cli3-11创建项目慢的问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-05T08:33:23.000Z","password":null,"summary":null,"_content":"## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","source":"_posts/vue/vue-cli3-11-problem.md","raw":"---\ntitle: Vue Cli3-11创建项目慢的问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Vue\ntags:\n  - Vue\n  - Pit\ndate: 2019-09-05 16:33:23\npassword:\nsummary:\n---\n## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","slug":"vue/vue-cli3-11-problem","published":1,"updated":"2019-11-14T13:38:37.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03t006cw2g5xkcpqwk9","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p><p><img src=\"/images/vuecreate.png\" alt=\"vuecreate\"></p><p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p><h2 id=\"下载nrm\"><a href=\"#下载nrm\" class=\"headerlink\" title=\"下载nrm\"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p><a id=\"more\"></a>\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试nrm是否安装成功\"><a href=\"#测试nrm是否安装成功\" class=\"headerlink\" title=\"测试nrm是否安装成功\"></a>测试nrm是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm -V</span><br></pre></td></tr></table></figure>\n\n<p>如果输出版本号，则说明安装成功。</p>\n<h2 id=\"切换npm源\"><a href=\"#切换npm源\" class=\"headerlink\" title=\"切换npm源\"></a>切换npm源</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<p>此命令会列出npm的所有源</p>\n<p><img src=\"/images/nrmls.png\" alt=\"nrmls\"></p>\n<p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/nrmuse.png\" alt=\"nrmuse\"></p>\n<h2 id=\"再次创建vue项目\"><a href=\"#再次创建vue项目\" class=\"headerlink\" title=\"再次创建vue项目\"></a>再次创建vue项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create rrr2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vuecreate2.png\" alt=\"vuecreate2\"><br><img src=\"/images/vuecreate3.png\" alt=\"vuecreate3\"></p>\n<p>项目成功创建！！！</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。</p><p><img src=\"/images/vuecreate.png\" alt=\"vuecreate\"></p><p>网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！</p><h2 id=\"下载nrm\"><a href=\"#下载nrm\" class=\"headerlink\" title=\"下载nrm\"></a>下载nrm</h2><p>  看清楚哦，是nrm部署npm！！！nrm 是一个 <code>npm</code> 源管理器，允许你快速地在 <code>npm</code> 源间切换。执行以下命令安装。</p>","more":"\n\n\n\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo npm install -g nrm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"测试nrm是否安装成功\"><a href=\"#测试nrm是否安装成功\" class=\"headerlink\" title=\"测试nrm是否安装成功\"></a>测试nrm是否安装成功</h3><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm -V</span><br></pre></td></tr></table></figure>\n\n<p>如果输出版本号，则说明安装成功。</p>\n<h2 id=\"切换npm源\"><a href=\"#切换npm源\" class=\"headerlink\" title=\"切换npm源\"></a>切换npm源</h2>  <figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm ls</span><br></pre></td></tr></table></figure>\n\n<p>此命令会列出npm的所有源</p>\n<p><img src=\"/images/nrmls.png\" alt=\"nrmls\"></p>\n<p>可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">nrm use npm</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/nrmuse.png\" alt=\"nrmuse\"></p>\n<h2 id=\"再次创建vue项目\"><a href=\"#再次创建vue项目\" class=\"headerlink\" title=\"再次创建vue项目\"></a>再次创建vue项目</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">vue create rrr2</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/images/vuecreate2.png\" alt=\"vuecreate2\"><br><img src=\"/images/vuecreate3.png\" alt=\"vuecreate3\"></p>\n<p>项目成功创建！！！</p>\n"},{"title":"Git常用命令","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:16:56.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](http://cdn.mjava.top/blog/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![](http://cdn.mjava.top/blog/20200605002904.jpg)","source":"_posts/recommend/git-commend-note.md","raw":"---\ntitle: Git常用命令\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:16:56\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Git\ncategories:\n- Java\n---\n\n\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](http://cdn.mjava.top/blog/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![](http://cdn.mjava.top/blog/20200605002904.jpg)","slug":"recommend/git-commend-note","published":1,"updated":"2020-09-16T07:17:23.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03u006fw2g5nmcelcte","content":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/内核\" rel=\"noopener\" target=\"_blank\">内核</a>开发的<a href=\"https://baike.baidu.com/item/版本控制\" rel=\"noopener\" target=\"_blank\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/源代码\" rel=\"noopener\" target=\"_blank\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p><a id=\"more\"></a>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github/gitlab/gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200605002904.jpg\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/内核\" rel=\"noopener\" target=\"_blank\">内核</a>开发的<a href=\"https://baike.baidu.com/item/版本控制\" rel=\"noopener\" target=\"_blank\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/源代码\" rel=\"noopener\" target=\"_blank\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>","more":"\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github/gitlab/gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200605002904.jpg\" alt></p>\n"},{"title":"创建一个自定义注解","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:23:56.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 前言\n\n平时在用springBoot的使用，常常会用到`@Service`，`@Compent`等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。\n\n\n\n## 写一个注解\n\n创建一个注解主要分两部分，一部分是创建**注解类**，一部分是创建一个**切面类**。\n\n### 创建注解类\n\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnn {\n    String value() default \"d\";\n}\n```\n\n创建注解类的关键字就是`@interface`，这个注解类设置了一个`value`变量，默认值为d；\n\n在注解类上面还有`@Target`和`@Retention`注解，下面来说说创建注解类时需要用到的几个注解：\n\n#### `@Target`\n\n用来标记这个注解可以用于哪些地方，与`ElementType`枚举类搭配使用，那这个枚举类里面有什么内容呢？\n\n```java\npublic enum ElementType {\n    /** 类，接口（包括注释类型）或枚举声明*/\n    TYPE,\n\n    /** 字段声明（包括枚举常量）*/\n    FIELD,\n\n    /** 方法声明*/\n    METHOD,\n\n    /** 形式参数（形参-调用方法时传入的参数）声明 */\n    PARAMETER,\n\n    /** 构造函数声明 */\n    CONSTRUCTOR,\n\n    /** 局部变量声明 */\n    LOCAL_VARIABLE,\n\n    /** 注释类型声明 */\n    ANNOTATION_TYPE,\n\n    /** 包声明 */\n    PACKAGE,\n\n    /**\n     * 类型参数声明\n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * 任何类型声明 \n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n#### `@Retention`\n\n该注解表示自定义注解的生命周期\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * 注释将被编译器丢弃。\n     */\n    SOURCE,\n\n    /**\n     * 注释由编译器记录在类文件中\n     * 但不必在运行时由VM保留。 这是默认值\n     */\n    CLASS,\n\n    /**\n   \t *注释由编译器记录在类文件中，并且\n     *在运行时由VM保留，因此可以以反射方式读取它们。\n     */\n    RUNTIME\n}\n\n```\n\n## 写一个切面类\n\n因为用到了切面，所以我们要先导入`Spring AOP`这个依赖包。\n\n```xml\n<!--SpringBoot项目导入AOP-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n### 创建切面类\n\n```java\n@Aspect\n@Component\npublic class MyAnnAop {\n    private Logger logger= LoggerFactory.getLogger(MyAnnAop.class);\n    @Pointcut(\"@annotation(com.example.demo.annotation.MyAnn)\")\n    public void ann(){\n    }\n    @Before(\"ann()\")\n    public void before(JoinPoint joinPoint){\n        logger.info(\"打印：开始前\");\n    }\n    @AfterReturning(value = \"ann()\",returning = \"res\")\n    public Object dochange(JoinPoint joinPoint,Object res){\n        logger.info(\"AfterReturning通知开始-获取数据:{}\",res);\n        //获取数据\n        Map<String,String> map= (Map<String, String>) res;\n        //添加新值\n        map.put(\"s1\",\"我是在AOP中添加的新值\");\n        return map;\n    }\n}\n```\n\n### Spring AOP说明\n\n> 具体可以查阅Spring AOP相关资料\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@Before`         | 前置通知，在连接点方法前调用                                 |\n| `@Around`         | 环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法   |\n| `@After`          | 后置通知，在连接点方法后调用                                 |\n| `@AfterReturning` | 返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常 |\n| `@AfterThrowing`  | 异常通知，当连接点方法异常时调用                             |\n\n## 使用自定义的注解\n\n这里使用普通的`SpringBoot`来使用注解，创建一个**Service**,在里面使用注解，然后才控制层调用\n\n```java\n//服务层\n@Service\npublic class TestService {\n    @MyAnn\n    public Map test(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在Service设置的值\");\n        return map;\n    }\n}\n\n//控制层\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=testService.test();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:{t1=我是在Service设置的值}\ncom.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值\n```\n\n## 注意事项\n\n上面那样使用注解是没问题的，但是如果是下面这样使用，`AOP`就会**失效**\n\n```java\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=this.test2();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n\n    @MyAnn\n    public Map test2(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在控制层设置的值\");\n        return map;\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.web.Test2       : 控制层输出：null\n```\n\n这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法\n\n具体参考资料：\n\n- https://blog.csdn.net/Daybreak1209/article/details/82982674\n- https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\n- https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/","source":"_posts/spring/apring-aop-ann.md","raw":"---\ntitle: 创建一个自定义注解\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:23:56\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Spring AOP\n- 注解\ncategories:\n- Spring\n---\n\n## 前言\n\n平时在用springBoot的使用，常常会用到`@Service`，`@Compent`等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。\n\n\n\n## 写一个注解\n\n创建一个注解主要分两部分，一部分是创建**注解类**，一部分是创建一个**切面类**。\n\n### 创建注解类\n\n```java\n@Target({ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnn {\n    String value() default \"d\";\n}\n```\n\n创建注解类的关键字就是`@interface`，这个注解类设置了一个`value`变量，默认值为d；\n\n在注解类上面还有`@Target`和`@Retention`注解，下面来说说创建注解类时需要用到的几个注解：\n\n#### `@Target`\n\n用来标记这个注解可以用于哪些地方，与`ElementType`枚举类搭配使用，那这个枚举类里面有什么内容呢？\n\n```java\npublic enum ElementType {\n    /** 类，接口（包括注释类型）或枚举声明*/\n    TYPE,\n\n    /** 字段声明（包括枚举常量）*/\n    FIELD,\n\n    /** 方法声明*/\n    METHOD,\n\n    /** 形式参数（形参-调用方法时传入的参数）声明 */\n    PARAMETER,\n\n    /** 构造函数声明 */\n    CONSTRUCTOR,\n\n    /** 局部变量声明 */\n    LOCAL_VARIABLE,\n\n    /** 注释类型声明 */\n    ANNOTATION_TYPE,\n\n    /** 包声明 */\n    PACKAGE,\n\n    /**\n     * 类型参数声明\n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * 任何类型声明 \n     * java8新特性：\n     * @since 1.8\n     */\n    TYPE_USE\n}\n```\n\n#### `@Retention`\n\n该注解表示自定义注解的生命周期\n\n```java\npublic enum RetentionPolicy {\n    /**\n     * 注释将被编译器丢弃。\n     */\n    SOURCE,\n\n    /**\n     * 注释由编译器记录在类文件中\n     * 但不必在运行时由VM保留。 这是默认值\n     */\n    CLASS,\n\n    /**\n   \t *注释由编译器记录在类文件中，并且\n     *在运行时由VM保留，因此可以以反射方式读取它们。\n     */\n    RUNTIME\n}\n\n```\n\n## 写一个切面类\n\n因为用到了切面，所以我们要先导入`Spring AOP`这个依赖包。\n\n```xml\n<!--SpringBoot项目导入AOP-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n</dependency>\n```\n\n### 创建切面类\n\n```java\n@Aspect\n@Component\npublic class MyAnnAop {\n    private Logger logger= LoggerFactory.getLogger(MyAnnAop.class);\n    @Pointcut(\"@annotation(com.example.demo.annotation.MyAnn)\")\n    public void ann(){\n    }\n    @Before(\"ann()\")\n    public void before(JoinPoint joinPoint){\n        logger.info(\"打印：开始前\");\n    }\n    @AfterReturning(value = \"ann()\",returning = \"res\")\n    public Object dochange(JoinPoint joinPoint,Object res){\n        logger.info(\"AfterReturning通知开始-获取数据:{}\",res);\n        //获取数据\n        Map<String,String> map= (Map<String, String>) res;\n        //添加新值\n        map.put(\"s1\",\"我是在AOP中添加的新值\");\n        return map;\n    }\n}\n```\n\n### Spring AOP说明\n\n> 具体可以查阅Spring AOP相关资料\n\n| 注解              | 说明                                                         |\n| ----------------- | ------------------------------------------------------------ |\n| `@Before`         | 前置通知，在连接点方法前调用                                 |\n| `@Around`         | 环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法   |\n| `@After`          | 后置通知，在连接点方法后调用                                 |\n| `@AfterReturning` | 返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常 |\n| `@AfterThrowing`  | 异常通知，当连接点方法异常时调用                             |\n\n## 使用自定义的注解\n\n这里使用普通的`SpringBoot`来使用注解，创建一个**Service**,在里面使用注解，然后才控制层调用\n\n```java\n//服务层\n@Service\npublic class TestService {\n    @MyAnn\n    public Map test(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在Service设置的值\");\n        return map;\n    }\n}\n\n//控制层\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=testService.test();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:{t1=我是在Service设置的值}\ncom.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值\n```\n\n## 注意事项\n\n上面那样使用注解是没问题的，但是如果是下面这样使用，`AOP`就会**失效**\n\n```java\n@RestController\npublic class Test2 {\n    private Logger logger= LoggerFactory.getLogger(Test2.class);\n\n    @Autowired\n    private TestService testService;\n\n    @GetMapping(\"/test\")\n    public String test(String id){\n        Map<String,String> s=this.test2();\n        logger.info(\"控制层输出：{}\",s.get(\"s1\"));\n        return \"sccess\";\n    }\n\n    @MyAnn\n    public Map test2(){\n        Map<String,String>  map=new HashMap<>();\n        map.put(\"t1\",\"我是在控制层设置的值\");\n        return map;\n    }\n}\n```\n\n#### 输出\n\n```shell\ncom.example.demo.web.Test2       : 控制层输出：null\n```\n\n这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法\n\n具体参考资料：\n\n- https://blog.csdn.net/Daybreak1209/article/details/82982674\n- https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\n- https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/","slug":"spring/apring-aop-ann","published":1,"updated":"2020-06-22T08:25:48.845Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03w006gw2g5f8oxboou","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p><h2 id=\"写一个注解\"><a href=\"#写一个注解\" class=\"headerlink\" title=\"写一个注解\"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p><h3 id=\"创建注解类\"><a href=\"#创建注解类\" class=\"headerlink\" title=\"创建注解类\"></a>创建注解类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnn &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"d\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p>\n<p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段声明（包括枚举常量）*/</span></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 方法声明*/</span></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 构造函数声明 */</span></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 局部变量声明 */</span></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 注释类型声明 */</span></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 包声明 */</span></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类型参数声明</span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任何类型声明 </span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释将被编译器丢弃。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释由编译器记录在类文件中</span></span><br><span class=\"line\"><span class=\"comment\">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   \t *注释由编译器记录在类文件中，并且</span></span><br><span class=\"line\"><span class=\"comment\">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写一个切面类\"><a href=\"#写一个切面类\" class=\"headerlink\" title=\"写一个切面类\"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建切面类\"><a href=\"#创建切面类\" class=\"headerlink\" title=\"创建切面类\"></a>创建切面类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAnnAop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.example.demo.annotation.MyAnn)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ann</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"ann()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"打印：开始前\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(value = <span class=\"string\">\"ann()\"</span>,returning = <span class=\"string\">\"res\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">dochange</span><span class=\"params\">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"AfterReturning通知开始-获取数据:&#123;&#125;\"</span>,res);</span><br><span class=\"line\">        <span class=\"comment\">//获取数据</span></span><br><span class=\"line\">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class=\"line\">        <span class=\"comment\">//添加新值</span></span><br><span class=\"line\">        map.put(<span class=\"string\">\"s1\"</span>,<span class=\"string\">\"我是在AOP中添加的新值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-AOP说明\"><a href=\"#Spring-AOP说明\" class=\"headerlink\" title=\"Spring AOP说明\"></a>Spring AOP说明</h3><blockquote>\n<p>具体可以查阅Spring AOP相关资料</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Before</code></td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td><code>@Around</code></td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td>\n</tr>\n<tr>\n<td><code>@After</code></td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td><code>@AfterReturning</code></td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td><code>@AfterThrowing</code></td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用自定义的注解\"><a href=\"#使用自定义的注解\" class=\"headerlink\" title=\"使用自定义的注解\"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"t1\"</span>,<span class=\"string\">\"我是在Service设置的值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制层</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=testService.test();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"控制层输出：&#123;&#125;\"</span>,s.get(<span class=\"string\">\"s1\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sccess\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class=\"line\">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=<span class=\"keyword\">this</span>.test2();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"控制层输出：&#123;&#125;\"</span>,s.get(<span class=\"string\">\"s1\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sccess\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"t1\"</span>,<span class=\"string\">\"我是在控制层设置的值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure>\n\n<p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p>\n<p>具体参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/Daybreak1209/article/details/82982674\" rel=\"noopener\" target=\"_blank\">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li>\n<li><a href=\"https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\" rel=\"noopener\" target=\"_blank\">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li>\n<li><a href=\"https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/\" rel=\"noopener\" target=\"_blank\">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平时在用springBoot的使用，常常会用到<code>@Service</code>，<code>@Compent</code>等等注解，简化了我们的开发流程，提升了开发效率.那如何自己来写一个注解呢？下面就来介绍一下。</p><h2 id=\"写一个注解\"><a href=\"#写一个注解\" class=\"headerlink\" title=\"写一个注解\"></a>写一个注解</h2><p>创建一个注解主要分两部分，一部分是创建<strong>注解类</strong>，一部分是创建一个<strong>切面类</strong>。</p><h3 id=\"创建注解类\"><a href=\"#创建注解类\" class=\"headerlink\" title=\"创建注解类\"></a>创建注解类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnn &#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">value</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"d\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<p>创建注解类的关键字就是<code>@interface</code>，这个注解类设置了一个<code>value</code>变量，默认值为d；</p>\n<p>在注解类上面还有<code>@Target</code>和<code>@Retention</code>注解，下面来说说创建注解类时需要用到的几个注解：</p>\n<h4 id=\"Target\"><a href=\"#Target\" class=\"headerlink\" title=\"@Target\"></a><code>@Target</code></h4><p>用来标记这个注解可以用于哪些地方，与<code>ElementType</code>枚举类搭配使用，那这个枚举类里面有什么内容呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> ElementType &#123;</span><br><span class=\"line\">    <span class=\"comment\">/** 类，接口（包括注释类型）或枚举声明*/</span></span><br><span class=\"line\">    TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 字段声明（包括枚举常量）*/</span></span><br><span class=\"line\">    FIELD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 方法声明*/</span></span><br><span class=\"line\">    METHOD,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 形式参数（形参-调用方法时传入的参数）声明 */</span></span><br><span class=\"line\">    PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 构造函数声明 */</span></span><br><span class=\"line\">    CONSTRUCTOR,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 局部变量声明 */</span></span><br><span class=\"line\">    LOCAL_VARIABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 注释类型声明 */</span></span><br><span class=\"line\">    ANNOTATION_TYPE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** 包声明 */</span></span><br><span class=\"line\">    PACKAGE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 类型参数声明</span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_PARAMETER,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 任何类型声明 </span></span><br><span class=\"line\"><span class=\"comment\">     * java8新特性：</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@since</span> 1.8</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TYPE_USE</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Retention\"><a href=\"#Retention\" class=\"headerlink\" title=\"@Retention\"></a><code>@Retention</code></h4><p>该注解表示自定义注解的生命周期</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> RetentionPolicy &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释将被编译器丢弃。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    SOURCE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 注释由编译器记录在类文件中</span></span><br><span class=\"line\"><span class=\"comment\">     * 但不必在运行时由VM保留。 这是默认值</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    CLASS,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   \t *注释由编译器记录在类文件中，并且</span></span><br><span class=\"line\"><span class=\"comment\">     *在运行时由VM保留，因此可以以反射方式读取它们。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNTIME</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写一个切面类\"><a href=\"#写一个切面类\" class=\"headerlink\" title=\"写一个切面类\"></a>写一个切面类</h2><p>因为用到了切面，所以我们要先导入<code>Spring AOP</code>这个依赖包。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--SpringBoot项目导入AOP--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-aop<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建切面类\"><a href=\"#创建切面类\" class=\"headerlink\" title=\"创建切面类\"></a>创建切面类</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Aspect</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAnnAop</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(MyAnnAop.class);</span><br><span class=\"line\">    <span class=\"meta\">@Pointcut</span>(<span class=\"string\">\"@annotation(com.example.demo.annotation.MyAnn)\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ann</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Before</span>(<span class=\"string\">\"ann()\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">before</span><span class=\"params\">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"打印：开始前\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@AfterReturning</span>(value = <span class=\"string\">\"ann()\"</span>,returning = <span class=\"string\">\"res\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">dochange</span><span class=\"params\">(JoinPoint joinPoint,Object res)</span></span>&#123;</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"AfterReturning通知开始-获取数据:&#123;&#125;\"</span>,res);</span><br><span class=\"line\">        <span class=\"comment\">//获取数据</span></span><br><span class=\"line\">        Map&lt;String,String&gt; map= (Map&lt;String, String&gt;) res;</span><br><span class=\"line\">        <span class=\"comment\">//添加新值</span></span><br><span class=\"line\">        map.put(<span class=\"string\">\"s1\"</span>,<span class=\"string\">\"我是在AOP中添加的新值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spring-AOP说明\"><a href=\"#Spring-AOP说明\" class=\"headerlink\" title=\"Spring AOP说明\"></a>Spring AOP说明</h3><blockquote>\n<p>具体可以查阅Spring AOP相关资料</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>注解</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@Before</code></td>\n<td>前置通知，在连接点方法前调用</td>\n</tr>\n<tr>\n<td><code>@Around</code></td>\n<td>环绕通知，它将覆盖原有方法，但是允许你通过反射调用原有方法</td>\n</tr>\n<tr>\n<td><code>@After</code></td>\n<td>后置通知，在连接点方法后调用</td>\n</tr>\n<tr>\n<td><code>@AfterReturning</code></td>\n<td>返回通知，在连接点方法执行并正常返回后调用，要求连接点方法在执行过程中没有发生异常</td>\n</tr>\n<tr>\n<td><code>@AfterThrowing</code></td>\n<td>异常通知，当连接点方法异常时调用</td>\n</tr>\n</tbody></table>\n<h2 id=\"使用自定义的注解\"><a href=\"#使用自定义的注解\" class=\"headerlink\" title=\"使用自定义的注解\"></a>使用自定义的注解</h2><p>这里使用普通的<code>SpringBoot</code>来使用注解，创建一个<strong>Service</strong>,在里面使用注解，然后才控制层调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//服务层</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"t1\"</span>,<span class=\"string\">\"我是在Service设置的值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//控制层</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=testService.test();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"控制层输出：&#123;&#125;\"</span>,s.get(<span class=\"string\">\"s1\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sccess\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.aop.MyAnnAop : AfterReturning通知开始-获取数据:&#123;t1=我是在Service设置的值&#125;</span><br><span class=\"line\">com.example.demo.web.Test2    : 控制层输出：我是在AOP中添加的新值</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>上面那样使用注解是没问题的，但是如果是下面这样使用，<code>AOP</code>就会<strong>失效</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Logger logger= LoggerFactory.getLogger(Test2.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestService testService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">test</span><span class=\"params\">(String id)</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; s=<span class=\"keyword\">this</span>.test2();</span><br><span class=\"line\">        logger.info(<span class=\"string\">\"控制层输出：&#123;&#125;\"</span>,s.get(<span class=\"string\">\"s1\"</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"sccess\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MyAnn</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Map <span class=\"title\">test2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Map&lt;String,String&gt;  map=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">        map.put(<span class=\"string\">\"t1\"</span>,<span class=\"string\">\"我是在控制层设置的值\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> map;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"输出-1\"><a href=\"#输出-1\" class=\"headerlink\" title=\"输出\"></a>输出</h4><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">com.example.demo.web.Test2       : 控制层输出：null</span><br></pre></td></tr></table></figure>\n\n<p>这是应为内部方法调用，调用的是具体方法，并没有调用使用AOP后生成的代理方法</p>\n<p>具体参考资料：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/Daybreak1209/article/details/82982674\" rel=\"noopener\" target=\"_blank\">https://blog.csdn.net/Daybreak1209/article/details/82982674</a></li>\n<li><a href=\"https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase\" rel=\"noopener\" target=\"_blank\">https://blog.csdn.net/u013151053/article/details/106124048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.nonecase</a></li>\n<li><a href=\"https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/\" rel=\"noopener\" target=\"_blank\">https://zhewuzhou.github.io/2018/09/01/Spring_AOP_Trap/</a></li>\n</ul>\n"},{"title":"Fegin和RestTemplate添加全局请求头","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:14:43.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## Fegin添加全局请求头\n\n- 实现RequestInterceptor接口\n\n```java\n\n/**\n* 实现RequestInterceptor接口的apply方法\n*/\n@Configuration\npublic class FeignRequestInterceptor implements RequestInterceptor {\n    @Override\n    public void apply(RequestTemplate requestTemplate) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Enumeration<String> headerNames = request.getHeaderNames();\n        if (headerNames != null) {\n            while (headerNames.hasMoreElements()) {\n                String name = headerNames.nextElement();\n                String values = request.getHeader(name);\n                requestTemplate.header(name, values);\n\n            }\n        }\n    }\n}\n\n```\n\n- 在`@FeginClient`注释里`configuration`所填入的类文件中添加上面的拦截器\n\n  > 比如 \n  >\n  > ```java\n  > // configuration指定的类为FeignConfig\n  > \n  > @FeignClient(name = \"${TinyConfigServiceName}\",path=\"/config\",configuration = FeignConfig.class)\n  > ```\n  - 在FeignConfig类中添加拦截器\n\n    ```java\n    @Configuration\n    public class FeignConfig {\n        @Bean\n        public RequestInterceptor requestInterceptor(){\n            return new FeignRequestInterceptor();\n        }\n    }\n    ```\n\n    \n\n## RestTemplate添加全局请求头\n\n- 编写拦截器,实现`ClientHttpRequestInterceptor`接口的`intercept`方法\n\n  ```java\n  public class MyInterceptor implements ClientHttpRequestInterceptor {\n      @Override\n      public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes, ClientHttpRequestExecution clientHttpRequestExecution) throws IOException {\n          HttpHeaders httpHeaders=httpRequest.getHeaders();\n          ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                  .getRequestAttributes();\n          HttpServletRequest request = attributes.getRequest();\n          Enumeration<String> headerNames = request.getHeaderNames();\n          if (headerNames != null) {\n              while (headerNames.hasMoreElements()) {\n                  String name = headerNames.nextElement();\n                  String values = request.getHeader(name);\n                  httpHeaders.add(name, values);\n              }\n          }\n          return clientHttpRequestExecution.execute(httpRequest,bytes);\n      }\n  }\n  ```\n\n  \n\n- 在springboot的启动类里添加`RestTemplate`\n\n  ```java\n  @SpringBootApplication\n  public class DemoApplication {\n  \n      public static void main(String[] args) {\n          SpringApplication.run(DemoApplication.class, args);\n      }\n  \n      //ioc添加RestTemplate\n      @Bean\n      public RestTemplate restTemplate(){\n          MyInterceptor myInterceptor=new MyInterceptor();\n          RestTemplate restTemplate=new RestTemplate();\n          restTemplate.setInterceptors(Collections.singletonList(myInterceptor));\n          return restTemplate;\n      }\n  \n  }\n  ```\n\n  ","source":"_posts/spring/fegin-resttemplate-addheard.md","raw":"---\ntitle: Fegin和RestTemplate添加全局请求头\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:14:43\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Fegin\n- Resttemplate\ncategories:\n- Spring\n---\n\n## Fegin添加全局请求头\n\n- 实现RequestInterceptor接口\n\n```java\n\n/**\n* 实现RequestInterceptor接口的apply方法\n*/\n@Configuration\npublic class FeignRequestInterceptor implements RequestInterceptor {\n    @Override\n    public void apply(RequestTemplate requestTemplate) {\n        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                .getRequestAttributes();\n        HttpServletRequest request = attributes.getRequest();\n        Enumeration<String> headerNames = request.getHeaderNames();\n        if (headerNames != null) {\n            while (headerNames.hasMoreElements()) {\n                String name = headerNames.nextElement();\n                String values = request.getHeader(name);\n                requestTemplate.header(name, values);\n\n            }\n        }\n    }\n}\n\n```\n\n- 在`@FeginClient`注释里`configuration`所填入的类文件中添加上面的拦截器\n\n  > 比如 \n  >\n  > ```java\n  > // configuration指定的类为FeignConfig\n  > \n  > @FeignClient(name = \"${TinyConfigServiceName}\",path=\"/config\",configuration = FeignConfig.class)\n  > ```\n  - 在FeignConfig类中添加拦截器\n\n    ```java\n    @Configuration\n    public class FeignConfig {\n        @Bean\n        public RequestInterceptor requestInterceptor(){\n            return new FeignRequestInterceptor();\n        }\n    }\n    ```\n\n    \n\n## RestTemplate添加全局请求头\n\n- 编写拦截器,实现`ClientHttpRequestInterceptor`接口的`intercept`方法\n\n  ```java\n  public class MyInterceptor implements ClientHttpRequestInterceptor {\n      @Override\n      public ClientHttpResponse intercept(HttpRequest httpRequest, byte[] bytes, ClientHttpRequestExecution clientHttpRequestExecution) throws IOException {\n          HttpHeaders httpHeaders=httpRequest.getHeaders();\n          ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder\n                  .getRequestAttributes();\n          HttpServletRequest request = attributes.getRequest();\n          Enumeration<String> headerNames = request.getHeaderNames();\n          if (headerNames != null) {\n              while (headerNames.hasMoreElements()) {\n                  String name = headerNames.nextElement();\n                  String values = request.getHeader(name);\n                  httpHeaders.add(name, values);\n              }\n          }\n          return clientHttpRequestExecution.execute(httpRequest,bytes);\n      }\n  }\n  ```\n\n  \n\n- 在springboot的启动类里添加`RestTemplate`\n\n  ```java\n  @SpringBootApplication\n  public class DemoApplication {\n  \n      public static void main(String[] args) {\n          SpringApplication.run(DemoApplication.class, args);\n      }\n  \n      //ioc添加RestTemplate\n      @Bean\n      public RestTemplate restTemplate(){\n          MyInterceptor myInterceptor=new MyInterceptor();\n          RestTemplate restTemplate=new RestTemplate();\n          restTemplate.setInterceptors(Collections.singletonList(myInterceptor));\n          return restTemplate;\n      }\n  \n  }\n  ```\n\n  ","slug":"spring/fegin-resttemplate-addheard","published":1,"updated":"2020-09-16T07:16:16.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03w006hw2g5y9ve8a2j","content":"<h2 id=\"Fegin添加全局请求头\"><a href=\"#Fegin添加全局请求头\" class=\"headerlink\" title=\"Fegin添加全局请求头\"></a>Fegin添加全局请求头</h2><ul>\n<li>实现RequestInterceptor接口</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 实现RequestInterceptor接口的apply方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignRequestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                String name = headerNames.nextElement();</span><br><span class=\"line\">                String values = request.getHeader(name);</span><br><span class=\"line\">                requestTemplate.header(name, values);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n<ul>\n<li><p>在<code>@FeginClient</code>注释里<code>configuration</code>所填入的类文件中添加上面的拦截器</p>\n<blockquote>\n<p>比如 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">// configuration指定的类为FeignConfig</span></span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; <span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"$&#123;TinyConfigServiceName&#125;\"</span>,path=<span class=\"string\">\"/config\"</span>,configuration = FeignConfig.class)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>在FeignConfig类中添加拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RequestInterceptor <span class=\"title\">requestInterceptor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FeignRequestInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RestTemplate添加全局请求头\"><a href=\"#RestTemplate添加全局请求头\" class=\"headerlink\" title=\"RestTemplate添加全局请求头\"></a>RestTemplate添加全局请求头</h2><ul>\n<li><p>编写拦截器,实现<code>ClientHttpRequestInterceptor</code>接口的<code>intercept</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(HttpRequest httpRequest, <span class=\"keyword\">byte</span>[] bytes, ClientHttpRequestExecution clientHttpRequestExecution)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        HttpHeaders httpHeaders=httpRequest.getHeaders();</span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                String name = headerNames.nextElement();</span><br><span class=\"line\">                String values = request.getHeader(name);</span><br><span class=\"line\">                httpHeaders.add(name, values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientHttpRequestExecution.execute(httpRequest,bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>在springboot的启动类里添加<code>RestTemplate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ioc添加RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor=<span class=\"keyword\">new</span> MyInterceptor();</span><br><span class=\"line\">        RestTemplate restTemplate=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">        restTemplate.setInterceptors(Collections.singletonList(myInterceptor));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"Fegin添加全局请求头\"><a href=\"#Fegin添加全局请求头\" class=\"headerlink\" title=\"Fegin添加全局请求头\"></a>Fegin添加全局请求头</h2><ul>\n<li>实现RequestInterceptor接口</li>\n</ul><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 实现RequestInterceptor接口的apply方法</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignRequestInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">RequestInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">apply</span><span class=\"params\">(RequestTemplate requestTemplate)</span> </span>&#123;</span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                String name = headerNames.nextElement();</span><br><span class=\"line\">                String values = request.getHeader(name);</span><br><span class=\"line\">                requestTemplate.header(name, values);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"\n\n\n<ul>\n<li><p>在<code>@FeginClient</code>注释里<code>configuration</code>所填入的类文件中添加上面的拦截器</p>\n<blockquote>\n<p>比如 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"comment\">// configuration指定的类为FeignConfig</span></span><br><span class=\"line\">&gt; </span><br><span class=\"line\">&gt; <span class=\"meta\">@FeignClient</span>(name = <span class=\"string\">\"$&#123;TinyConfigServiceName&#125;\"</span>,path=<span class=\"string\">\"/config\"</span>,configuration = FeignConfig.class)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><p>在FeignConfig类中添加拦截器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FeignConfig</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RequestInterceptor <span class=\"title\">requestInterceptor</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FeignRequestInterceptor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RestTemplate添加全局请求头\"><a href=\"#RestTemplate添加全局请求头\" class=\"headerlink\" title=\"RestTemplate添加全局请求头\"></a>RestTemplate添加全局请求头</h2><ul>\n<li><p>编写拦截器,实现<code>ClientHttpRequestInterceptor</code>接口的<code>intercept</code>方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyInterceptor</span> <span class=\"keyword\">implements</span> <span class=\"title\">ClientHttpRequestInterceptor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> ClientHttpResponse <span class=\"title\">intercept</span><span class=\"params\">(HttpRequest httpRequest, <span class=\"keyword\">byte</span>[] bytes, ClientHttpRequestExecution clientHttpRequestExecution)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        HttpHeaders httpHeaders=httpRequest.getHeaders();</span><br><span class=\"line\">        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder</span><br><span class=\"line\">                .getRequestAttributes();</span><br><span class=\"line\">        HttpServletRequest request = attributes.getRequest();</span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (headerNames != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class=\"line\">                String name = headerNames.nextElement();</span><br><span class=\"line\">                String values = request.getHeader(name);</span><br><span class=\"line\">                httpHeaders.add(name, values);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> clientHttpRequestExecution.execute(httpRequest,bytes);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<ul>\n<li><p>在springboot的启动类里添加<code>RestTemplate</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoApplication</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        SpringApplication.run(DemoApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ioc添加RestTemplate</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> RestTemplate <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyInterceptor myInterceptor=<span class=\"keyword\">new</span> MyInterceptor();</span><br><span class=\"line\">        RestTemplate restTemplate=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">        restTemplate.setInterceptors(Collections.singletonList(myInterceptor));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> restTemplate;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"【转】免费可商用，最值得收藏的10个插画素材网站","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-16T01:24:52.000Z","password":null,"summary":null,"keywords":null,"description":"现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。","_content":"\n> 转自[凯凯刘](http://liujinkai.com/2019/10/18/10-best-free-illustration/)\n\n现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\n\n## IRA Design\n网站：https://iradesign.io/\n介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式\n\n![](http://cdn.mjava.top/blog/20200116092835.png)\n\n## Absurd Design\n网站：https://absurd.design/\n介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等\n\n![](http://cdn.mjava.top/blog/20200116092907.png)\n\n## Ouch!\n网站：https://icons8.com/ouch\n介绍：很多的免费图，各种分类\n\n![](http://cdn.mjava.top/blog/20200116092945.png)\n\n## unDraw\n网站：https://undraw.co/\n内容：开源的矢量图库，各种你能想到的基本都有\n\n![](http://cdn.mjava.top/blog/20200116093011.png)\n\n## Pngtree\n网站：https://pngtree.com/\n介绍：上百万的素材资源可下载\n\n![](http://cdn.mjava.top/blog/20200116093038.png)\n\n## Drawkit\n网站：https://www.drawkit.io/\n介绍：有免费的下载资源集合\n\n![](http://cdn.mjava.top/blog/20200116093103.png)\n\n## Humaaans\n网站：[https://www.humaaans.com](https://www.humaaans.com/)\n内容：关于人物的插画图片站\n\n![](http://cdn.mjava.top/blog/20200116093137.png)\n\n## Manypixels\n网站：https://www.manypixels.co/gallery/\n介绍：建筑、人物、科技、天气、运动，商业等类型的插画\n\n![](http://cdn.mjava.top/blog/20200116093201.png)\n\n## Lukaszadam\n网站：https://lukaszadam.com/illustrations\n介绍：一些有趣的小图标的插画\n\n![](http://cdn.mjava.top/blog/20200116093226.png)\n\n## Pixabay\n网站：https://pixabay.com/illustrations/search/\n介绍：收集了很多免费的插图素材，根据关键字可任意搜索\n\n![](http://cdn.mjava.top/blog/20200116093253.png)","source":"_posts/recommend/recommend-tool-1.md","raw":"---\ntitle: 【转】免费可商用，最值得收藏的10个插画素材网站\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-16 09:24:52\npassword:\nsummary:\nkeywords:\ndescription: 现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\ntags:\n- UI\n- 推荐\ncategories:\n- Recommend\n---\n\n> 转自[凯凯刘](http://liujinkai.com/2019/10/18/10-best-free-illustration/)\n\n现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。\n\n## IRA Design\n网站：https://iradesign.io/\n介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式\n\n![](http://cdn.mjava.top/blog/20200116092835.png)\n\n## Absurd Design\n网站：https://absurd.design/\n介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等\n\n![](http://cdn.mjava.top/blog/20200116092907.png)\n\n## Ouch!\n网站：https://icons8.com/ouch\n介绍：很多的免费图，各种分类\n\n![](http://cdn.mjava.top/blog/20200116092945.png)\n\n## unDraw\n网站：https://undraw.co/\n内容：开源的矢量图库，各种你能想到的基本都有\n\n![](http://cdn.mjava.top/blog/20200116093011.png)\n\n## Pngtree\n网站：https://pngtree.com/\n介绍：上百万的素材资源可下载\n\n![](http://cdn.mjava.top/blog/20200116093038.png)\n\n## Drawkit\n网站：https://www.drawkit.io/\n介绍：有免费的下载资源集合\n\n![](http://cdn.mjava.top/blog/20200116093103.png)\n\n## Humaaans\n网站：[https://www.humaaans.com](https://www.humaaans.com/)\n内容：关于人物的插画图片站\n\n![](http://cdn.mjava.top/blog/20200116093137.png)\n\n## Manypixels\n网站：https://www.manypixels.co/gallery/\n介绍：建筑、人物、科技、天气、运动，商业等类型的插画\n\n![](http://cdn.mjava.top/blog/20200116093201.png)\n\n## Lukaszadam\n网站：https://lukaszadam.com/illustrations\n介绍：一些有趣的小图标的插画\n\n![](http://cdn.mjava.top/blog/20200116093226.png)\n\n## Pixabay\n网站：https://pixabay.com/illustrations/search/\n介绍：收集了很多免费的插图素材，根据关键字可任意搜索\n\n![](http://cdn.mjava.top/blog/20200116093253.png)","slug":"recommend/recommend-tool-1","published":1,"updated":"2020-01-16T01:32:59.820Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03x006lw2g5xjfqel1d","content":"<blockquote>\n<p>转自<a href=\"http://liujinkai.com/2019/10/18/10-best-free-illustration/\" rel=\"noopener\" target=\"_blank\">凯凯刘</a></p>\n</blockquote><p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p><a id=\"more\"></a>\n\n<h2 id=\"IRA-Design\"><a href=\"#IRA-Design\" class=\"headerlink\" title=\"IRA Design\"></a>IRA Design</h2><p>网站：<a href=\"https://iradesign.io/\" rel=\"noopener\" target=\"_blank\">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092835.png\" alt></p>\n<h2 id=\"Absurd-Design\"><a href=\"#Absurd-Design\" class=\"headerlink\" title=\"Absurd Design\"></a>Absurd Design</h2><p>网站：<a href=\"https://absurd.design/\" rel=\"noopener\" target=\"_blank\">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092907.png\" alt></p>\n<h2 id=\"Ouch\"><a href=\"#Ouch\" class=\"headerlink\" title=\"Ouch!\"></a>Ouch!</h2><p>网站：<a href=\"https://icons8.com/ouch\" rel=\"noopener\" target=\"_blank\">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092945.png\" alt></p>\n<h2 id=\"unDraw\"><a href=\"#unDraw\" class=\"headerlink\" title=\"unDraw\"></a>unDraw</h2><p>网站：<a href=\"https://undraw.co/\" rel=\"noopener\" target=\"_blank\">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093011.png\" alt></p>\n<h2 id=\"Pngtree\"><a href=\"#Pngtree\" class=\"headerlink\" title=\"Pngtree\"></a>Pngtree</h2><p>网站：<a href=\"https://pngtree.com/\" rel=\"noopener\" target=\"_blank\">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093038.png\" alt></p>\n<h2 id=\"Drawkit\"><a href=\"#Drawkit\" class=\"headerlink\" title=\"Drawkit\"></a>Drawkit</h2><p>网站：<a href=\"https://www.drawkit.io/\" rel=\"noopener\" target=\"_blank\">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093103.png\" alt></p>\n<h2 id=\"Humaaans\"><a href=\"#Humaaans\" class=\"headerlink\" title=\"Humaaans\"></a>Humaaans</h2><p>网站：<a href=\"https://www.humaaans.com/\" rel=\"noopener\" target=\"_blank\">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093137.png\" alt></p>\n<h2 id=\"Manypixels\"><a href=\"#Manypixels\" class=\"headerlink\" title=\"Manypixels\"></a>Manypixels</h2><p>网站：<a href=\"https://www.manypixels.co/gallery/\" rel=\"noopener\" target=\"_blank\">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093201.png\" alt></p>\n<h2 id=\"Lukaszadam\"><a href=\"#Lukaszadam\" class=\"headerlink\" title=\"Lukaszadam\"></a>Lukaszadam</h2><p>网站：<a href=\"https://lukaszadam.com/illustrations\" rel=\"noopener\" target=\"_blank\">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093226.png\" alt></p>\n<h2 id=\"Pixabay\"><a href=\"#Pixabay\" class=\"headerlink\" title=\"Pixabay\"></a>Pixabay</h2><p>网站：<a href=\"https://pixabay.com/illustrations/search/\" rel=\"noopener\" target=\"_blank\">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093253.png\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<blockquote>\n<p>转自<a href=\"http://liujinkai.com/2019/10/18/10-best-free-illustration/\" rel=\"noopener\" target=\"_blank\">凯凯刘</a></p>\n</blockquote><p>现在插画风格的界面越来越多，网上提供的免费插图也越来越丰富。这些插图优点是表达的内容更丰富，包括：人物、商业、运动、自然、工作、幽默等等。也更适合产品类的宣传网站或者落地页。另外，矢量图的不失真在不同尺寸的显示效果上更胜一筹。花时间整理了当前全网那些优秀的10个免费插图网站，给做产品的人们节省点查找的时间，建议收藏以备后用。这些站点的素材都是免费下载可用的，而且可以免费商用。</p>","more":"\n\n<h2 id=\"IRA-Design\"><a href=\"#IRA-Design\" class=\"headerlink\" title=\"IRA Design\"></a>IRA Design</h2><p>网站：<a href=\"https://iradesign.io/\" rel=\"noopener\" target=\"_blank\">https://iradesign.io/</a><br>介绍：可以将元素进行组合形成自己喜欢的图片，有png和svg格式</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092835.png\" alt></p>\n<h2 id=\"Absurd-Design\"><a href=\"#Absurd-Design\" class=\"headerlink\" title=\"Absurd Design\"></a>Absurd Design</h2><p>网站：<a href=\"https://absurd.design/\" rel=\"noopener\" target=\"_blank\">https://absurd.design/</a><br>介绍：有些荒诞风格的矢量图，适用网站的落地页、APP等</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092907.png\" alt></p>\n<h2 id=\"Ouch\"><a href=\"#Ouch\" class=\"headerlink\" title=\"Ouch!\"></a>Ouch!</h2><p>网站：<a href=\"https://icons8.com/ouch\" rel=\"noopener\" target=\"_blank\">https://icons8.com/ouch</a><br>介绍：很多的免费图，各种分类</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116092945.png\" alt></p>\n<h2 id=\"unDraw\"><a href=\"#unDraw\" class=\"headerlink\" title=\"unDraw\"></a>unDraw</h2><p>网站：<a href=\"https://undraw.co/\" rel=\"noopener\" target=\"_blank\">https://undraw.co/</a><br>内容：开源的矢量图库，各种你能想到的基本都有</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093011.png\" alt></p>\n<h2 id=\"Pngtree\"><a href=\"#Pngtree\" class=\"headerlink\" title=\"Pngtree\"></a>Pngtree</h2><p>网站：<a href=\"https://pngtree.com/\" rel=\"noopener\" target=\"_blank\">https://pngtree.com/</a><br>介绍：上百万的素材资源可下载</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093038.png\" alt></p>\n<h2 id=\"Drawkit\"><a href=\"#Drawkit\" class=\"headerlink\" title=\"Drawkit\"></a>Drawkit</h2><p>网站：<a href=\"https://www.drawkit.io/\" rel=\"noopener\" target=\"_blank\">https://www.drawkit.io/</a><br>介绍：有免费的下载资源集合</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093103.png\" alt></p>\n<h2 id=\"Humaaans\"><a href=\"#Humaaans\" class=\"headerlink\" title=\"Humaaans\"></a>Humaaans</h2><p>网站：<a href=\"https://www.humaaans.com/\" rel=\"noopener\" target=\"_blank\">https://www.humaaans.com</a><br>内容：关于人物的插画图片站</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093137.png\" alt></p>\n<h2 id=\"Manypixels\"><a href=\"#Manypixels\" class=\"headerlink\" title=\"Manypixels\"></a>Manypixels</h2><p>网站：<a href=\"https://www.manypixels.co/gallery/\" rel=\"noopener\" target=\"_blank\">https://www.manypixels.co/gallery/</a><br>介绍：建筑、人物、科技、天气、运动，商业等类型的插画</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093201.png\" alt></p>\n<h2 id=\"Lukaszadam\"><a href=\"#Lukaszadam\" class=\"headerlink\" title=\"Lukaszadam\"></a>Lukaszadam</h2><p>网站：<a href=\"https://lukaszadam.com/illustrations\" rel=\"noopener\" target=\"_blank\">https://lukaszadam.com/illustrations</a><br>介绍：一些有趣的小图标的插画</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093226.png\" alt></p>\n<h2 id=\"Pixabay\"><a href=\"#Pixabay\" class=\"headerlink\" title=\"Pixabay\"></a>Pixabay</h2><p>网站：<a href=\"https://pixabay.com/illustrations/search/\" rel=\"noopener\" target=\"_blank\">https://pixabay.com/illustrations/search/</a><br>介绍：收集了很多免费的插图素材，根据关键字可任意搜索</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200116093253.png\" alt></p>\n"},{"title":"吐血整理Git常用命令","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:27:25.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## Git常用命令\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](http://cdn.mjava.top/blog/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![](http://cdn.mjava.top/blog/20200605002904.jpg)","source":"_posts/tool/git-tool-command.md","raw":"---\ntitle: 吐血整理Git常用命令\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:27:25\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Git\ncategories:\n- Tool\n---\n\n## Git常用命令\n\n## Git简介\n\nGit 是用于 Linux[内核](https://baike.baidu.com/item/内核)开发的[版本控制](https://baike.baidu.com/item/版本控制)工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使[源代码](https://baike.baidu.com/item/源代码)的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。\n\ngit对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死\n\n\n\n## git结构\n\n> 网上有 我就不画了\n\n![git结构图](http://cdn.mjava.top/blog/20200605001853.png)\n\n\n\n- workspace    相当于就是我们的本地电脑上的文件\n\n- Index    缓存区\n- Repository    本地仓库\n- Remote    远程仓库(github/gitlab/gitee)\n\n\n\n## git命令\n\ngit官方提供的命令多达几百个,可是我们日常却用不到这么多\n\n所以我就整理了一下日常使用的命令\n\n现在关注微信公招:`灰色Code`\n\n回复关键字:`git`\n\n就可以获取思维导图高清图片及导图源地址\n\n![](http://cdn.mjava.top/blog/20200605002904.jpg)","slug":"tool/git-tool-command","published":1,"updated":"2020-06-22T08:28:15.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx03y006ow2g53mrjys7u","content":"<h2 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h2><h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/内核\" rel=\"noopener\" target=\"_blank\">内核</a>开发的<a href=\"https://baike.baidu.com/item/版本控制\" rel=\"noopener\" target=\"_blank\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/源代码\" rel=\"noopener\" target=\"_blank\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p><a id=\"more\"></a>\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github/gitlab/gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200605002904.jpg\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"Git常用命令\"><a href=\"#Git常用命令\" class=\"headerlink\" title=\"Git常用命令\"></a>Git常用命令</h2><h2 id=\"Git简介\"><a href=\"#Git简介\" class=\"headerlink\" title=\"Git简介\"></a>Git简介</h2><p>Git 是用于 Linux<a href=\"https://baike.baidu.com/item/内核\" rel=\"noopener\" target=\"_blank\">内核</a>开发的<a href=\"https://baike.baidu.com/item/版本控制\" rel=\"noopener\" target=\"_blank\">版本控制</a>工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使<a href=\"https://baike.baidu.com/item/源代码\" rel=\"noopener\" target=\"_blank\">源代码</a>的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p>","more":"\n<p>git对于很多人来说,真的是又爱又恨,用的好可以提示开发效率;用不好,解决各种冲突就要累的你半死</p>\n<h2 id=\"git结构\"><a href=\"#git结构\" class=\"headerlink\" title=\"git结构\"></a>git结构</h2><blockquote>\n<p>网上有 我就不画了</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200605001853.png\" alt=\"git结构图\"></p>\n<ul>\n<li><p>workspace    相当于就是我们的本地电脑上的文件</p>\n</li>\n<li><p>Index    缓存区</p>\n</li>\n<li><p>Repository    本地仓库</p>\n</li>\n<li><p>Remote    远程仓库(github/gitlab/gitee)</p>\n</li>\n</ul>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>git官方提供的命令多达几百个,可是我们日常却用不到这么多</p>\n<p>所以我就整理了一下日常使用的命令</p>\n<p>现在关注微信公招:<code>灰色Code</code></p>\n<p>回复关键字:<code>git</code></p>\n<p>就可以获取思维导图高清图片及导图源地址</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200605002904.jpg\" alt></p>\n"},{"title":"RestTemplate简单使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-20T09:32:18.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 前言\n\n​\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](http://cdn.mjava.top/blog/20191120165138.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](http://cdn.mjava.top/blog/20191120165302.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","source":"_posts/spring/spring-boot-resttemplate-example.md","raw":"---\ntitle: RestTemplate简单使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-20 17:32:18\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n - SpringBoot\ncategories:\n - Spring\n---\n\n\n\n## 前言\n\n​\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](http://cdn.mjava.top/blog/20191120165138.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](http://cdn.mjava.top/blog/20191120165302.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","slug":"spring/spring-boot-resttemplate-example","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx040006sw2g55py1dki1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    本文只讲常用的<strong>GET</strong> 和<strong>POST</strong>请求,其他类型的请求(如<strong>PUT</strong>，<strong>PATCH</strong>)请求方式都差不多，有兴趣的可以查看RestTemplate源码。</p><h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><blockquote>\n<p>GET官方给了<strong>getForEntity</strong>和<strong>getForObject</strong>两种种方法，每个方法又有三个重载方法</p>\n</blockquote><h3 id=\"官方源码接口\"><a href=\"#官方源码接口\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure><a id=\"more\"></a>\n\n\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"API接口\"><a href=\"#API接口\" class=\"headerlink\" title=\"API接口\"></a>API接口</h4><blockquote>\n<p> 首先我写了两个接口供RestTemplate调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"name:\"</span>,<span class=\"string\">\"Mr.Zheng\"</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"tag:\"</span>,<span class=\"string\">\"Good\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test2</span><span class=\"params\">(@PathVariable String name)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"name:\"</span>,name);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"tag:\"</span>,<span class=\"string\">\"Good\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForObject\"><a href=\"#getForObject\" class=\"headerlink\" title=\"getForObject\"></a>getForObject</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">       URI uri=URI.create(<span class=\"string\">\"http://localhost:8090/test\"</span>);</span><br><span class=\"line\">       String response=template.getForObject(uri, String.class);</span><br><span class=\"line\">       System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//url带参数请求 </span></span><br><span class=\"line\">       String response2=template.getForObject(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,<span class=\"string\">\"hui1\"</span>);</span><br><span class=\"line\">       System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">       Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"hui2\"</span>);</span><br><span class=\"line\">       String reponse3=template.getForObject(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,param);</span><br><span class=\"line\">       System.out.println(reponse3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"Mr.Zheng\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui1\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui2\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForEntity\"><a href=\"#getForEntity\" class=\"headerlink\" title=\"getForEntity\"></a>getForEntity</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(<span class=\"string\">\"http://localhost:8090/test\"</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response=template.getForEntity(uri, String.class);</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response2=template.getForEntity(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,<span class=\"string\">\"hui1\"</span>);</span><br><span class=\"line\">    System.out.println(response2.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"hui2\"</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; reponse3=template.getForEntity(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,param);</span><br><span class=\"line\">    System.out.println(reponse3.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"Mr.Zheng\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui1\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui2\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>可以看到<strong>getForEntity</strong>和<strong>getForObject</strong>的使用方法差不多，他们的区别就是</p>\n<ul>\n<li>getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等</li>\n</ul>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><blockquote>\n<p>POST官方给了<strong>postForLocation</strong>,<strong>postForObject</strong>,<strong>postForEntity</strong>三种方法，每种又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口-1\"><a href=\"#官方源码接口-1\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(String url, @Nullable Object request, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(String url, @Nullable Object request, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(URI url, @Nullable Object request)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API接口-1\"><a href=\"#API接口-1\" class=\"headerlink\" title=\"API接口\"></a>API接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">(@RequestBody JSONObject param)</span></span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"param:&#123;&#125;\"</span>,param.toJSONString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">(@RequestBody JSONObject param,@PathVariable String urlParam)</span></span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"param:&#123;&#125;\"</span>,param);</span><br><span class=\"line\">        param.put(<span class=\"string\">\"urlParam\"</span>,urlParam);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForObject\"><a href=\"#postForObject\" class=\"headerlink\" title=\"postForObject\"></a>postForObject</h3><h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">\"http://localhost:8090\"</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"tag\"</span>,<span class=\"string\">\"this is post request!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(baseURL+<span class=\"string\">\"/test\"</span>);</span><br><span class=\"line\">    String response=template.postForObject(uri,param,String.class);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    String response2=template.postForObject(baseURL+<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>,param,String.class,<span class=\"string\">\"this is urlParam\"</span>);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; mapParam=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    mapParam.put(<span class=\"string\">\"urlParam\"</span>,<span class=\"string\">\"this is map param!!\"</span>);</span><br><span class=\"line\">    String reponse3=template.postForObject(baseURL+<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>,param,String.class,mapParam);</span><br><span class=\"line\">    System.out.println(reponse3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>,<span class=\"string\">\"urlParam\"</span>:<span class=\"string\">\"this is urlParam\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>,<span class=\"string\">\"urlParam\"</span>:<span class=\"string\">\"this is map param!!\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForEntity\"><a href=\"#postForEntity\" class=\"headerlink\" title=\"postForEntity\"></a>postForEntity</h3><blockquote>\n<p>postForEntity和postForObject用法类似，具体这里就写了。</p>\n</blockquote>\n<h3 id=\"postForLocation\"><a href=\"#postForLocation\" class=\"headerlink\" title=\"postForLocation\"></a>postForLocation</h3><blockquote>\n<p>这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下</p>\n</blockquote>\n<h4 id=\"新写个API接口\"><a href=\"#新写个API接口\" class=\"headerlink\" title=\"新写个API接口\"></a>新写个API接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UriTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(UriTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/uri\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uriTest</span><span class=\"params\">(@RequestBody JSONObject param, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印上传的参数</span></span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"requestParam:&#123;&#125;\"</span>,param);</span><br><span class=\"line\">            <span class=\"comment\">//跳转百度</span></span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            LOG.info(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">\"http://localhost:8090\"</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"info\"</span>,<span class=\"string\">\"this is postForLocation test!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URI response2=template.postForLocation(baseURL+<span class=\"string\">\"/uri\"</span>,param);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-3\"><a href=\"#结果-3\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"http://cdn.mjava.top/blog/20191120165138.png\" alt=\"代码运行结果\"></p>\n<h4 id=\"服务端日志\"><a href=\"#服务端日志\" class=\"headerlink\" title=\"服务端日志\"></a>服务端日志</h4><p><img src=\"http://cdn.mjava.top/blog/20191120165302.png\" alt=\"服务端日志\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>postForObject</strong>和<strong>postForEntity</strong>两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而<strong>postForLocation</strong>方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>​    本文只讲常用的<strong>GET</strong> 和<strong>POST</strong>请求,其他类型的请求(如<strong>PUT</strong>，<strong>PATCH</strong>)请求方式都差不多，有兴趣的可以查看RestTemplate源码。</p><h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><blockquote>\n<p>GET官方给了<strong>getForEntity</strong>和<strong>getForObject</strong>两种种方法，每个方法又有三个重载方法</p>\n</blockquote><h3 id=\"官方源码接口\"><a href=\"#官方源码接口\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">getForObject</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Object... uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(String url, Class&lt;T&gt; responseType, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">getForEntity</span><span class=\"params\">(URI url, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure>","more":"\n\n\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><h4 id=\"API接口\"><a href=\"#API接口\" class=\"headerlink\" title=\"API接口\"></a>API接口</h4><blockquote>\n<p> 首先我写了两个接口供RestTemplate调用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"name:\"</span>,<span class=\"string\">\"Mr.Zheng\"</span>);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"tag:\"</span>,<span class=\"string\">\"Good\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/test/&#123;name&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test2</span><span class=\"params\">(@PathVariable String name)</span></span>&#123;</span><br><span class=\"line\">        JSONObject jsonObject=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"name:\"</span>,name);</span><br><span class=\"line\">        jsonObject.put(<span class=\"string\">\"tag:\"</span>,<span class=\"string\">\"Good\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonObject;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForObject\"><a href=\"#getForObject\" class=\"headerlink\" title=\"getForObject\"></a>getForObject</h4><h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">       RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">       URI uri=URI.create(<span class=\"string\">\"http://localhost:8090/test\"</span>);</span><br><span class=\"line\">       String response=template.getForObject(uri, String.class);</span><br><span class=\"line\">       System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//url带参数请求 </span></span><br><span class=\"line\">       String response2=template.getForObject(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,<span class=\"string\">\"hui1\"</span>);</span><br><span class=\"line\">       System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">       Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">       param.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"hui2\"</span>);</span><br><span class=\"line\">       String reponse3=template.getForObject(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,param);</span><br><span class=\"line\">       System.out.println(reponse3);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果:\"></a>结果:</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"Mr.Zheng\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui1\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui2\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"getForEntity\"><a href=\"#getForEntity\" class=\"headerlink\" title=\"getForEntity\"></a>getForEntity</h4><h5 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(<span class=\"string\">\"http://localhost:8090/test\"</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response=template.getForEntity(uri, String.class);</span><br><span class=\"line\">    System.out.println(response.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    ResponseEntity&lt;String&gt; response2=template.getForEntity(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,<span class=\"string\">\"hui1\"</span>);</span><br><span class=\"line\">    System.out.println(response2.getBody());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; param=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"hui2\"</span>);</span><br><span class=\"line\">    ResponseEntity&lt;String&gt; reponse3=template.getForEntity(<span class=\"string\">\"http://localhost:8090/test/&#123;name&#125;\"</span>,String.class,param);</span><br><span class=\"line\">    System.out.println(reponse3.getBody());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"结果-1\"><a href=\"#结果-1\" class=\"headerlink\" title=\"结果\"></a>结果</h5><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"Mr.Zheng\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui1\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"name:\"</span>:<span class=\"string\">\"hui2\"</span>,<span class=\"string\">\"tag:\"</span>:<span class=\"string\">\"Good\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p>可以看到<strong>getForEntity</strong>和<strong>getForObject</strong>的使用方法差不多，他们的区别就是</p>\n<ul>\n<li>getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等</li>\n</ul>\n<h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2><blockquote>\n<p>POST官方给了<strong>postForLocation</strong>,<strong>postForObject</strong>,<strong>postForEntity</strong>三种方法，每种又有三个重载方法</p>\n</blockquote>\n<h3 id=\"官方源码接口-1\"><a href=\"#官方源码接口-1\" class=\"headerlink\" title=\"官方源码接口\"></a>官方源码接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(String url, @Nullable Object request, Object... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(String url, @Nullable Object request, Map&lt;String, ?&gt; uriVariables)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\"><span class=\"function\">URI <span class=\"title\">postForLocation</span><span class=\"params\">(URI url, @Nullable Object request)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Nullable</span></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">T <span class=\"title\">postForObject</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tObject... uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(String url, @Nullable Object request, Class&lt;T&gt; responseType,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">\t\tMap&lt;String, ?&gt; uriVariables)</span> <span class=\"keyword\">throws</span> RestClientException</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;T&gt; <span class=\"function\">ResponseEntity&lt;T&gt; <span class=\"title\">postForEntity</span><span class=\"params\">(URI url, @Nullable Object request, Class&lt;T&gt; responseType)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t<span class=\"keyword\">throws</span> RestClientException</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"API接口-1\"><a href=\"#API接口-1\" class=\"headerlink\" title=\"API接口\"></a>API接口</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Test</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(Test.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">(@RequestBody JSONObject param)</span></span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"param:&#123;&#125;\"</span>,param.toJSONString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> JSONObject <span class=\"title\">test</span><span class=\"params\">(@RequestBody JSONObject param,@PathVariable String urlParam)</span></span>&#123;</span><br><span class=\"line\">        LOG.info(<span class=\"string\">\"param:&#123;&#125;\"</span>,param);</span><br><span class=\"line\">        param.put(<span class=\"string\">\"urlParam\"</span>,urlParam);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> param;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForObject\"><a href=\"#postForObject\" class=\"headerlink\" title=\"postForObject\"></a>postForObject</h3><h4 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">\"http://localhost:8090\"</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"tag\"</span>,<span class=\"string\">\"this is post request!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用URI请求</span></span><br><span class=\"line\">    URI uri=URI.create(baseURL+<span class=\"string\">\"/test\"</span>);</span><br><span class=\"line\">    String response=template.postForObject(uri,param,String.class);</span><br><span class=\"line\">    System.out.println(response);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//url带参数请求</span></span><br><span class=\"line\">    String response2=template.postForObject(baseURL+<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>,param,String.class,<span class=\"string\">\"this is urlParam\"</span>);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//当url参数过多可以用map</span></span><br><span class=\"line\">    Map&lt;String,String&gt; mapParam=<span class=\"keyword\">new</span> HashMap&lt;&gt;();</span><br><span class=\"line\">    mapParam.put(<span class=\"string\">\"urlParam\"</span>,<span class=\"string\">\"this is map param!!\"</span>);</span><br><span class=\"line\">    String reponse3=template.postForObject(baseURL+<span class=\"string\">\"/test/&#123;urlParam&#125;\"</span>,param,String.class,mapParam);</span><br><span class=\"line\">    System.out.println(reponse3);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-2\"><a href=\"#结果-2\" class=\"headerlink\" title=\"结果\"></a>结果</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>,<span class=\"string\">\"urlParam\"</span>:<span class=\"string\">\"this is urlParam\"</span>&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">\"tag\"</span>:<span class=\"string\">\"this is post request!!\"</span>,<span class=\"string\">\"urlParam\"</span>:<span class=\"string\">\"this is map param!!\"</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"postForEntity\"><a href=\"#postForEntity\" class=\"headerlink\" title=\"postForEntity\"></a>postForEntity</h3><blockquote>\n<p>postForEntity和postForObject用法类似，具体这里就写了。</p>\n</blockquote>\n<h3 id=\"postForLocation\"><a href=\"#postForLocation\" class=\"headerlink\" title=\"postForLocation\"></a>postForLocation</h3><blockquote>\n<p>这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下</p>\n</blockquote>\n<h4 id=\"新写个API接口\"><a href=\"#新写个API接口\" class=\"headerlink\" title=\"新写个API接口\"></a>新写个API接口</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UriTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Logger LOG= LoggerFactory.getLogger(UriTest.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/uri\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uriTest</span><span class=\"params\">(@RequestBody JSONObject param, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//打印上传的参数</span></span><br><span class=\"line\">            LOG.info(<span class=\"string\">\"requestParam:&#123;&#125;\"</span>,param);</span><br><span class=\"line\">            <span class=\"comment\">//跳转百度</span></span><br><span class=\"line\">            response.sendRedirect(<span class=\"string\">\"https://www.baidu.com\"</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            LOG.info(e.getMessage(),e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">restTemplate</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    RestTemplate template=<span class=\"keyword\">new</span> RestTemplate();</span><br><span class=\"line\">    String baseURL=<span class=\"string\">\"http://localhost:8090\"</span>;</span><br><span class=\"line\">    JSONObject param=<span class=\"keyword\">new</span> JSONObject();</span><br><span class=\"line\">    param.put(<span class=\"string\">\"info\"</span>,<span class=\"string\">\"this is postForLocation test!!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    URI response2=template.postForLocation(baseURL+<span class=\"string\">\"/uri\"</span>,param);</span><br><span class=\"line\">    System.out.println(response2);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"结果-3\"><a href=\"#结果-3\" class=\"headerlink\" title=\"结果\"></a>结果</h4><p><img src=\"http://cdn.mjava.top/blog/20191120165138.png\" alt=\"代码运行结果\"></p>\n<h4 id=\"服务端日志\"><a href=\"#服务端日志\" class=\"headerlink\" title=\"服务端日志\"></a>服务端日志</h4><p><img src=\"http://cdn.mjava.top/blog/20191120165302.png\" alt=\"服务端日志\"></p>\n<h3 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h3><p><strong>postForObject</strong>和<strong>postForEntity</strong>两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而<strong>postForLocation</strong>方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；</p>\n"},{"title":"【源码解析】想了解LinkedList？看这篇文章就对了","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-04T16:21:43.000Z","password":null,"summary":null,"keywords":null,"description":"LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...","_content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","source":"_posts/java/java-linkedlist-source-1.md","raw":"---\ntitle: 【源码解析】想了解LinkedList？看这篇文章就对了\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-05 00:21:43\npassword:\nsummary:\nkeywords:\ndescription: LinkedList由于实现了Deque这个接口，所以可以当栈和队列使用。不过一般要用栈或队列的时候推荐使用ArrayDeque,所以这里就不讲LinkedList的栈和队列功能了🌚。还是和上篇ArrayList一样，讲些常用的方法...\ntags:\n- Java\n- 源码分析\n- LinkedList\ncategories:\n- Java\n---\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213058.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104164627.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104170249.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104172851.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104174143.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183636.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183853.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183939.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200109160648.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175255.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175907.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104185743.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190000.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190144.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104191607.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104194247.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104205658.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104222250.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215947.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104220851.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104223708.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224213.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","slug":"java/java-linkedlist-source-1","published":1,"updated":"2020-01-09T08:18:24.464Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04e007lw2g5wzsneqwa","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213058.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104164627.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104170249.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104172851.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104174143.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183636.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183853.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183939.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200109160648.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175255.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175907.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104185743.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190000.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190144.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104191607.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104194247.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104205658.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104222250.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215947.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104220851.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104223708.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224213.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬。</p>\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">本文基于JDK1.8</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>由于实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口，所以可以当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>使用。不过一般要用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>或<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>的时候推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,所以这里就不讲<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>的栈和队列功能了🌚。还是和上篇<a href=\"https://mjava.top/java/java-arraylist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>一样，讲些常用的方法。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部是由<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">双链表</strong>组成的，里面存放着一个个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>又包含三个元素(<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code>,<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>):</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据</li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">链表的第一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">prev</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，最后个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">next</code>为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code></p>\n</blockquote>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">我简单的画了一张图，可以看下</p>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个prev和next并不是指向null，因为内存中没有为null分配空间，这边是表示是prev和next为null；</p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213058.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">本文内容</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104164627.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">相比于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Arraylist</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>内部变量就少得多，就只有三个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>存这当前元素的个数，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">first</code>指向链表的第一个，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">last</code>指向列表的最后一个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104170249.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造方法</span></h3>\n<h4 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br></code></pre>\n<h4 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">无参构造只是初始化了数据，并未做任何操作<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">(初始化  size=0  first=null   last=null)</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104172851.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造方法</span></h3>\n<h4 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;oldList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>List&lt;String&gt;&nbsp;newList=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;(oldList);<br></code></pre>\n<h4 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">由于篇幅有限，addAll()方法这边就不讲了，后面另写文章再讲，里面的操作就相当于把集合里的元素复制到新集合里面。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104174143.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hget\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hgetintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">get(int index)</span></h3>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里先讲get()方法，然后再讲add()方法，原因是插入方法里用到的调用的方法个get()方法里是一样的</p>\n</blockquote>\n<h4 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰2\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰3\"</span>);<br>list.get(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>);<br></code></pre>\n<h4 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183636.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkElementIndex(int index)</strong>检查越界</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183853.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104183939.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">node(int index)</strong>查找Node</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200109160648.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hadd\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"haddee\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(E e)</span></h3>\n<h4 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175255.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkLast(E e)</strong>连接最后一个元素</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104175907.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">Node&lt;E&gt;</strong>内部类</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">就像开头说的，每个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>里有三个，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">prev:</strong>指向前一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">item:</strong>存放存入的数据，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">next:</strong>指向下一个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Node</code></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">Node</span>&lt;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">E</span>&gt;&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;item;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;Node&lt;E&gt;&nbsp;prev;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Node(Node&lt;E&gt;&nbsp;prev,&nbsp;E&nbsp;element,&nbsp;Node&lt;E&gt;&nbsp;next)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.item&nbsp;=&nbsp;element;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.next&nbsp;=&nbsp;next;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">this</span>.prev&nbsp;=&nbsp;prev;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre>\n<h4 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">第一次添加时的流程示意图</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224556.jpg\" alt=\"第一次添加时的流程示意图\" title=\"第一次添加时的流程示意图\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">第一次添加时的流程示意图</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">不是第一次添加</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213234.jpg\" alt=\"不是第一次添加\" title=\"不是第一次添加\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">不是第一次添加</figcaption></figure>\n<h3 id=\"haddintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">add(int index, E element)</span></h3>\n<h4 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.add(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hk\"</span>);<br></code></pre>\n<h4 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码分析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">这边插入元素时，先判断插入的位置是不是尾部，如果不尾部的话，先调用和get()那个一样的方法，来查找要插入位置的当前元素，然后进行插入操作</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104185743.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">checkPositionIndex(int index)</strong>检查是否越界</li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个检查越界的方法个get()检查越界的方法有点不同，它是可以等于<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">size</code>的，因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">linkedList</code>的索引设计也是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">0</code>开始的，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">所以size永远比索引大1</strong></p>\n</blockquote>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190000.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104190144.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">linkBefore(E e, Node&lt;E&gt; succ)</strong>插入元素操作</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104191607.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-17\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面说的可能有点绕，看看流程图就明白了，哈哈</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为第一个</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213757.jpg\" alt=\"添加的位置为第一个\" title=\"添加的位置为第一个\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为第一个</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">添加的位置为中间</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104213437.jpg\" alt=\"添加的位置为中间\" title=\"添加的位置为中间\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">添加的位置为中间</figcaption></figure>\n<h2 id=\"hset\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hsetintindexeelement\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">set(int index, E element)</span></h3>\n<h4 id=\"h-18\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.set(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>,<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br></code></pre>\n<h4 id=\"h-19\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里大多调用的是和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">get()</code>里一样的方法</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104194247.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hremove\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hremoveintindex\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(int index)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">按索引删除，先找到被删除的Node，然后解除相关链接，设置Node里三大元素为null，删除后返回被删除Node里的item</p>\n<h4 id=\"h-20\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"灰\"</span>);<br>list.remove(<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br></code></pre>\n<h4 id=\"h-21\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104205658.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">unlink(Node&lt;E&gt; x)</strong>解除Node的连接，然后返回被解除链接的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">item</code></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104222250.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h4 id=\"h-22\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">流程图</span></h4>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">第一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215754.jpg\" alt=\"删除的是链表里的第一个元素\" title=\"删除的是链表里的第一个元素\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\">删除的是链表里的第一个元素</figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">中间元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104215947.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\">删除的是链表里的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">最后一个元素</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104220851.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"hremoveobjecto\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">remove(Object o)</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个删除就比较<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">慢</code>了，它是从头开始一一对比，时间复杂度为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">O(n)</code>，这个删除也是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">只删除最早添加的数据</strong></p>\n<h4 id=\"h-23\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.remove(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br></code></pre>\n<h4 id=\"h-24\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">unlink()</code>方法就是上面讲的那个</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104223708.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"hclear-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span></h3>\n<h4 id=\"h-25\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">代码实现</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\">List&lt;String&gt;&nbsp;list=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;LinkedList&lt;&gt;();<br>list.add(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"hui\"</span>);<br>list.clear();<br></code></pre>\n<h4 id=\"h-26\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">源码解析</span></h4>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200104224213.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-27\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>里删除，添加操作一般就两个步骤，变换前后Node指向的地址，删除操作把对应Node里的三个变量都设置为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>，方便<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">GC</code>回收。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">如果要删除元素时，最好选择传入索引删除，他比直接传入要删除的对象的方法要快很多</p></div>"},{"title":"【源码解析】你真的了解ArrayDeque嘛？","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-01-08T06:00:51.000Z","password":null,"summary":null,"keywords":null,"description":"LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。","_content":"\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","source":"_posts/java/java-arraydeque-source-1.md","raw":"---\ntitle: 【源码解析】你真的了解ArrayDeque嘛？\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-01-08 14:00:51\npassword:\nsummary:\nkeywords:\ndescription: LinkedList和ArrayDeque都是通过实现了Deque这个接口来获得队列和栈的功能。而Deque这个接口通过继承Queue这个接口来取得队列功能，然后在这个基础进行扩展，实现了双端队列，由此可以获得栈的功能。为了空间能得到充分利用，ArrayDeque使用了循环队列；还有LinkedList可以插入null值，而ArrayDeque是不能插入null的。\ntags:\n- Java\n- 源码解析\n- ArrayDeque\ncategories:\n- Java\n---\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104246.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104215.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104300.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107134323.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107232905.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107235523.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003104.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108095155.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108103710.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108112208.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114243.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114844.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108131919.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108133154.jpg\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108134034.png\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","slug":"java/java-arraydeque-source-1","published":1,"updated":"2020-01-09T08:14:16.745Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04f007mw2g5dxd1kgkw","content":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104246.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104215.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104300.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107134323.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107232905.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107235523.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003104.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003710.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108095155.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108103710.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108112208.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114243.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114844.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108131919.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108133154.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108134034.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"","more":"<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">积千里跬步，汇万里江河；每天进步一点点，终有一天将成大佬</p>\n</blockquote>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">前言</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上篇文章说<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>也可以实现<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能，但是我们一般要用队列功能的话推荐使用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>,因为他层是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">数组</strong>，而队列和栈都是只要<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">操作头部或尾部</strong>，所以这样的话数组的性能就比链表快一点。</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>都是通过实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口来获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">队列</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Deque</code>这个接口通过继承<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">Queue</code>这个接口来取得队列功能，然后在这个基础进行扩展，实现了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">双端队列</code>，由此可以获得<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">栈</code>的功能。为了空间能得到充分利用，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>使用了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>；还有<a href=\"https://mjava.top/java/java-linkedlist-source-1/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">LinkedList</a>可以插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值，而<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的。</p>\n<h2 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是双端队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">简单来说，就是两端都可以操作的队列（🌚说了和没说一样…）。哈哈，还是看图吧</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">一般队列是这样的：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104246.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">双端队列是这样的</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104215.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">总的来说，普通队列只可在头部删除元素和尾部添加元素，而双端队列头部和尾部都可以添加和删除元素</strong></p>\n<h2 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">什么是循环队列？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">不如说你定了个5容量大小的数组，你第一次插入的位置是下标为2，当你添加第4个元素的时候，他不会进行扩容，而是通过<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针</strong>进行对比，然后把数据插入到下标为0的位置上。当<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头尾指针相等时</strong>，表示这个队列数组已经满了，这时才会扩容。</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108104300.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这里的数组从上向下的顺序，有人会问为什么头尾指针都指向第三个方格呢？因为这边演示的是第一个元素插入到下标为2的位置嘛。。当然，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>是从0开始的，所以初始化时头尾指针都是指向下标为0的位置上。</p>\n</blockquote>\n<h2 id=\"hdeque\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">Deque有什么？</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">话不多说，看图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107134323.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>具体实现的方法主要在蓝色的方框里，其他两个颜色的方框都是通过调用蓝色方框里的这些方法来实现相关功能的，可以再看一张我画的脑图：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107232905.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这边队列的每种功能都有两个方法，其中<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">remove()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">element()</code>如果操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">offer()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">poll()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peek()</code>操作失败会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">返回null或者false</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">其实真正用到的就<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">深红色方框</strong>里写的这些方法，所以本文我就说这四个方法，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addLast()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">pollFirst</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">getFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addFirst()</code>，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">peekFirst</code>；</p>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">内部变量</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">ArrayDeque内部就只有4个变量，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">对象数组element[]</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">头指针head</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">尾指针tail</strong>，<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">MIN_INITIAL_CAPACITY表示最小初始化容量为8</strong></p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200107235523.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">构造方法</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">构造方法和其他集合一样，有<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">有参构造</strong>和<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">无参构造</strong></p>\n<h3 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">无参构造</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">很简单，直接初始化一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">容量为16</strong>的对象数组</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">16</span>];<br>}<br></code></pre>\n<h3 id=\"h-6\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">有参构造</span></h3>\n<h4 id=\"hint\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入参数为int数</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(numElements);<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">allocateElements(int numElements)</strong>分配空数组以容纳给定数量的元素。</li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">allocateElements</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;numElements)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;elements&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;Object[calculateSize(numElements)];<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">calculateSize(int numElements)</strong>调整传入的值大小</li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003104.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">上面的算法中用到了位运算，如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章。这里把数值设置成2的n次方(是整数次)，是为了满足下面要说的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">循环队列</code>这个算法</strong></p>\n<h4 id=\"h-7\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.2em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">传入的参数为集合对象</span></h4>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">ArrayDeque</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">(Collection&lt;?&nbsp;extends&nbsp;E&gt;&nbsp;c)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;allocateElements(c.size());<br>&nbsp;&nbsp;&nbsp;&nbsp;addAll(c);<br>}<br></code></pre>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">第一步调用了和上面一样的方法，这里多了个<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">addAll()</code>方法</p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">addAll(Collection<!--? extends E--> c)</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108003710.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这边复制时并没有用和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样的<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">System.arraycopy()</code>方法，而是采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">for循环</code>来调用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法进行一个一个添加的；为什么这么做呢？因为<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>和其他集合不一样，它里面是不能有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值的，而其他集合里面有的是可以传<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>的，所以这边采用<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>一个一个的加，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">add()</code>方法如果传入的值为空的话，就会<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">报异常</strong>；（add()实际调用的是addLast()，下面再讲）</p>\n</blockquote>\n<h2 id=\"haddlast\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addLast()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-8\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这个方法的意思是添加数据到尾部，下面图片方框中的位与算法是实现循环队列这个功能的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">核心算法</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">还记得上面初始化时候，不管传入的是什么数值，最后出来的都是<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>(整数次)方。这个算法就是<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">举一些例子：当<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">8</span></span></span></span>，<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span><span class=\"mrel\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">=</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2777777777777778em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">7</span></span></span></span></p>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">4&amp;7=4    9&amp;7=1    22&amp;7=6</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">0&amp;7=0</span></li>\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">-1&amp;7=7    -2&amp;7=6    -8&amp;7=0</span></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108095155.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">doubleCapacity()</strong>扩容为原来的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></li>\n</ul>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108103710.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h3 id=\"h-9\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">方便理解，我画下上扩容的流程图，比如head在中间：</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108112208.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hpollfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">pollFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">移除头部数据</p>\n<h3 id=\"h-10\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114243.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">删除的时候并没有像<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>一样移动数据，而只是移动了<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的位置</p>\n</blockquote>\n<h3 id=\"h-11\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108114844.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hgetfirstpeekfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">getFirst()和peekFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这两个方法都是一样的，都是直接返回<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的数据，区别就是一个会抛异常，一个不会</p>\n<h3 id=\"h-12\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码分析</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">getFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">getFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); word-wrap: inherit !important; word-break: inherit !important;\">\"unchecked\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;E&nbsp;result&nbsp;=&nbsp;(E)&nbsp;elements[head];<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">if</span>&nbsp;(result&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">null</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;NoSuchElementException();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;result;<br>}<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">peekFirst()</strong></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;E&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">peekFirst</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//&nbsp;elements[head]&nbsp;is&nbsp;null&nbsp;if&nbsp;deque&nbsp;empty</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(E)&nbsp;elements[head];<br>}<br></code></pre>\n<h2 id=\"haddfirst\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">addFirst()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-13\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108131919.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">这里还是用了上面讲了位与算法，算出<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>的值，然后插入数据</p>\n<h3 id=\"h-14\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">流程图</span></h3>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108133154.jpg\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hclear\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">clear()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-15\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(150, 100, 50); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">源码解析</span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">清空这个操作是从<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>指向的元素开始删除，直到<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">head</code>=<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">tail</code>，清空完成；</p>\n<figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/blog/20200108134034.png\" alt title style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure>\n<h2 id=\"hsize\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">size()</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(202, 200, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">这个获取队列的大小也是用了上面讲的位与算法，用尾部减去了头部，然后位与数组的长度-1。为什么要这么弄呢？直接向<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayList</code>和<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">LinkedList</code>一样定义个size不好嘛？<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">你不觉得这样更方便吗？少了一个变量，就少维护了一个变量，就少了一个安全隐患啊</strong></p>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-function\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\"><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;<span class=\"hljs-title\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(44, 0, 159); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">size</span><span class=\"hljs-params\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">return</span>&nbsp;(tail&nbsp;-&nbsp;head)&nbsp;&amp;&nbsp;(elements.length&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>);<br>}<br></code></pre>\n<h2 id=\"h-16\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(233, 90, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(233, 90, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">上面的方法基本上有<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">位与</code>这个算法的身影，可见这个是核心了；如果不了解位运算的话，可以看<a href=\"https://mjava.top/java/java-base-wei/\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">位运算</a>这篇文章；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">核心算法：</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>右边为<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span>时，<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为正整数时，不管有多大，最后的结果永远&lt;=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.664392em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span></span></span></span>；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为0时，结果为0；当<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">&amp;</code>左边的数为负数时，-1=<span class=\"katex\" style=\"font: 1.21em / 1.2 KaTeX_Main, 'Times New Roman', serif; text-indent: 0px; text-rendering: auto; font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 8px 3px;\"><span class=\"katex-mathml\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; position: absolute; clip: rect(1px, 1px, 1px, 1px); padding: 0px; border: 0px; height: 1px; width: 1px; overflow: hidden;\"></span><span class=\"katex-html\" aria-hidden=\"true\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.747722em; vertical-align: -0.08333em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">2</span><span class=\"msupsub\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; text-align: left;\"><span class=\"vlist-t\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-table; table-layout: fixed;\"><span class=\"vlist-r\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-row;\"><span class=\"vlist\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: table-cell; vertical-align: bottom; position: relative; height: 0.664392em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: block; height: 0px; position: relative; top: -3.063em; margin-right: 0.05em;\"><span class=\"pstrut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; overflow: hidden; width: 0px; height: 2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\" style=\"color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; font-size: 0.7em;\"><span class=\"mord mathit mtight\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; font-family: KaTeX_Math; font-style: italic;\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span><span class=\"mbin\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">−</span><span class=\"mspace\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; margin-right: 0.2222222222222222em;\"></span></span><span class=\"base\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; position: relative; display: inline-block; white-space: nowrap; width: min-content;\"><span class=\"strut\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; display: inline-block; height: 0.64444em; vertical-align: 0em;\"></span><span class=\"mord\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">1</span></span></span></span></strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>无参构造方法是直接初始化一个容量为16的空数组，而上篇<a href=\"https://mjava.top/java/java-arraylist-source-1\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; text-decoration: none; color: rgb(30, 107, 184); overflow-wrap: break-word;\">ArrayList</a>文章里，它无参构造方法是初始化了一个<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">空数组</strong>，在第一次添加数据的时候才进行扩容到10；</p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>每次扩容为原来数组长度的<strong style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; font-weight: bold; color: rgb(233, 105, 0);\">2倍</strong></p>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\"><code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">ArrayDeque</code>不能插入<code style=\"font-size: inherit; line-height: inherit; overflow-wrap: break-word; padding: 2px 4px; border-radius: 4px; margin: 0px 2px; color: rgb(248, 35, 117); background: rgb(248, 248, 248);\">null</code>值</p></div>"},{"title":"SSO单点登录和CAS框架","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-14T11:27:14.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## SSO单点登录\n\n**单点登录**（英语：Single sign-on，缩写为 SSO），又译为**单一签入**，一种对于许多相互关连，但是又是各自独立的软件系统，提供[访问控制](https://zh.wikipedia.org/wiki/存取控制)的属性。当拥有这项属性时，当用户[登录](https://zh.wikipedia.org/wiki/登入)时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以[轻型目录访问协议](https://zh.wikipedia.org/wiki/轻型目录访问协议)（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，**单一退出**（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。\n\n### 优点\n\n使用单点登录的好处包括：\n\n- 降低访问第三方网站的风险（不存储用户密码，或在外部管理）。\n- 减少因不同的用户名和密码组合而带来的[密码疲劳](https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1)。\n- 减少为相同的身份重新输入密码所花费的时间。\n- 因减少与密码相关的调用IT[服务台](https://zh.wikipedia.org/wiki/服务台)的次数而降低IT成本。[[1\\]](https://zh.wikipedia.org/wiki/單一登入#cite_note-1)\n\nSSO为所有其它应用程序和系统，以集中的[验证服务器](https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1)提供身份验证，并结合技术以确保用户不必频繁输入密码。\n\n\n\n## CAS框架\n\nCAS 协议基于在**客户端**Web浏览器、Web**应用**和**CAS服务器**之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。\n\n### 历史\n\n- CAS是由[耶鲁大学](https://zh.wikipedia.org/wiki/耶鲁大学)[[1\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1)的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。\n\n- 2004年12月，CAS成为[Jasig](https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1)[[2\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2)的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。\n\n- 2005年5月，CAS协议版本2发布，引入代理和服务验证。\n\n- 2006年12月，[安德鲁·W·梅隆基金会](https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1)授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[[3\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3)颁奖之时，CAS在“数以百计的大学校园”中使用。\n\n- 2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。\n\n- 2016年11月，基于Spring Boot的CAS软件版本5发布。","source":"_posts/archive/web-security/sso-and-cas.md","raw":"---\ntitle: SSO单点登录和CAS框架\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-14 19:27:14\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- SSO\n- CAS框架\ncategories:\n- WebSecurity\n---\n\n## SSO单点登录\n\n**单点登录**（英语：Single sign-on，缩写为 SSO），又译为**单一签入**，一种对于许多相互关连，但是又是各自独立的软件系统，提供[访问控制](https://zh.wikipedia.org/wiki/存取控制)的属性。当拥有这项属性时，当用户[登录](https://zh.wikipedia.org/wiki/登入)时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以[轻型目录访问协议](https://zh.wikipedia.org/wiki/轻型目录访问协议)（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，**单一退出**（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。\n\n### 优点\n\n使用单点登录的好处包括：\n\n- 降低访问第三方网站的风险（不存储用户密码，或在外部管理）。\n- 减少因不同的用户名和密码组合而带来的[密码疲劳](https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1)。\n- 减少为相同的身份重新输入密码所花费的时间。\n- 因减少与密码相关的调用IT[服务台](https://zh.wikipedia.org/wiki/服务台)的次数而降低IT成本。[[1\\]](https://zh.wikipedia.org/wiki/單一登入#cite_note-1)\n\nSSO为所有其它应用程序和系统，以集中的[验证服务器](https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1)提供身份验证，并结合技术以确保用户不必频繁输入密码。\n\n\n\n## CAS框架\n\nCAS 协议基于在**客户端**Web浏览器、Web**应用**和**CAS服务器**之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。\n\n### 历史\n\n- CAS是由[耶鲁大学](https://zh.wikipedia.org/wiki/耶鲁大学)[[1\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1)的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。\n\n- 2004年12月，CAS成为[Jasig](https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1)[[2\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2)的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。\n\n- 2005年5月，CAS协议版本2发布，引入代理和服务验证。\n\n- 2006年12月，[安德鲁·W·梅隆基金会](https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1)授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。[[3\\]](https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3)颁奖之时，CAS在“数以百计的大学校园”中使用。\n\n- 2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。\n\n- 2016年11月，基于Spring Boot的CAS软件版本5发布。","slug":"archive/web-security/sso-and-cas","published":1,"updated":"2020-05-14T11:29:21.654Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04o007yw2g5gc2hgaix","content":"<h2 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href=\"https://zh.wikipedia.org/wiki/存取控制\" rel=\"noopener\" target=\"_blank\">访问控制</a>的属性。当拥有这项属性时，当用户<a href=\"https://zh.wikipedia.org/wiki/登入\" rel=\"noopener\" target=\"_blank\">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href=\"https://zh.wikipedia.org/wiki/轻型目录访问协议\" rel=\"noopener\" target=\"_blank\">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p><a id=\"more\"></a>\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>使用单点登录的好处包括：</p>\n<ul>\n<li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li>\n<li>减少因不同的用户名和密码组合而带来的<a href=\"https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">密码疲劳</a>。</li>\n<li>减少为相同的身份重新输入密码所花费的时间。</li>\n<li>因减少与密码相关的调用IT<a href=\"https://zh.wikipedia.org/wiki/服务台\" rel=\"noopener\" target=\"_blank\">服务台</a>的次数而降低IT成本。<a href=\"https://zh.wikipedia.org/wiki/單一登入#cite_note-1\" rel=\"noopener\" target=\"_blank\">[1]</a></li>\n</ul>\n<p>SSO为所有其它应用程序和系统，以集中的<a href=\"https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p>\n<h2 id=\"CAS框架\"><a href=\"#CAS框架\" class=\"headerlink\" title=\"CAS框架\"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p>\n<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li><p>CAS是由<a href=\"https://zh.wikipedia.org/wiki/耶鲁大学\" rel=\"noopener\" target=\"_blank\">耶鲁大学</a><a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1\" rel=\"noopener\" target=\"_blank\">[1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p>\n</li>\n<li><p>2004年12月，CAS成为<a href=\"https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">Jasig</a><a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2\" rel=\"noopener\" target=\"_blank\">[2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p>\n</li>\n<li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p>\n</li>\n<li><p>2006年12月，<a href=\"https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。<a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3\" rel=\"noopener\" target=\"_blank\">[3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p>\n</li>\n<li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p>\n</li>\n<li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"SSO单点登录\"><a href=\"#SSO单点登录\" class=\"headerlink\" title=\"SSO单点登录\"></a>SSO单点登录</h2><p><strong>单点登录</strong>（英语：Single sign-on，缩写为 SSO），又译为<strong>单一签入</strong>，一种对于许多相互关连，但是又是各自独立的软件系统，提供<a href=\"https://zh.wikipedia.org/wiki/存取控制\" rel=\"noopener\" target=\"_blank\">访问控制</a>的属性。当拥有这项属性时，当用户<a href=\"https://zh.wikipedia.org/wiki/登入\" rel=\"noopener\" target=\"_blank\">登录</a>时，就可以获取所有系统的访问权限，不用对每个单一系统都逐一登录。这项功能通常是以<a href=\"https://zh.wikipedia.org/wiki/轻型目录访问协议\" rel=\"noopener\" target=\"_blank\">轻型目录访问协议</a>（LDAP）来实现，在服务器上会将用户信息存储到LDAP数据库中。相同的，<strong>单一退出</strong>（single sign-off）就是指，只需要单一的退出动作，就可以结束对于多个系统的访问权限。</p>","more":"\n<h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><p>使用单点登录的好处包括：</p>\n<ul>\n<li>降低访问第三方网站的风险（不存储用户密码，或在外部管理）。</li>\n<li>减少因不同的用户名和密码组合而带来的<a href=\"https://zh.wikipedia.org/w/index.php?title=密碼疲勞&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">密码疲劳</a>。</li>\n<li>减少为相同的身份重新输入密码所花费的时间。</li>\n<li>因减少与密码相关的调用IT<a href=\"https://zh.wikipedia.org/wiki/服务台\" rel=\"noopener\" target=\"_blank\">服务台</a>的次数而降低IT成本。<a href=\"https://zh.wikipedia.org/wiki/單一登入#cite_note-1\" rel=\"noopener\" target=\"_blank\">[1]</a></li>\n</ul>\n<p>SSO为所有其它应用程序和系统，以集中的<a href=\"https://zh.wikipedia.org/w/index.php?title=验证服务器&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">验证服务器</a>提供身份验证，并结合技术以确保用户不必频繁输入密码。</p>\n<h2 id=\"CAS框架\"><a href=\"#CAS框架\" class=\"headerlink\" title=\"CAS框架\"></a>CAS框架</h2><p>CAS 协议基于在<strong>客户端</strong>Web浏览器、Web<strong>应用</strong>和<strong>CAS服务器</strong>之间的票据验证。当客户端访问访问应用程序，请求身份验证时，应用程序重定向到CAS。CAS验证客户端是否被授权，通常通过在数据库对用户名和密码进行检查。如果身份验证成功，CAS一次性在客户端以Cookie形式发放TGT票据，在其有效期CAS将一直信任用户，同时将客户端自动返回到应用程序，并向应用传递身份验证票（Service ticket）。然后，应用程序通过安全连接连接CAS，并提供自己的服务标识和验证票。之后CAS给出了关于特定用户是否已成功通过身份验证的应用程序授信信息。</p>\n<h3 id=\"历史\"><a href=\"#历史\" class=\"headerlink\" title=\"历史\"></a>历史</h3><ul>\n<li><p>CAS是由<a href=\"https://zh.wikipedia.org/wiki/耶鲁大学\" rel=\"noopener\" target=\"_blank\">耶鲁大学</a><a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-1\" rel=\"noopener\" target=\"_blank\">[1]</a>的Shawn Bayern创始的，后来由耶鲁大学的Drew Mazurek维护。CAS1.0实现了单点登录。 CAS2.0引入了多级代理认证（Multi-tier proxy authentication）。CAS其他几个版本已经有了新的功能。</p>\n</li>\n<li><p>2004年12月，CAS成为<a href=\"https://zh.wikipedia.org/w/index.php?title=Jasig&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">Jasig</a><a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-2\" rel=\"noopener\" target=\"_blank\">[2]</a>的一个项目，2008年该组织负责CAS的维护和发展。CAS原名“耶鲁大学CAS”，此后被称为“Jasig CAS”。</p>\n</li>\n<li><p>2005年5月，CAS协议版本2发布，引入代理和服务验证。</p>\n</li>\n<li><p>2006年12月，<a href=\"https://zh.wikipedia.org/w/index.php?title=安德鲁·W·梅隆基金会&action=edit&redlink=1\" rel=\"noopener\" target=\"_blank\">安德鲁·W·梅隆基金会</a>授予耶鲁大学第一届梅隆技术协作奖，颁发50000美元的奖金对耶鲁大学开发CAS进行奖励。<a href=\"https://zh.wikipedia.org/wiki/集中式认证服务#cite_note-3\" rel=\"noopener\" target=\"_blank\">[3]</a>颁奖之时，CAS在“数以百计的大学校园”中使用。</p>\n</li>\n<li><p>2012年12月，JASIG与Sakai基金合并，CAS改名为Apereo CAS。</p>\n</li>\n<li><p>2016年11月，基于Spring Boot的CAS软件版本5发布。</p>\n</li>\n</ul>\n"},{"title":"OAuth2.0与JWT","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-12T06:59:43.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n\n\n## OAuth2.0\n\nOAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求`令牌`，并用这个令牌来访问资源拥有者的资源。\n\n### 角色\n\n- 客户端：相当于访问受保护资源的软件\n- 授权服务器：授予客户端令牌的服务\n- 资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端\n- 受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌\n\n### 授权类型\n\n\n\n#### 授权码许可类型![授权码许可类型](http://cdn.mjava.top/blog/20200512090246.jpg)\n\n---\n\n#### 隐式许可类型![隐式许可类型](http://cdn.mjava.top/blog/20200512135621.jpg)\n\n---\n\n#### 客户端凭证许可类型![客户端凭证许可类型](http://cdn.mjava.top/blog/20200512135605.jpg)\n\n---\n\n#### 资源拥有者凭证许可类型(账号密码模式)![资源拥有者凭证许可类型(账号密码模式)](http://cdn.mjava.top/blog/20200512135635.jpg)\n\n---\n\n#### 断言许可类型![断言许可类型](http://cdn.mjava.top/blog/20200512135531.jpg)\n\n\n\n## JWT\n\nJWT全称：JSON Web Token，是一种令牌格式。其格式类似为`xxxxx.yyyyy.zzzzz`,分为三部分，每个部分都用`Base64`进行编码，之间用`.`分隔。\n\n第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n\n\n第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。\n\n- 注册声明：JWT官方提供的声明，参考资料:https://tools.ietf.org/html/rfc7519#section-4.1\n- 公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：https://tools.ietf.org/html/rfc7519#section-4.2\n- 私有声明：完全用户自定义，参考资料https://tools.ietf.org/html/rfc7519#section-4.3\n\n第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。","source":"_posts/archive/web-security/oauth-and-jwt.md","raw":"---\ntitle: OAuth2.0与JWT\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-12 14:59:43\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- OAuth2.0\n- JWT\ncategories:\n- WebSecurity\n---\n\n\n\n\n\n\n\n## OAuth2.0\n\nOAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求`令牌`，并用这个令牌来访问资源拥有者的资源。\n\n### 角色\n\n- 客户端：相当于访问受保护资源的软件\n- 授权服务器：授予客户端令牌的服务\n- 资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端\n- 受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌\n\n### 授权类型\n\n\n\n#### 授权码许可类型![授权码许可类型](http://cdn.mjava.top/blog/20200512090246.jpg)\n\n---\n\n#### 隐式许可类型![隐式许可类型](http://cdn.mjava.top/blog/20200512135621.jpg)\n\n---\n\n#### 客户端凭证许可类型![客户端凭证许可类型](http://cdn.mjava.top/blog/20200512135605.jpg)\n\n---\n\n#### 资源拥有者凭证许可类型(账号密码模式)![资源拥有者凭证许可类型(账号密码模式)](http://cdn.mjava.top/blog/20200512135635.jpg)\n\n---\n\n#### 断言许可类型![断言许可类型](http://cdn.mjava.top/blog/20200512135531.jpg)\n\n\n\n## JWT\n\nJWT全称：JSON Web Token，是一种令牌格式。其格式类似为`xxxxx.yyyyy.zzzzz`,分为三部分，每个部分都用`Base64`进行编码，之间用`.`分隔。\n\n第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。\n\n```json\n{\n  \"alg\": \"HS256\",\n  \"typ\": \"JWT\"\n}\n```\n\n\n\n第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。\n\n- 注册声明：JWT官方提供的声明，参考资料:https://tools.ietf.org/html/rfc7519#section-4.1\n- 公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：https://tools.ietf.org/html/rfc7519#section-4.2\n- 私有声明：完全用户自定义，参考资料https://tools.ietf.org/html/rfc7519#section-4.3\n\n第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。","slug":"archive/web-security/oauth-and-jwt","published":1,"updated":"2020-09-16T07:13:10.375Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04p007zw2g57nkl47l7","content":"<h2 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p><h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>客户端：相当于访问受保护资源的软件</li>\n<li>授权服务器：授予客户端令牌的服务</li>\n<li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li>\n<li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li>\n</ul><a id=\"more\"></a>\n\n<h3 id=\"授权类型\"><a href=\"#授权类型\" class=\"headerlink\" title=\"授权类型\"></a>授权类型</h3><h4 id=\"授权码许可类型\"><a href=\"#授权码许可类型\" class=\"headerlink\" title=\"授权码许可类型\"></a>授权码许可类型<img src=\"http://cdn.mjava.top/blog/20200512090246.jpg\" alt=\"授权码许可类型\"></h4><hr>\n<h4 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型<img src=\"http://cdn.mjava.top/blog/20200512135621.jpg\" alt=\"隐式许可类型\"></h4><hr>\n<h4 id=\"客户端凭证许可类型\"><a href=\"#客户端凭证许可类型\" class=\"headerlink\" title=\"客户端凭证许可类型\"></a>客户端凭证许可类型<img src=\"http://cdn.mjava.top/blog/20200512135605.jpg\" alt=\"客户端凭证许可类型\"></h4><hr>\n<h4 id=\"资源拥有者凭证许可类型-账号密码模式\"><a href=\"#资源拥有者凭证许可类型-账号密码模式\" class=\"headerlink\" title=\"资源拥有者凭证许可类型(账号密码模式)\"></a>资源拥有者凭证许可类型(账号密码模式)<img src=\"http://cdn.mjava.top/blog/20200512135635.jpg\" alt=\"资源拥有者凭证许可类型(账号密码模式)\"></h4><hr>\n<h4 id=\"断言许可类型\"><a href=\"#断言许可类型\" class=\"headerlink\" title=\"断言许可类型\"></a>断言许可类型<img src=\"http://cdn.mjava.top/blog/20200512135531.jpg\" alt=\"断言许可类型\"></h4><h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p>\n<p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p>\n<ul>\n<li>注册声明：JWT官方提供的声明，参考资料:<a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.1</a></li>\n<li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href=\"https://tools.ietf.org/html/rfc7519#section-4.2\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.2</a></li>\n<li>私有声明：完全用户自定义，参考资料<a href=\"https://tools.ietf.org/html/rfc7519#section-4.3\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.3</a></li>\n</ul>\n<p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"OAuth2-0\"><a href=\"#OAuth2-0\" class=\"headerlink\" title=\"OAuth2.0\"></a>OAuth2.0</h2><p>OAuth2.0是一个授权协议，它允许软件应用代表资源拥有者去访问资源拥有者的资源。应用向资源拥有者请求<code>令牌</code>，并用这个令牌来访问资源拥有者的资源。</p><h3 id=\"角色\"><a href=\"#角色\" class=\"headerlink\" title=\"角色\"></a>角色</h3><ul>\n<li>客户端：相当于访问受保护资源的软件</li>\n<li>授权服务器：授予客户端令牌的服务</li>\n<li>资源拥有者：受保护的资源拥有者，有权决定将不将令牌授权给客户端</li>\n<li>受保护的资源：除资源拥有者外，要访问此资源必须要有授权服务器颁发的有效的令牌</li>\n</ul>","more":"\n\n<h3 id=\"授权类型\"><a href=\"#授权类型\" class=\"headerlink\" title=\"授权类型\"></a>授权类型</h3><h4 id=\"授权码许可类型\"><a href=\"#授权码许可类型\" class=\"headerlink\" title=\"授权码许可类型\"></a>授权码许可类型<img src=\"http://cdn.mjava.top/blog/20200512090246.jpg\" alt=\"授权码许可类型\"></h4><hr>\n<h4 id=\"隐式许可类型\"><a href=\"#隐式许可类型\" class=\"headerlink\" title=\"隐式许可类型\"></a>隐式许可类型<img src=\"http://cdn.mjava.top/blog/20200512135621.jpg\" alt=\"隐式许可类型\"></h4><hr>\n<h4 id=\"客户端凭证许可类型\"><a href=\"#客户端凭证许可类型\" class=\"headerlink\" title=\"客户端凭证许可类型\"></a>客户端凭证许可类型<img src=\"http://cdn.mjava.top/blog/20200512135605.jpg\" alt=\"客户端凭证许可类型\"></h4><hr>\n<h4 id=\"资源拥有者凭证许可类型-账号密码模式\"><a href=\"#资源拥有者凭证许可类型-账号密码模式\" class=\"headerlink\" title=\"资源拥有者凭证许可类型(账号密码模式)\"></a>资源拥有者凭证许可类型(账号密码模式)<img src=\"http://cdn.mjava.top/blog/20200512135635.jpg\" alt=\"资源拥有者凭证许可类型(账号密码模式)\"></h4><hr>\n<h4 id=\"断言许可类型\"><a href=\"#断言许可类型\" class=\"headerlink\" title=\"断言许可类型\"></a>断言许可类型<img src=\"http://cdn.mjava.top/blog/20200512135531.jpg\" alt=\"断言许可类型\"></h4><h2 id=\"JWT\"><a href=\"#JWT\" class=\"headerlink\" title=\"JWT\"></a>JWT</h2><p>JWT全称：JSON Web Token，是一种令牌格式。其格式类似为<code>xxxxx.yyyyy.zzzzz</code>,分为三部分，每个部分都用<code>Base64</code>进行编码，之间用<code>.</code>分隔。</p>\n<p>第一部分：为Header部分，标头通常由两部分组成：令牌的类型（即JWT）和所使用的签名算法，例如HMAC SHA256或RSA。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"alg\"</span>: <span class=\"string\">\"HS256\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"typ\"</span>: <span class=\"string\">\"JWT\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第二部分：令牌的第二部分是有效负载，其中包含声明。 声明是有关实体（通常是用户）和其他数据的声明。 共有三种类型的声明：注册的，公共的和私有的三种声明。当然里面可以存放任何有效的字段信息（私有声明）。但是为了避免不同实现之间不兼容，可以准守JWT官方提供的声明字段。</p>\n<ul>\n<li>注册声明：JWT官方提供的声明，参考资料:<a href=\"https://tools.ietf.org/html/rfc7519#section-4.1\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.1</a></li>\n<li>公共声明：用户发邮件给JWT官方进行注册的声明字段，参考资料：<a href=\"https://tools.ietf.org/html/rfc7519#section-4.2\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.2</a></li>\n<li>私有声明：完全用户自定义，参考资料<a href=\"https://tools.ietf.org/html/rfc7519#section-4.3\" rel=\"noopener\" target=\"_blank\">https://tools.ietf.org/html/rfc7519#section-4.3</a></li>\n</ul>\n<p>第三部分：为令牌签名部分，使用这个字段后，资源服务器只会接受签名正确的令牌。</p>\n"},{"title":"基于SpringCloud搭建Spring-security-oauth认证服务器","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-19T12:25:06.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n\n\n## 准备阶段\n\n这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；\n\n所以事先要准备好：\n\n- Redis\n- Mysql\n\n并且Mysql执行[Spring-security-oauth初始化Sql](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql)这个SQL，初始化Spring-security-oauth所需要的表。然后执行\n\n```sql\n-- 插入client_id和client_secret都为sunline的客户端\ninsert into \n\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)\nvalues \n\t(\"sunline\",\"\t{bcrypt}$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\",\"password\",\"true\");\n```\n\n> client_secret为`new BCryptPasswordEncoder().encode(\"sunline\")`方法加密后，然后在加上`{bcrypt}`\n\n\n\n## 开始搭建\n\n\n\n### 导入pom依赖\n\n```java\n<!--security-oauth-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n    \n<!--redis-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n    \n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.17</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n### 配置application.properties\n\n```properties\n#datasource\nspring.datasource.url=jdbc:mysql://localhost:3307/grey_code?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.datasource.username=zmh\nspring.datasource.password=zmh\n\n#redis\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n\n\nserver.port=9991\nserver.servlet.context-path=/oauthServer\n```\n\n\n\n### 创建用户详情服务类\n\n![](http://cdn.mjava.top/blog/20200519194059.png)\n\n#### 创建权限控制类\n\n![](http://cdn.mjava.top/blog/20200519194128.png)\n\n### 创建认证授权类\n\n![](http://cdn.mjava.top/blog/20200519194207.png)\n\n## 获取令牌\n\n访问:`/oauth/token`就可以获取到令牌\n\n![](http://cdn.mjava.top/blog/20200519194446.png)\n\n```json\n{\n    \"accessToken\": \"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\",\n    \"expiration\": \"2020-05-19T21:11:39.883+0000\",\n    \"scope\": [\n        \"all\"\n    ],\n    \"tokenType\": \"bearer\"\n}\n```\n\n\n\n### 访问资源\n\n带上获取到的令牌\n\n![](http://cdn.mjava.top/blog/20200519194803.png)","source":"_posts/archive/web-security/spring-security-oauth-server-demo.md","raw":"---\ntitle: 基于SpringCloud搭建Spring-security-oauth认证服务器\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-19 20:25:06\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- OAuth\n- spring-security\ncategories:\n- WebSecurity\n---\n\n\n\n\n\n## 准备阶段\n\n这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；\n\n所以事先要准备好：\n\n- Redis\n- Mysql\n\n并且Mysql执行[Spring-security-oauth初始化Sql](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql)这个SQL，初始化Spring-security-oauth所需要的表。然后执行\n\n```sql\n-- 插入client_id和client_secret都为sunline的客户端\ninsert into \n\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)\nvalues \n\t(\"sunline\",\"\t{bcrypt}$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\",\"password\",\"true\");\n```\n\n> client_secret为`new BCryptPasswordEncoder().encode(\"sunline\")`方法加密后，然后在加上`{bcrypt}`\n\n\n\n## 开始搭建\n\n\n\n### 导入pom依赖\n\n```java\n<!--security-oauth-->\n<dependency>\n    <groupId>org.springframework.cloud</groupId>\n    <artifactId>spring-cloud-starter-oauth2</artifactId>\n</dependency>\n    \n<!--redis-->\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n    \n<!--mysql-->\n<dependency>\n    <groupId>mysql</groupId>\n    <artifactId>mysql-connector-java</artifactId>\n    <version>8.0.17</version>\n    <scope>compile</scope>\n</dependency>\n```\n\n\n\n### 配置application.properties\n\n```properties\n#datasource\nspring.datasource.url=jdbc:mysql://localhost:3307/grey_code?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai\nspring.datasource.username=zmh\nspring.datasource.password=zmh\n\n#redis\nspring.redis.host=127.0.0.1\nspring.redis.port=6379\n\n\nserver.port=9991\nserver.servlet.context-path=/oauthServer\n```\n\n\n\n### 创建用户详情服务类\n\n![](http://cdn.mjava.top/blog/20200519194059.png)\n\n#### 创建权限控制类\n\n![](http://cdn.mjava.top/blog/20200519194128.png)\n\n### 创建认证授权类\n\n![](http://cdn.mjava.top/blog/20200519194207.png)\n\n## 获取令牌\n\n访问:`/oauth/token`就可以获取到令牌\n\n![](http://cdn.mjava.top/blog/20200519194446.png)\n\n```json\n{\n    \"accessToken\": \"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\",\n    \"expiration\": \"2020-05-19T21:11:39.883+0000\",\n    \"scope\": [\n        \"all\"\n    ],\n    \"tokenType\": \"bearer\"\n}\n```\n\n\n\n### 访问资源\n\n带上获取到的令牌\n\n![](http://cdn.mjava.top/blog/20200519194803.png)","slug":"archive/web-security/spring-security-oauth-server-demo","published":1,"updated":"2020-09-16T07:12:57.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04q0082w2g5faquefmz","content":"<h2 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p><p>所以事先要准备好：</p><ul>\n<li>Redis</li>\n<li>Mysql</li>\n</ul><p>并且Mysql执行<a href=\"https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\" rel=\"noopener\" target=\"_blank\">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p><a id=\"more\"></a>\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> </span><br><span class=\"line\">\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class=\"line\"><span class=\"keyword\">values</span> </span><br><span class=\"line\">\t(<span class=\"string\">\"sunline\"</span>,<span class=\"string\">\"\t&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\"</span>,<span class=\"string\">\"password\"</span>,<span class=\"string\">\"true\"</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>{bcrypt}</code></p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"导入pom依赖\"><a href=\"#导入pom依赖\" class=\"headerlink\" title=\"导入pom依赖\"></a>导入pom依赖</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--security-oauth--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--redis--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--mysql--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置application-properties\"><a href=\"#配置application-properties\" class=\"headerlink\" title=\"配置application.properties\"></a>配置application.properties</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datasource</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redis</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">9991</span></span><br><span class=\"line\"><span class=\"meta\">server.servlet.context-path</span>=<span class=\"string\">/oauthServer</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户详情服务类\"><a href=\"#创建用户详情服务类\" class=\"headerlink\" title=\"创建用户详情服务类\"></a>创建用户详情服务类</h3><p><img src=\"http://cdn.mjava.top/blog/20200519194059.png\" alt></p>\n<h4 id=\"创建权限控制类\"><a href=\"#创建权限控制类\" class=\"headerlink\" title=\"创建权限控制类\"></a>创建权限控制类</h4><p><img src=\"http://cdn.mjava.top/blog/20200519194128.png\" alt></p>\n<h3 id=\"创建认证授权类\"><a href=\"#创建认证授权类\" class=\"headerlink\" title=\"创建认证授权类\"></a>创建认证授权类</h3><p><img src=\"http://cdn.mjava.top/blog/20200519194207.png\" alt></p>\n<h2 id=\"获取令牌\"><a href=\"#获取令牌\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200519194446.png\" alt></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"accessToken\"</span>: <span class=\"string\">\"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"expiration\"</span>: <span class=\"string\">\"2020-05-19T21:11:39.883+0000\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scope\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"all\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"tokenType\"</span>: <span class=\"string\">\"bearer\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问资源\"><a href=\"#访问资源\" class=\"headerlink\" title=\"访问资源\"></a>访问资源</h3><p>带上获取到的令牌</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200519194803.png\" alt></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"准备阶段\"><a href=\"#准备阶段\" class=\"headerlink\" title=\"准备阶段\"></a>准备阶段</h2><p>这里搭建一个用OAuth2.0密码模式认证的服务器，token存入redis，client存入Mysql；</p><p>所以事先要准备好：</p><ul>\n<li>Redis</li>\n<li>Mysql</li>\n</ul><p>并且Mysql执行<a href=\"https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql\" rel=\"noopener\" target=\"_blank\">Spring-security-oauth初始化Sql</a>这个SQL，初始化Spring-security-oauth所需要的表。然后执行</p>","more":"\n\n\n\n<figure class=\"highlight sql\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">-- 插入client_id和client_secret都为sunline的客户端</span></span><br><span class=\"line\"><span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> </span><br><span class=\"line\">\toauth_client_details (client_id, client_secret, authorized_grant_types , autoapprove)</span><br><span class=\"line\"><span class=\"keyword\">values</span> </span><br><span class=\"line\">\t(<span class=\"string\">\"sunline\"</span>,<span class=\"string\">\"\t&#123;bcrypt&#125;$2a$10$G1CFd535SiyOtvi6ckbZWexQy.hW5x/I/fLBPiW/E4UmctCfKYbgG\"</span>,<span class=\"string\">\"password\"</span>,<span class=\"string\">\"true\"</span>);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>client_secret为<code>new BCryptPasswordEncoder().encode(&quot;sunline&quot;)</code>方法加密后，然后在加上<code>{bcrypt}</code></p>\n</blockquote>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><h3 id=\"导入pom依赖\"><a href=\"#导入pom依赖\" class=\"headerlink\" title=\"导入pom依赖\"></a>导入pom依赖</h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;!--security-oauth--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-cloud-starter-oauth2&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--redis--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">&lt;!--mysql--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">    &lt;version&gt;8.0.17&lt;/version&gt;</span><br><span class=\"line\">    &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置application-properties\"><a href=\"#配置application-properties\" class=\"headerlink\" title=\"配置application.properties\"></a>配置application.properties</h3><figure class=\"highlight properties\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#datasource</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.url</span>=<span class=\"string\">jdbc:mysql://localhost:3307/grey_code?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;serverTimezone=Asia/Shanghai</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.username</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"><span class=\"meta\">spring.datasource.password</span>=<span class=\"string\">zmh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#redis</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.host</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"meta\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">server.port</span>=<span class=\"string\">9991</span></span><br><span class=\"line\"><span class=\"meta\">server.servlet.context-path</span>=<span class=\"string\">/oauthServer</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建用户详情服务类\"><a href=\"#创建用户详情服务类\" class=\"headerlink\" title=\"创建用户详情服务类\"></a>创建用户详情服务类</h3><p><img src=\"http://cdn.mjava.top/blog/20200519194059.png\" alt></p>\n<h4 id=\"创建权限控制类\"><a href=\"#创建权限控制类\" class=\"headerlink\" title=\"创建权限控制类\"></a>创建权限控制类</h4><p><img src=\"http://cdn.mjava.top/blog/20200519194128.png\" alt></p>\n<h3 id=\"创建认证授权类\"><a href=\"#创建认证授权类\" class=\"headerlink\" title=\"创建认证授权类\"></a>创建认证授权类</h3><p><img src=\"http://cdn.mjava.top/blog/20200519194207.png\" alt></p>\n<h2 id=\"获取令牌\"><a href=\"#获取令牌\" class=\"headerlink\" title=\"获取令牌\"></a>获取令牌</h2><p>访问:<code>/oauth/token</code>就可以获取到令牌</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200519194446.png\" alt></p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"accessToken\"</span>: <span class=\"string\">\"e28f9a99-e60d-4693-b6c3-73e06a1d14f5ZMH10086\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"expiration\"</span>: <span class=\"string\">\"2020-05-19T21:11:39.883+0000\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"scope\"</span>: [</span><br><span class=\"line\">        <span class=\"string\">\"all\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"tokenType\"</span>: <span class=\"string\">\"bearer\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"访问资源\"><a href=\"#访问资源\" class=\"headerlink\" title=\"访问资源\"></a>访问资源</h3><p>带上获取到的令牌</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200519194803.png\" alt></p>\n"},{"title":"JVM中的双亲委派机制","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:02:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 四种类加载器\n\n- 启动类加载器(Bootstrap Class Loader )：加载`$JAVA_HOME/jre/lib`目录下的jar包\n- 拓展类加载器(Extension Class Loader)：加载`$JAVA_HOME/jre/lib/ext`目录下的jar包\n- 应用程序类加载器(Application Class Loader)：加载`ClassPath`目录下的jar包\n- 自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包\n\n## 双亲委派机制\n\n>  如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。\n\n![](http://cdn.mjava.top/blog/20200726204658.jpg)\n\n## 代码示例\n\n> 当获取`Bootstrap class loader`的时候，输出了`null`，说明**开发者无法通过引用操作启动类加载器**\n\n![](http://cdn.mjava.top/blog/20200726210142.png)\n\n\n\n## 双亲委派机制的作用\n\n每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是`保证了Java体系的稳定`，不然的话你自己定义一个`String`类的话，这样系统中就会有两个`String`类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。\n\n## 破坏双亲委派机制\n\n双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。\n\n- 源码\n\n> 源码在`java.lang.ClassLoader`有兴趣的可以去看下\n\n![](http://cdn.mjava.top/blog/20200726212038.png)\n\n可以看到，就这短短的几行代码，就实现了听起来很高大上的`双亲委派机制`，所以破坏双亲委派机制的话，就直接重写`loadClass`方法就可以了。","source":"_posts/java/jvm/java-class-load-1.md","raw":"---\ntitle: JVM中的双亲委派机制\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:02:34\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 四种类加载器\n\n- 启动类加载器(Bootstrap Class Loader )：加载`$JAVA_HOME/jre/lib`目录下的jar包\n- 拓展类加载器(Extension Class Loader)：加载`$JAVA_HOME/jre/lib/ext`目录下的jar包\n- 应用程序类加载器(Application Class Loader)：加载`ClassPath`目录下的jar包\n- 自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包\n\n## 双亲委派机制\n\n>  如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。\n\n![](http://cdn.mjava.top/blog/20200726204658.jpg)\n\n## 代码示例\n\n> 当获取`Bootstrap class loader`的时候，输出了`null`，说明**开发者无法通过引用操作启动类加载器**\n\n![](http://cdn.mjava.top/blog/20200726210142.png)\n\n\n\n## 双亲委派机制的作用\n\n每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是`保证了Java体系的稳定`，不然的话你自己定义一个`String`类的话，这样系统中就会有两个`String`类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。\n\n## 破坏双亲委派机制\n\n双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。\n\n- 源码\n\n> 源码在`java.lang.ClassLoader`有兴趣的可以去看下\n\n![](http://cdn.mjava.top/blog/20200726212038.png)\n\n可以看到，就这短短的几行代码，就实现了听起来很高大上的`双亲委派机制`，所以破坏双亲委派机制的话，就直接重写`loadClass`方法就可以了。","slug":"java/jvm/java-class-load-1","published":1,"updated":"2020-09-16T07:03:33.377Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04r0083w2g5m8bf9h6m","content":"<h2 id=\"四种类加载器\"><a href=\"#四种类加载器\" class=\"headerlink\" title=\"四种类加载器\"></a>四种类加载器</h2><ul>\n<li>启动类加载器(Bootstrap Class Loader )：加载<code>$JAVA_HOME/jre/lib</code>目录下的jar包</li>\n<li>拓展类加载器(Extension Class Loader)：加载<code>$JAVA_HOME/jre/lib/ext</code>目录下的jar包</li>\n<li>应用程序类加载器(Application Class Loader)：加载<code>ClassPath</code>目录下的jar包</li>\n<li>自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包</li>\n</ul><a id=\"more\"></a>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><blockquote>\n<p> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726204658.jpg\" alt></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><blockquote>\n<p>当获取<code>Bootstrap class loader</code>的时候，输出了<code>null</code>，说明<strong>开发者无法通过引用操作启动类加载器</strong></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726210142.png\" alt></p>\n<h2 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h2><p>每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是<code>保证了Java体系的稳定</code>，不然的话你自己定义一个<code>String</code>类的话，这样系统中就会有两个<code>String</code>类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。</p>\n<h2 id=\"破坏双亲委派机制\"><a href=\"#破坏双亲委派机制\" class=\"headerlink\" title=\"破坏双亲委派机制\"></a>破坏双亲委派机制</h2><p>双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。</p>\n<ul>\n<li>源码</li>\n</ul>\n<blockquote>\n<p>源码在<code>java.lang.ClassLoader</code>有兴趣的可以去看下</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726212038.png\" alt></p>\n<p>可以看到，就这短短的几行代码，就实现了听起来很高大上的<code>双亲委派机制</code>，所以破坏双亲委派机制的话，就直接重写<code>loadClass</code>方法就可以了。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"四种类加载器\"><a href=\"#四种类加载器\" class=\"headerlink\" title=\"四种类加载器\"></a>四种类加载器</h2><ul>\n<li>启动类加载器(Bootstrap Class Loader )：加载<code>$JAVA_HOME/jre/lib</code>目录下的jar包</li>\n<li>拓展类加载器(Extension Class Loader)：加载<code>$JAVA_HOME/jre/lib/ext</code>目录下的jar包</li>\n<li>应用程序类加载器(Application Class Loader)：加载<code>ClassPath</code>目录下的jar包</li>\n<li>自定义类加载器(User Class Loader)：加载自定义指定目录下的jar包</li>\n</ul>","more":"\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><blockquote>\n<p> 如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726204658.jpg\" alt></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><blockquote>\n<p>当获取<code>Bootstrap class loader</code>的时候，输出了<code>null</code>，说明<strong>开发者无法通过引用操作启动类加载器</strong></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726210142.png\" alt></p>\n<h2 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h2><p>每个加载器都只需要固定的加载自己管理范围内的类，这样的好处就是<code>保证了Java体系的稳定</code>，不然的话你自己定义一个<code>String</code>类的话，这样系统中就会有两个<code>String</code>类，如果没有双亲委派机制的话，系统就不知道到底该加载哪一个，这样系统就变得一片混乱了。</p>\n<h2 id=\"破坏双亲委派机制\"><a href=\"#破坏双亲委派机制\" class=\"headerlink\" title=\"破坏双亲委派机制\"></a>破坏双亲委派机制</h2><p>双亲委派机制是Java设计者推荐给开发者们的类加载实现方式，并不是一个强制性约束的模型，所以也可以人为的破坏这个机制。</p>\n<ul>\n<li>源码</li>\n</ul>\n<blockquote>\n<p>源码在<code>java.lang.ClassLoader</code>有兴趣的可以去看下</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726212038.png\" alt></p>\n<p>可以看到，就这短短的几行代码，就实现了听起来很高大上的<code>双亲委派机制</code>，所以破坏双亲委派机制的话，就直接重写<code>loadClass</code>方法就可以了。</p>\n"},{"title":"JVM运行时栈帧","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:06:15.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。\n\n栈帧的生命周期**随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。**\n\n在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为**当前栈帧**，这个栈帧对应的方法称为**当前方法**，定义这个方法的类称为**当前类**。**对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。**\n\n> **注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧\n\n![](http://cdn.mjava.top/blog/20200731162235.jpg)\n\n\n\n\n\n## 局部变量表\n\n`局部变量表（Local Variables Table）`是一组**变量值**的存储空间，用于存放**方法参数**和**方法内部定义的局部变量**。\n\n### 存储方法\n\n局部变量表的容量以`变量槽（Variable Slot）`为最小单位，一般在虚拟机中，一个Slot占用**32位**存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。\n\nJava虚拟机通过**索引定位**的方式使用局部变量表，索引值的范围是从`0`开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。\n\n#### eg:\n\n在Java中，`long`在内存占64位，所以局部变量表**用2个slot来存储**\n\n![](http://cdn.mjava.top/blog/20200730225516.png)\n\n\n\n对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机**不允许采用任何方式单独访问其中的某一个**，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。\n\n### long和double的非原子性协定\n\n> 在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：**允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行**，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的**“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）**。\n\n虽然有这个协定，**但是**，由于`局部变量表(Local Variable Table)`是建立在线程堆栈中的，属于**线程私有的数据**，无论读写两个连续的变量槽是否为原子操作，都**不会引起数据竞争和线程安全问题**。\n\n### 初始值问题\n\n我们已经知道**类的字段变量**有两次赋初始值的过程，一次在**准备阶段**，赋予系统初始值；另外一次在**初始化阶段**，赋予程序员定义的初始值。\n\n但**局部变量就不一样**了，如果一个局部变量定义了但**没有赋初始值**，那它是**完全不能使用**的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。\n\n#### eg：\n\n```java\n// 这个方法会报：\n// Error:(12, 28) java: variable y might not have been initialized\npublic class JVMTest {\n    public static void main(String[] args) {\n        int y;\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n\n\n// 这个会正常输出 3； 因为int的初始值为0\npublic class JVMTest {\n    private static int y;\n    public static void main(String[] args) {\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n```\n\n\n\n\n\n## 操作数栈\n\n`操作数栈（Operand Stack）`也常被称为`操作栈`，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的`max_stacks`数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在`max_stacks`数据项中设定的最大值。\n\n### eg:\n\n```java\npublic class JVMTest {\n    public static void main(String[] args) {\n        long y=9223372036854775800L;\n        int z=2;\n        long x=y+z;\n    }\n}\n```\n\n我们用`javap -verbose JVMTest`来查看他的`class`文件的字节码指令\n\n![](http://cdn.mjava.top/blog/20200730235131.png)\n\n**在操作栈中的流程大致为：**\n\n![](http://cdn.mjava.top/blog/20200731105247.jpg)\n\n## 动态链接\n\n每个栈帧都包含一个指向当前方法所在类型的`运行时常量池`的引用，持有这个引用是为了支持`方法调用`过程中的`动态连接（Dynamic Linking）`。在`Class`文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过`符号引用(symolic reference)`来表示，`动态链接`的作用就是将这些以`符号引用`所表示的方法转换为实际方法的直接引用。\n\n### 什么是符号引用？\n\n![](http://cdn.mjava.top/blog/20200731110742.png)\n\n通过查看字节码，上面的`#7`，`#8`，`#9`等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和`字符符号`，并不是真正的指向内存的地址指针。这些符号都指向`运行时常量池`的引用。\n\n## 方法返回地址\n\nJava在调用方法时，只有两种返回方法，一种是`正常返回`，一种是`异常返回`。\n\n### 正常返回\n\n正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前`方法正常调用完成`，如果有返回值，就会给他调用者返回一个值，如果没有返回值(`void`)就正常返回。\n\n这种场景下，当前栈帧承担着恢复调用者状态的责任，**包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。**调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。\n\n### 异常返回\n\n在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称`方法异常调用完成`，那一定不会有方法返回值返回给其调用者。\n\n无论采用何种退出方式，在方法退出之后，都**必须返回到最初方法被调用时的位置**，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。\n\n怎么理解这个**必须返回到最初方法被调用时的位置**呢？\n\neg:\n\n![](http://cdn.mjava.top/blog/20200731164803.png)\n\n上面异常是在`13行`发生的，但是它并没有停在`13行`，而是回到了最初调用它`第10行`的位置。","source":"_posts/java/jvm/java-jvm-stack-1.md","raw":"---\ntitle: JVM运行时栈帧\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:06:15\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。\n\n栈帧的生命周期**随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。**\n\n在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为**当前栈帧**，这个栈帧对应的方法称为**当前方法**，定义这个方法的类称为**当前类**。**对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。**\n\n> **注意:**栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧\n\n![](http://cdn.mjava.top/blog/20200731162235.jpg)\n\n\n\n\n\n## 局部变量表\n\n`局部变量表（Local Variables Table）`是一组**变量值**的存储空间，用于存放**方法参数**和**方法内部定义的局部变量**。\n\n### 存储方法\n\n局部变量表的容量以`变量槽（Variable Slot）`为最小单位，一般在虚拟机中，一个Slot占用**32位**存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。\n\nJava虚拟机通过**索引定位**的方式使用局部变量表，索引值的范围是从`0`开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。\n\n#### eg:\n\n在Java中，`long`在内存占64位，所以局部变量表**用2个slot来存储**\n\n![](http://cdn.mjava.top/blog/20200730225516.png)\n\n\n\n对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机**不允许采用任何方式单独访问其中的某一个**，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。\n\n### long和double的非原子性协定\n\n> 在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：**允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行**，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的**“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）**。\n\n虽然有这个协定，**但是**，由于`局部变量表(Local Variable Table)`是建立在线程堆栈中的，属于**线程私有的数据**，无论读写两个连续的变量槽是否为原子操作，都**不会引起数据竞争和线程安全问题**。\n\n### 初始值问题\n\n我们已经知道**类的字段变量**有两次赋初始值的过程，一次在**准备阶段**，赋予系统初始值；另外一次在**初始化阶段**，赋予程序员定义的初始值。\n\n但**局部变量就不一样**了，如果一个局部变量定义了但**没有赋初始值**，那它是**完全不能使用**的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。\n\n#### eg：\n\n```java\n// 这个方法会报：\n// Error:(12, 28) java: variable y might not have been initialized\npublic class JVMTest {\n    public static void main(String[] args) {\n        int y;\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n\n\n// 这个会正常输出 3； 因为int的初始值为0\npublic class JVMTest {\n    private static int y;\n    public static void main(String[] args) {\n        int z=3;\n        System.out.println(y+z);\n    }\n}\n```\n\n\n\n\n\n## 操作数栈\n\n`操作数栈（Operand Stack）`也常被称为`操作栈`，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的`max_stacks`数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在`max_stacks`数据项中设定的最大值。\n\n### eg:\n\n```java\npublic class JVMTest {\n    public static void main(String[] args) {\n        long y=9223372036854775800L;\n        int z=2;\n        long x=y+z;\n    }\n}\n```\n\n我们用`javap -verbose JVMTest`来查看他的`class`文件的字节码指令\n\n![](http://cdn.mjava.top/blog/20200730235131.png)\n\n**在操作栈中的流程大致为：**\n\n![](http://cdn.mjava.top/blog/20200731105247.jpg)\n\n## 动态链接\n\n每个栈帧都包含一个指向当前方法所在类型的`运行时常量池`的引用，持有这个引用是为了支持`方法调用`过程中的`动态连接（Dynamic Linking）`。在`Class`文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过`符号引用(symolic reference)`来表示，`动态链接`的作用就是将这些以`符号引用`所表示的方法转换为实际方法的直接引用。\n\n### 什么是符号引用？\n\n![](http://cdn.mjava.top/blog/20200731110742.png)\n\n通过查看字节码，上面的`#7`，`#8`，`#9`等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和`字符符号`，并不是真正的指向内存的地址指针。这些符号都指向`运行时常量池`的引用。\n\n## 方法返回地址\n\nJava在调用方法时，只有两种返回方法，一种是`正常返回`，一种是`异常返回`。\n\n### 正常返回\n\n正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前`方法正常调用完成`，如果有返回值，就会给他调用者返回一个值，如果没有返回值(`void`)就正常返回。\n\n这种场景下，当前栈帧承担着恢复调用者状态的责任，**包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。**调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。\n\n### 异常返回\n\n在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称`方法异常调用完成`，那一定不会有方法返回值返回给其调用者。\n\n无论采用何种退出方式，在方法退出之后，都**必须返回到最初方法被调用时的位置**，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。\n\n怎么理解这个**必须返回到最初方法被调用时的位置**呢？\n\neg:\n\n![](http://cdn.mjava.top/blog/20200731164803.png)\n\n上面异常是在`13行`发生的，但是它并没有停在`13行`，而是回到了最初调用它`第10行`的位置。","slug":"java/jvm/java-jvm-stack-1","published":1,"updated":"2020-09-16T07:06:47.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04s0084w2g5wg3p8uzy","content":"<p>在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</p><p>栈帧的生命周期<strong>随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。</strong></p><p>在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为<strong>当前栈帧</strong>，这个栈帧对应的方法称为<strong>当前方法</strong>，定义这个方法的类称为<strong>当前类</strong>。<strong>对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。</strong></p><a id=\"more\"></a>\n\n\n<blockquote>\n<p><strong>注意:</strong>栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200731162235.jpg\" alt></p>\n<h2 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h2><p><code>局部变量表（Local Variables Table）</code>是一组<strong>变量值</strong>的存储空间，用于存放<strong>方法参数</strong>和<strong>方法内部定义的局部变量</strong>。</p>\n<h3 id=\"存储方法\"><a href=\"#存储方法\" class=\"headerlink\" title=\"存储方法\"></a>存储方法</h3><p>局部变量表的容量以<code>变量槽（Variable Slot）</code>为最小单位，一般在虚拟机中，一个Slot占用<strong>32位</strong>存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。</p>\n<p>Java虚拟机通过<strong>索引定位</strong>的方式使用局部变量表，索引值的范围是从<code>0</code>开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。</p>\n<h4 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h4><p>在Java中，<code>long</code>在内存占64位，所以局部变量表<strong>用2个slot来存储</strong></p>\n<p><img src=\"http://cdn.mjava.top/blog/20200730225516.png\" alt></p>\n<p>对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机<strong>不允许采用任何方式单独访问其中的某一个</strong>，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。</p>\n<h3 id=\"long和double的非原子性协定\"><a href=\"#long和double的非原子性协定\" class=\"headerlink\" title=\"long和double的非原子性协定\"></a>long和double的非原子性协定</h3><blockquote>\n<p>在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：<strong>允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行</strong>，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的<strong>“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）</strong>。</p>\n</blockquote>\n<p>虽然有这个协定，<strong>但是</strong>，由于<code>局部变量表(Local Variable Table)</code>是建立在线程堆栈中的，属于<strong>线程私有的数据</strong>，无论读写两个连续的变量槽是否为原子操作，都<strong>不会引起数据竞争和线程安全问题</strong>。</p>\n<h3 id=\"初始值问题\"><a href=\"#初始值问题\" class=\"headerlink\" title=\"初始值问题\"></a>初始值问题</h3><p>我们已经知道<strong>类的字段变量</strong>有两次赋初始值的过程，一次在<strong>准备阶段</strong>，赋予系统初始值；另外一次在<strong>初始化阶段</strong>，赋予程序员定义的初始值。</p>\n<p>但<strong>局部变量就不一样</strong>了，如果一个局部变量定义了但<strong>没有赋初始值</strong>，那它是<strong>完全不能使用</strong>的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。</p>\n<h4 id=\"eg：\"><a href=\"#eg：\" class=\"headerlink\" title=\"eg：\"></a>eg：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法会报：</span></span><br><span class=\"line\"><span class=\"comment\">// Error:(12, 28) java: variable y might not have been initialized</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个会正常输出 3； 因为int的初始值为0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h2><p><code>操作数栈（Operand Stack）</code>也常被称为<code>操作栈</code>，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的<code>max_stacks</code>数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在<code>max_stacks</code>数据项中设定的最大值。</p>\n<h3 id=\"eg-1\"><a href=\"#eg-1\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> y=<span class=\"number\">9223372036854775800L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> x=y+z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们用<code>javap -verbose JVMTest</code>来查看他的<code>class</code>文件的字节码指令</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200730235131.png\" alt></p>\n<p><strong>在操作栈中的流程大致为：</strong></p>\n<p><img src=\"http://cdn.mjava.top/blog/20200731105247.jpg\" alt></p>\n<h2 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h2><p>每个栈帧都包含一个指向当前方法所在类型的<code>运行时常量池</code>的引用，持有这个引用是为了支持<code>方法调用</code>过程中的<code>动态连接（Dynamic Linking）</code>。在<code>Class</code>文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过<code>符号引用(symolic reference)</code>来表示，<code>动态链接</code>的作用就是将这些以<code>符号引用</code>所表示的方法转换为实际方法的直接引用。</p>\n<h3 id=\"什么是符号引用？\"><a href=\"#什么是符号引用？\" class=\"headerlink\" title=\"什么是符号引用？\"></a>什么是符号引用？</h3><p><img src=\"http://cdn.mjava.top/blog/20200731110742.png\" alt></p>\n<p>通过查看字节码，上面的<code>#7</code>，<code>#8</code>，<code>#9</code>等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和<code>字符符号</code>，并不是真正的指向内存的地址指针。这些符号都指向<code>运行时常量池</code>的引用。</p>\n<h2 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h2><p>Java在调用方法时，只有两种返回方法，一种是<code>正常返回</code>，一种是<code>异常返回</code>。</p>\n<h3 id=\"正常返回\"><a href=\"#正常返回\" class=\"headerlink\" title=\"正常返回\"></a>正常返回</h3><p>正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前<code>方法正常调用完成</code>，如果有返回值，就会给他调用者返回一个值，如果没有返回值(<code>void</code>)就正常返回。</p>\n<p>这种场景下，当前栈帧承担着恢复调用者状态的责任，<strong>包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。</strong>调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。</p>\n<h3 id=\"异常返回\"><a href=\"#异常返回\" class=\"headerlink\" title=\"异常返回\"></a>异常返回</h3><p>在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称<code>方法异常调用完成</code>，那一定不会有方法返回值返回给其调用者。</p>\n<p>无论采用何种退出方式，在方法退出之后，都<strong>必须返回到最初方法被调用时的位置</strong>，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。</p>\n<p>怎么理解这个<strong>必须返回到最初方法被调用时的位置</strong>呢？</p>\n<p>eg:</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200731164803.png\" alt></p>\n<p>上面异常是在<code>13行</code>发生的，但是它并没有停在<code>13行</code>，而是回到了最初调用它<code>第10行</code>的位置。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>在JVM中，每个线程都包含n个栈帧，每一个栈帧都包括了局部变量表、操作数栈、动态连接、方法返回地址和一些额外的附加信息。</p><p>栈帧的生命周期<strong>随着方法的创建而创建，随着方法的结束而销毁，无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算方法的结束。</strong></p><p>在某条线程执行过程中的某个时间点上，只有目前正在执行的那个方法的栈帧是活动的。这个栈帧称为<strong>当前栈帧</strong>，这个栈帧对应的方法称为<strong>当前方法</strong>，定义这个方法的类称为<strong>当前类</strong>。<strong>对局部变量表和操作数栈的各种操作，通常都指的是对当前栈帧的局部变量表和操作数栈所进行的操作。</strong></p>","more":"\n\n\n<blockquote>\n<p><strong>注意:</strong>栈帧是线程本地私有的数据，不可能在一个栈帧 之中引用另外一个线程的栈帧</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200731162235.jpg\" alt></p>\n<h2 id=\"局部变量表\"><a href=\"#局部变量表\" class=\"headerlink\" title=\"局部变量表\"></a>局部变量表</h2><p><code>局部变量表（Local Variables Table）</code>是一组<strong>变量值</strong>的存储空间，用于存放<strong>方法参数</strong>和<strong>方法内部定义的局部变量</strong>。</p>\n<h3 id=\"存储方法\"><a href=\"#存储方法\" class=\"headerlink\" title=\"存储方法\"></a>存储方法</h3><p>局部变量表的容量以<code>变量槽（Variable Slot）</code>为最小单位，一般在虚拟机中，一个Slot占用<strong>32位</strong>存储空间(这不是固定的，虚拟机可以自行改变每个槽占用空间的大小,但一般都是32位)。</p>\n<p>Java虚拟机通过<strong>索引定位</strong>的方式使用局部变量表，索引值的范围是从<code>0</code>开始至局部变量表最大的变量槽数量。如果访问的是32位数据类型的变量，索引N就代表了使用第N个变量槽，如果访问的是64位数据类型的变量，则说明会同时使用第N和N+1两个变量槽。</p>\n<h4 id=\"eg\"><a href=\"#eg\" class=\"headerlink\" title=\"eg:\"></a>eg:</h4><p>在Java中，<code>long</code>在内存占64位，所以局部变量表<strong>用2个slot来存储</strong></p>\n<p><img src=\"http://cdn.mjava.top/blog/20200730225516.png\" alt></p>\n<p>对于两个相邻的共同存放一个64位数据的两个变量槽，虚拟机<strong>不允许采用任何方式单独访问其中的某一个</strong>，《Java虚拟机规范》中明确要求了如果遇到进行这种操作的字节码序列，虚拟机就应该在类加载的校验阶段中抛出异常。</p>\n<h3 id=\"long和double的非原子性协定\"><a href=\"#long和double的非原子性协定\" class=\"headerlink\" title=\"long和double的非原子性协定\"></a>long和double的非原子性协定</h3><blockquote>\n<p>在Java内存模型中，对于64位的数据类型（long和double），在模型中特别定义了一条宽松的规定：<strong>允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行</strong>，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的<strong>“long和double的非原子性协定”（Non-Atomic Treatment of doubleand long Variables）</strong>。</p>\n</blockquote>\n<p>虽然有这个协定，<strong>但是</strong>，由于<code>局部变量表(Local Variable Table)</code>是建立在线程堆栈中的，属于<strong>线程私有的数据</strong>，无论读写两个连续的变量槽是否为原子操作，都<strong>不会引起数据竞争和线程安全问题</strong>。</p>\n<h3 id=\"初始值问题\"><a href=\"#初始值问题\" class=\"headerlink\" title=\"初始值问题\"></a>初始值问题</h3><p>我们已经知道<strong>类的字段变量</strong>有两次赋初始值的过程，一次在<strong>准备阶段</strong>，赋予系统初始值；另外一次在<strong>初始化阶段</strong>，赋予程序员定义的初始值。</p>\n<p>但<strong>局部变量就不一样</strong>了，如果一个局部变量定义了但<strong>没有赋初始值</strong>，那它是<strong>完全不能使用</strong>的。所以不要认为Java中任何情况下都存在诸如整型变量默认为0、布尔型变量默认为false等这样的默认值规则。</p>\n<h4 id=\"eg：\"><a href=\"#eg：\" class=\"headerlink\" title=\"eg：\"></a>eg：</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这个方法会报：</span></span><br><span class=\"line\"><span class=\"comment\">// Error:(12, 28) java: variable y might not have been initialized</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这个会正常输出 3； 因为int的初始值为0</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> y;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(y+z);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"操作数栈\"><a href=\"#操作数栈\" class=\"headerlink\" title=\"操作数栈\"></a>操作数栈</h2><p><code>操作数栈（Operand Stack）</code>也常被称为<code>操作栈</code>，它是一个后入先出（Last In First Out，LIFO）栈。同局部变量表一样，操作数栈的最大深度也在编译的时候被写入到Code属性的<code>max_stacks</code>数据项之中。操作数栈的每一个元素都可以是包括long和double在内的任意Java数据类型。32位数据类型所占的栈容量为1，64位数据类型所占的栈容量为2。Javac编译器的数据流分析工作保证了在方法执行的任何时候，操作数栈的深度都不会超过在<code>max_stacks</code>数据项中设定的最大值。</p>\n<h3 id=\"eg-1\"><a href=\"#eg-1\" class=\"headerlink\" title=\"eg:\"></a>eg:</h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JVMTest</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> y=<span class=\"number\">9223372036854775800L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> z=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> x=y+z;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们用<code>javap -verbose JVMTest</code>来查看他的<code>class</code>文件的字节码指令</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200730235131.png\" alt></p>\n<p><strong>在操作栈中的流程大致为：</strong></p>\n<p><img src=\"http://cdn.mjava.top/blog/20200731105247.jpg\" alt></p>\n<h2 id=\"动态链接\"><a href=\"#动态链接\" class=\"headerlink\" title=\"动态链接\"></a>动态链接</h2><p>每个栈帧都包含一个指向当前方法所在类型的<code>运行时常量池</code>的引用，持有这个引用是为了支持<code>方法调用</code>过程中的<code>动态连接（Dynamic Linking）</code>。在<code>Class</code>文件里，一个方法若要调用其他方法，或者访问成员变量，则需要通过<code>符号引用(symolic reference)</code>来表示，<code>动态链接</code>的作用就是将这些以<code>符号引用</code>所表示的方法转换为实际方法的直接引用。</p>\n<h3 id=\"什么是符号引用？\"><a href=\"#什么是符号引用？\" class=\"headerlink\" title=\"什么是符号引用？\"></a>什么是符号引用？</h3><p><img src=\"http://cdn.mjava.top/blog/20200731110742.png\" alt></p>\n<p>通过查看字节码，上面的<code>#7</code>，<code>#8</code>，<code>#9</code>等等都是符号引用，他在class文件里只是个符号，就像你定义一个变量名称一样，变量名只是和<code>字符符号</code>，并不是真正的指向内存的地址指针。这些符号都指向<code>运行时常量池</code>的引用。</p>\n<h2 id=\"方法返回地址\"><a href=\"#方法返回地址\" class=\"headerlink\" title=\"方法返回地址\"></a>方法返回地址</h2><p>Java在调用方法时，只有两种返回方法，一种是<code>正常返回</code>，一种是<code>异常返回</code>。</p>\n<h3 id=\"正常返回\"><a href=\"#正常返回\" class=\"headerlink\" title=\"正常返回\"></a>正常返回</h3><p>正常返回指的就是在执行方法时，中间并没有异常抛出，或者已正确处理抛出的异常，这时就称当前<code>方法正常调用完成</code>，如果有返回值，就会给他调用者返回一个值，如果没有返回值(<code>void</code>)就正常返回。</p>\n<p>这种场景下，当前栈帧承担着恢复调用者状态的责任，<strong>包括恢复调用者的局部变量表和操作数栈，以及正确递增程序计数器，以跳过刚才执行的调用方法指令等。</strong>调用者的代码在被调用方法的返回值压入调用者栈帧的操作数栈后，会正常执行。</p>\n<h3 id=\"异常返回\"><a href=\"#异常返回\" class=\"headerlink\" title=\"异常返回\"></a>异常返回</h3><p>在调用一些方法时，一些异常没有被正确捕获，就会导致方法终止，此时称<code>方法异常调用完成</code>，那一定不会有方法返回值返回给其调用者。</p>\n<p>无论采用何种退出方式，在方法退出之后，都<strong>必须返回到最初方法被调用时的位置</strong>，程序才能继续执行，方法返回时可能需要在栈帧中保存一些信息，用来帮助恢复它的上层主调方法的执行状态。</p>\n<p>怎么理解这个<strong>必须返回到最初方法被调用时的位置</strong>呢？</p>\n<p>eg:</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200731164803.png\" alt></p>\n<p>上面异常是在<code>13行</code>发生的，但是它并没有停在<code>13行</code>，而是回到了最初调用它<code>第10行</code>的位置。</p>\n"},{"title":"Java类初始化","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:01:03.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 代码结果？\n\n首先，我们来看看下面的代码的输出的结果，可以先试着想一下\n\n![](http://cdn.mjava.top/blog/20200725004926.png)\n\n\n\n```java\n//结果\nCode\n公众号\n```\n\n这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么`Test1`里的静态代码块没有加载呢？下面就来看看到底怎么回事\n\n## 类的生命周期\n\n了解类加载前，首先熟悉一下类的生命周期\n\n![](http://cdn.mjava.top/blog/20200725003859.png)\n\n这里注意几个点：\n\n- `解析阶段`可以在`初始化阶段`之后，这是为了支持Java语言的运行时绑定特性（也称为`动态绑定`或`晚期绑定`）\n- 这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。\n\n## 初始化和实例化\n\n我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清`new`一个对象，到底是对这个对象进行了初始化还是实例化呢？\n\n- `初始化`：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行`一次`。\n\n- `实例化`：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。\n\n  ![](http://cdn.mjava.top/blog/20200725183421.png)\n\n\n\n## 类的初始化\n\n《Java虚拟机规范》中并没有对`加载`进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于`初始化阶段`，《Java虚拟机规范》则是严格规定了有且只有`六种情况`必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：\n\n- 遇到`new`、`getstatic`、`putstatic`或`invokestatic`这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了\n\n  ![](http://cdn.mjava.top/blog/20200725172134.png)\n\n- 使用`java.lang.reflect`包的方法对类型进行`反射调用`的时候，如果类型没有进行过初始化，则需要先触发其初始化。\n- 当初始化类的时候，如果发现其`父类`还没有进行过初始化，则需要先触发其父类的初始化。\n- 当虚拟机启动时，用户需要指定一个要执行的`主类`（包含main()方法的那个类），虚拟机会先初始化这个主类。\n- 当使用JDK 7新加入的动态语言支持时，如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果为`REF_getStatic`、`REF_putStatic`、`REF_invokeStatic`、`REF_newInvokeSpecial`四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。\n- 当一个接口中定义了`JDK 8`新加入的默认方法（被`default关键字`修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n> `java.lang.invoke.MethodHandle` 是`JDK7`中新加入类似反射功能的一个类\n\n\n\n## 被动引用\n\n对于以上这六种会触发类型进行`初始化`的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行`主动引用`。除此之外，所有引用类型的方式都不会触发初始化，称为`被动引用。`\n\n像文章一开始的代码，就属于被动引用，对于静态字段，**只有直接定义这个字段的类才会被初始化**，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n\n\n### 例子1--对象数组\n\n直接上图\n\n![](http://cdn.mjava.top/blog/20200725184328.png)\n\n以上代码执行后并不会输出`灰色`两个字，因为创建对象数组时并没有去初始化`Test1`这个类，而是用`anewarray`字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。\n\n\n\n> 拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的`xaload`,`xastore`字节码指令中\n\n### 例子2--final修饰的静态字段\n\n- 被`final`修饰的静态字段\n\n![](http://cdn.mjava.top/blog/20200725194122.png)\n\n此时运行该代码时，只会输出`灰色Code`字样，`Test1`并没有触发初始化阶段。这是因为在`编译阶段`通过`常量传播优化`，已经将此常量的值`灰色Code`直接存储在`ClassLoadTest`类的常量池中，所以当`ClassLoadTest`类调用`Test1`里的`value`时，都变成了对自身常量池的调用，和`Test1`类没有任何关系。\n\n\n\n- 没有`final`修饰的静态字段\n\n  ![](http://cdn.mjava.top/blog/20200725194514.png)\n\n没有使用`final`修饰的静态变量，字节码出现了`getstatic`，所以触发`Test1`的初始化阶段，此时运行结果将会输出`灰色`和`灰色Code`","source":"_posts/java/jvm/java-class-init.md","raw":"---\ntitle: Java类初始化\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:01:03\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 代码结果？\n\n首先，我们来看看下面的代码的输出的结果，可以先试着想一下\n\n![](http://cdn.mjava.top/blog/20200725004926.png)\n\n\n\n```java\n//结果\nCode\n公众号\n```\n\n这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么`Test1`里的静态代码块没有加载呢？下面就来看看到底怎么回事\n\n## 类的生命周期\n\n了解类加载前，首先熟悉一下类的生命周期\n\n![](http://cdn.mjava.top/blog/20200725003859.png)\n\n这里注意几个点：\n\n- `解析阶段`可以在`初始化阶段`之后，这是为了支持Java语言的运行时绑定特性（也称为`动态绑定`或`晚期绑定`）\n- 这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。\n\n## 初始化和实例化\n\n我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清`new`一个对象，到底是对这个对象进行了初始化还是实例化呢？\n\n- `初始化`：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行`一次`。\n\n- `实例化`：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。\n\n  ![](http://cdn.mjava.top/blog/20200725183421.png)\n\n\n\n## 类的初始化\n\n《Java虚拟机规范》中并没有对`加载`进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于`初始化阶段`，《Java虚拟机规范》则是严格规定了有且只有`六种情况`必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：\n\n- 遇到`new`、`getstatic`、`putstatic`或`invokestatic`这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了\n\n  ![](http://cdn.mjava.top/blog/20200725172134.png)\n\n- 使用`java.lang.reflect`包的方法对类型进行`反射调用`的时候，如果类型没有进行过初始化，则需要先触发其初始化。\n- 当初始化类的时候，如果发现其`父类`还没有进行过初始化，则需要先触发其父类的初始化。\n- 当虚拟机启动时，用户需要指定一个要执行的`主类`（包含main()方法的那个类），虚拟机会先初始化这个主类。\n- 当使用JDK 7新加入的动态语言支持时，如果一个`java.lang.invoke.MethodHandle`实例最后的解析结果为`REF_getStatic`、`REF_putStatic`、`REF_invokeStatic`、`REF_newInvokeSpecial`四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。\n- 当一个接口中定义了`JDK 8`新加入的默认方法（被`default关键字`修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。\n\n> `java.lang.invoke.MethodHandle` 是`JDK7`中新加入类似反射功能的一个类\n\n\n\n## 被动引用\n\n对于以上这六种会触发类型进行`初始化`的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行`主动引用`。除此之外，所有引用类型的方式都不会触发初始化，称为`被动引用。`\n\n像文章一开始的代码，就属于被动引用，对于静态字段，**只有直接定义这个字段的类才会被初始化**，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。\n\n\n\n### 例子1--对象数组\n\n直接上图\n\n![](http://cdn.mjava.top/blog/20200725184328.png)\n\n以上代码执行后并不会输出`灰色`两个字，因为创建对象数组时并没有去初始化`Test1`这个类，而是用`anewarray`字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。\n\n\n\n> 拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的`xaload`,`xastore`字节码指令中\n\n### 例子2--final修饰的静态字段\n\n- 被`final`修饰的静态字段\n\n![](http://cdn.mjava.top/blog/20200725194122.png)\n\n此时运行该代码时，只会输出`灰色Code`字样，`Test1`并没有触发初始化阶段。这是因为在`编译阶段`通过`常量传播优化`，已经将此常量的值`灰色Code`直接存储在`ClassLoadTest`类的常量池中，所以当`ClassLoadTest`类调用`Test1`里的`value`时，都变成了对自身常量池的调用，和`Test1`类没有任何关系。\n\n\n\n- 没有`final`修饰的静态字段\n\n  ![](http://cdn.mjava.top/blog/20200725194514.png)\n\n没有使用`final`修饰的静态变量，字节码出现了`getstatic`，所以触发`Test1`的初始化阶段，此时运行结果将会输出`灰色`和`灰色Code`","slug":"java/jvm/java-class-init","published":1,"updated":"2020-09-16T07:03:46.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04t0087w2g5j6g8o334","content":"<h2 id=\"代码结果？\"><a href=\"#代码结果？\" class=\"headerlink\" title=\"代码结果？\"></a>代码结果？</h2><p>首先，我们来看看下面的代码的输出的结果，可以先试着想一下</p><p><img src=\"http://cdn.mjava.top/blog/20200725004926.png\" alt></p><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">Code</span><br><span class=\"line\">公众号</span><br></pre></td></tr></table></figure><p>这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么<code>Test1</code>里的静态代码块没有加载呢？下面就来看看到底怎么回事</p><h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>了解类加载前，首先熟悉一下类的生命周期</p><p><img src=\"http://cdn.mjava.top/blog/20200725003859.png\" alt></p><p>这里注意几个点：</p><ul>\n<li><code>解析阶段</code>可以在<code>初始化阶段</code>之后，这是为了支持Java语言的运行时绑定特性（也称为<code>动态绑定</code>或<code>晚期绑定</code>）</li>\n<li>这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</li>\n</ul><a id=\"more\"></a>\n\n\n\n\n\n\n\n\n<h2 id=\"初始化和实例化\"><a href=\"#初始化和实例化\" class=\"headerlink\" title=\"初始化和实例化\"></a>初始化和实例化</h2><p>我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清<code>new</code>一个对象，到底是对这个对象进行了初始化还是实例化呢？</p>\n<ul>\n<li><p><code>初始化</code>：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行<code>一次</code>。</p>\n</li>\n<li><p><code>实例化</code>：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725183421.png\" alt></p>\n</li>\n</ul>\n<h2 id=\"类的初始化\"><a href=\"#类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化</h2><p>《Java虚拟机规范》中并没有对<code>加载</code>进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于<code>初始化阶段</code>，《Java虚拟机规范》则是严格规定了有且只有<code>六种情况</code>必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>\n<ul>\n<li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725172134.png\" alt></p>\n</li>\n<li><p>使用<code>java.lang.reflect</code>包的方法对类型进行<code>反射调用</code>的时候，如果类型没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当初始化类的时候，如果发现其<code>父类</code>还没有进行过初始化，则需要先触发其父类的初始化。</p>\n</li>\n<li><p>当虚拟机启动时，用户需要指定一个要执行的<code>主类</code>（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>\n</li>\n<li><p>当使用JDK 7新加入的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>、<code>REF_newInvokeSpecial</code>四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当一个接口中定义了<code>JDK 8</code>新加入的默认方法（被<code>default关键字</code>修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>java.lang.invoke.MethodHandle</code> 是<code>JDK7</code>中新加入类似反射功能的一个类</p>\n</blockquote>\n<h2 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h2><p>对于以上这六种会触发类型进行<code>初始化</code>的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行<code>主动引用</code>。除此之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用。</code></p>\n<p>像文章一开始的代码，就属于被动引用，对于静态字段，<strong>只有直接定义这个字段的类才会被初始化</strong>，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h3 id=\"例子1–对象数组\"><a href=\"#例子1–对象数组\" class=\"headerlink\" title=\"例子1–对象数组\"></a>例子1–对象数组</h3><p>直接上图</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725184328.png\" alt></p>\n<p>以上代码执行后并不会输出<code>灰色</code>两个字，因为创建对象数组时并没有去初始化<code>Test1</code>这个类，而是用<code>anewarray</code>字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。</p>\n<blockquote>\n<p>拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的<code>xaload</code>,<code>xastore</code>字节码指令中</p>\n</blockquote>\n<h3 id=\"例子2–final修饰的静态字段\"><a href=\"#例子2–final修饰的静态字段\" class=\"headerlink\" title=\"例子2–final修饰的静态字段\"></a>例子2–final修饰的静态字段</h3><ul>\n<li>被<code>final</code>修饰的静态字段</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200725194122.png\" alt></p>\n<p>此时运行该代码时，只会输出<code>灰色Code</code>字样，<code>Test1</code>并没有触发初始化阶段。这是因为在<code>编译阶段</code>通过<code>常量传播优化</code>，已经将此常量的值<code>灰色Code</code>直接存储在<code>ClassLoadTest</code>类的常量池中，所以当<code>ClassLoadTest</code>类调用<code>Test1</code>里的<code>value</code>时，都变成了对自身常量池的调用，和<code>Test1</code>类没有任何关系。</p>\n<ul>\n<li><p>没有<code>final</code>修饰的静态字段</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725194514.png\" alt></p>\n</li>\n</ul>\n<p>没有使用<code>final</code>修饰的静态变量，字节码出现了<code>getstatic</code>，所以触发<code>Test1</code>的初始化阶段，此时运行结果将会输出<code>灰色</code>和<code>灰色Code</code></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"代码结果？\"><a href=\"#代码结果？\" class=\"headerlink\" title=\"代码结果？\"></a>代码结果？</h2><p>首先，我们来看看下面的代码的输出的结果，可以先试着想一下</p><p><img src=\"http://cdn.mjava.top/blog/20200725004926.png\" alt></p><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结果</span></span><br><span class=\"line\">Code</span><br><span class=\"line\">公众号</span><br></pre></td></tr></table></figure><p>这时候有同学就会想，以前不是说类加载时，静态代码块都会加载的嘛！怎么<code>Test1</code>里的静态代码块没有加载呢？下面就来看看到底怎么回事</p><h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>了解类加载前，首先熟悉一下类的生命周期</p><p><img src=\"http://cdn.mjava.top/blog/20200725003859.png\" alt></p><p>这里注意几个点：</p><ul>\n<li><code>解析阶段</code>可以在<code>初始化阶段</code>之后，这是为了支持Java语言的运行时绑定特性（也称为<code>动态绑定</code>或<code>晚期绑定</code>）</li>\n<li>这些阶段通常都是互相交叉地混合进行的，会在一个阶段执行的过程中调用、激活另一个阶段。</li>\n</ul>","more":"\n\n\n\n\n\n\n\n\n<h2 id=\"初始化和实例化\"><a href=\"#初始化和实例化\" class=\"headerlink\" title=\"初始化和实例化\"></a>初始化和实例化</h2><p>我相信很多人跟我刚开始一样，搞不清他们两个的区别，搞不清<code>new</code>一个对象，到底是对这个对象进行了初始化还是实例化呢？</p>\n<ul>\n<li><p><code>初始化</code>：是完成程序执行前的准备工作。在这个阶段，静态的（变量，方法，代码块）会被执行。同时在会开辟一块存储空间用来存放静态的数据。初始化只在类加载的时候执行<code>一次</code>。</p>\n</li>\n<li><p><code>实例化</code>：是指创建一个对象的过程。这个过程中会在堆中开辟内存，将一些非静态的方法，变量存放在里面。在程序执行的过程中，可以创建多个对象，既多次实例化。每次实例化都会开辟一块新的内存。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725183421.png\" alt></p>\n</li>\n</ul>\n<h2 id=\"类的初始化\"><a href=\"#类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化</h2><p>《Java虚拟机规范》中并没有对<code>加载</code>进行强制约束，这点可以交给虚拟机的具体实现来自由把握。但是对于<code>初始化阶段</code>，《Java虚拟机规范》则是严格规定了有且只有<code>六种情况</code>必须立即对类进行“初始化”（而加载、验证、准备自然需要在此之前开始）：</p>\n<ul>\n<li><p>遇到<code>new</code>、<code>getstatic</code>、<code>putstatic</code>或<code>invokestatic</code>这四条字节码指令时，如果类型没有进行过初始化，则需要先触发其初始化阶段。那到底什么时候能够生成这些指令呢？其实看下字节码就都明白了</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725172134.png\" alt></p>\n</li>\n<li><p>使用<code>java.lang.reflect</code>包的方法对类型进行<code>反射调用</code>的时候，如果类型没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当初始化类的时候，如果发现其<code>父类</code>还没有进行过初始化，则需要先触发其父类的初始化。</p>\n</li>\n<li><p>当虚拟机启动时，用户需要指定一个要执行的<code>主类</code>（包含main()方法的那个类），虚拟机会先初始化这个主类。</p>\n</li>\n<li><p>当使用JDK 7新加入的动态语言支持时，如果一个<code>java.lang.invoke.MethodHandle</code>实例最后的解析结果为<code>REF_getStatic</code>、<code>REF_putStatic</code>、<code>REF_invokeStatic</code>、<code>REF_newInvokeSpecial</code>四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。</p>\n</li>\n<li><p>当一个接口中定义了<code>JDK 8</code>新加入的默认方法（被<code>default关键字</code>修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>java.lang.invoke.MethodHandle</code> 是<code>JDK7</code>中新加入类似反射功能的一个类</p>\n</blockquote>\n<h2 id=\"被动引用\"><a href=\"#被动引用\" class=\"headerlink\" title=\"被动引用\"></a>被动引用</h2><p>对于以上这六种会触发类型进行<code>初始化</code>的场景，《Java虚拟机规范》中使用了一个非常强烈的限定语——“有且只有”，这六种场景中的行为称为对一个类型进行<code>主动引用</code>。除此之外，所有引用类型的方式都不会触发初始化，称为<code>被动引用。</code></p>\n<p>像文章一开始的代码，就属于被动引用，对于静态字段，<strong>只有直接定义这个字段的类才会被初始化</strong>，因此通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化。</p>\n<h3 id=\"例子1–对象数组\"><a href=\"#例子1–对象数组\" class=\"headerlink\" title=\"例子1–对象数组\"></a>例子1–对象数组</h3><p>直接上图</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725184328.png\" alt></p>\n<p>以上代码执行后并不会输出<code>灰色</code>两个字，因为创建对象数组时并没有去初始化<code>Test1</code>这个类，而是用<code>anewarray</code>字节码指令去初始化了另外一个类，它是一个由虚拟机自动生成的、直接继承于java.lang.Object的子类。</p>\n<blockquote>\n<p>拓展：数组越界检查没有封装在数组元素的访问类中，而是封装在数组访问的<code>xaload</code>,<code>xastore</code>字节码指令中</p>\n</blockquote>\n<h3 id=\"例子2–final修饰的静态字段\"><a href=\"#例子2–final修饰的静态字段\" class=\"headerlink\" title=\"例子2–final修饰的静态字段\"></a>例子2–final修饰的静态字段</h3><ul>\n<li>被<code>final</code>修饰的静态字段</li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200725194122.png\" alt></p>\n<p>此时运行该代码时，只会输出<code>灰色Code</code>字样，<code>Test1</code>并没有触发初始化阶段。这是因为在<code>编译阶段</code>通过<code>常量传播优化</code>，已经将此常量的值<code>灰色Code</code>直接存储在<code>ClassLoadTest</code>类的常量池中，所以当<code>ClassLoadTest</code>类调用<code>Test1</code>里的<code>value</code>时，都变成了对自身常量池的调用，和<code>Test1</code>类没有任何关系。</p>\n<ul>\n<li><p>没有<code>final</code>修饰的静态字段</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200725194514.png\" alt></p>\n</li>\n</ul>\n<p>没有使用<code>final</code>修饰的静态变量，字节码出现了<code>getstatic</code>，所以触发<code>Test1</code>的初始化阶段，此时运行结果将会输出<code>灰色</code>和<code>灰色Code</code></p>\n"},{"title":"JVM4种垃圾收集算法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:31:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n## 简介\n\n垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。\n\n\n\n##  标记-清除算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 算法分为**“标记”**和**“清除”**两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，**也可以反过来**，标记存活的对象，统一回收所有未被标记的对象。\n\n### 缺点\n\n- 执行效率不稳定，如果Java堆中包含大量对象，而且**其中大部分是需要被回收的**，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的**执行效率都随对象数量增长而降低**；\n- 第二个是内存空间的碎片化问题，标记、清除之后会**产生大量不连续的内存碎片**，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时**无法找到足够的连续内存**而不得不**提前触发另一次垃圾收集动作**。\n- ![](http://cdn.mjava.top/blog/20200529100358.png)\n\n![标记清除算法](http://cdn.mjava.top/blog/20200528203926.jpeg)\n\n##  标记-复制算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n\n- 它将可用内存按容量划分为**大小相等的两块**，每次只使用其中的一块。\n- 当这一块的内存用完了，就将还**存活着的对象复制到另外一块上面**，然后再把**已使用过的内存空间一次清理掉**。\n\n### 缺点\n\n- 如果内存中**多数对象都是存活的**，这种算法将会**产生大量的内存间复制的开销**\n- 代价是将可用内存缩小为了**原来的一半**,空间浪费未免太多了一点.\n- ![](http://cdn.mjava.top/blog/20200529100420.jpg)\n\n![标记复制算法](http://cdn.mjava.top/blog/20200528203952.jpeg)\n\n##  标记-整理算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 在**标记-清除**的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让**所有存活的对象都向内存空间一端移动**，然后直接**清理掉边界以外的内存**，\n\n### 缺点\n\n- 在有大量存活对象的老年代区域,**移动存活对象**并**更新所有引用**这些对象的地方将会是一种**极为负重**的操作,而且这种对象移动操作**必须全程暂停用户应用程序**才能进行,比**标记-清除**算法停顿时间长.\n- ![](http://cdn.mjava.top/blog/20200529100506.jpg)\n\n![标记整理算法](http://cdn.mjava.top/blog/20200528204014.jpeg)\n\n\n\n## 分代收集算法\n\n现代商用虚拟机基于以上算法的优缺点,根据**分代收集理论**,在不同的区域采用了不同的收集算法.\n\n> <font color=red>老年代:新生代=2:1</font>\n\n![](http://cdn.mjava.top/blog/20200529101100.png)\n\n### 新生代\n\n> 堆大小默认比例:<font color=red>Eden:S0:S1=8:1:1</font>\n>\n> 采用标记-复制算法\n\n新生代分为**Eden区**和**Survior区**,而Survior区又分为**From Survior区(S0)**和**To Survior区(S1)**.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把**Eden区**存活的对象复制到**S0区**,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到**S1区**,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.\n\n### 老年代\n\n> 采用标记-整理法或标记-清理法\n\n当老年代Old区域满时,会触发**Full GC**,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发**OOM异常**;","source":"_posts/java/jvm/jvm-gc-alg.md","raw":"---\ntitle: JVM4种垃圾收集算法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:31:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n## 简介\n\n垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。\n\n\n\n##  标记-清除算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 算法分为**“标记”**和**“清除”**两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，**也可以反过来**，标记存活的对象，统一回收所有未被标记的对象。\n\n### 缺点\n\n- 执行效率不稳定，如果Java堆中包含大量对象，而且**其中大部分是需要被回收的**，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的**执行效率都随对象数量增长而降低**；\n- 第二个是内存空间的碎片化问题，标记、清除之后会**产生大量不连续的内存碎片**，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时**无法找到足够的连续内存**而不得不**提前触发另一次垃圾收集动作**。\n- ![](http://cdn.mjava.top/blog/20200529100358.png)\n\n![标记清除算法](http://cdn.mjava.top/blog/20200528203926.jpeg)\n\n##  标记-复制算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n\n- 它将可用内存按容量划分为**大小相等的两块**，每次只使用其中的一块。\n- 当这一块的内存用完了，就将还**存活着的对象复制到另外一块上面**，然后再把**已使用过的内存空间一次清理掉**。\n\n### 缺点\n\n- 如果内存中**多数对象都是存活的**，这种算法将会**产生大量的内存间复制的开销**\n- 代价是将可用内存缩小为了**原来的一半**,空间浪费未免太多了一点.\n- ![](http://cdn.mjava.top/blog/20200529100420.jpg)\n\n![标记复制算法](http://cdn.mjava.top/blog/20200528203952.jpeg)\n\n##  标记-整理算法\n\n- **标记过程**就是对象是否属于垃圾的判定过程(**采用可达分析算法GC Roots**)\n- 在**标记-清除**的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让**所有存活的对象都向内存空间一端移动**，然后直接**清理掉边界以外的内存**，\n\n### 缺点\n\n- 在有大量存活对象的老年代区域,**移动存活对象**并**更新所有引用**这些对象的地方将会是一种**极为负重**的操作,而且这种对象移动操作**必须全程暂停用户应用程序**才能进行,比**标记-清除**算法停顿时间长.\n- ![](http://cdn.mjava.top/blog/20200529100506.jpg)\n\n![标记整理算法](http://cdn.mjava.top/blog/20200528204014.jpeg)\n\n\n\n## 分代收集算法\n\n现代商用虚拟机基于以上算法的优缺点,根据**分代收集理论**,在不同的区域采用了不同的收集算法.\n\n> <font color=red>老年代:新生代=2:1</font>\n\n![](http://cdn.mjava.top/blog/20200529101100.png)\n\n### 新生代\n\n> 堆大小默认比例:<font color=red>Eden:S0:S1=8:1:1</font>\n>\n> 采用标记-复制算法\n\n新生代分为**Eden区**和**Survior区**,而Survior区又分为**From Survior区(S0)**和**To Survior区(S1)**.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把**Eden区**存活的对象复制到**S0区**,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到**S1区**,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.\n\n### 老年代\n\n> 采用标记-整理法或标记-清理法\n\n当老年代Old区域满时,会触发**Full GC**,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发**OOM异常**;","slug":"java/jvm/jvm-gc-alg","published":1,"updated":"2020-05-29T02:34:07.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04u0088w2g5hdasomnv","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p><h2 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li>\n</ul><a id=\"more\"></a>\n\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100358.png\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528203926.jpeg\" alt=\"标记清除算法\"></p>\n<h2 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h2><ul>\n<li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p>\n</li>\n<li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p>\n</li>\n<li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p>\n</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li>\n<li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100420.jpg\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528203952.jpeg\" alt=\"标记复制算法\"></p>\n<h2 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100506.jpg\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528204014.jpeg\" alt=\"标记整理算法\"></p>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p>\n<blockquote>\n<p><font color=\"red\">老年代:新生代=2:1</font></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200529101100.png\" alt></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><blockquote>\n<p>堆大小默认比例:<font color=\"red\">Eden:S0:S1=8:1:1</font></p>\n<p>采用标记-复制算法</p>\n</blockquote>\n<p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)</strong>和<strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p>\n<h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><blockquote>\n<p>采用标记-整理法或标记-清理法</p>\n</blockquote>\n<p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>垃圾收集算法可以划分为“引用计数式垃圾收集”（Reference Counting GC）和“追踪式垃圾收集”（Tracing GC）两大类，这两类也常被称作“直接垃圾收集”和“间接垃圾收集”。</p><h2 id=\"标记-清除算法\"><a href=\"#标记-清除算法\" class=\"headerlink\" title=\"标记-清除算法\"></a>标记-清除算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>算法分为<strong>“标记”</strong>和<strong>“清除”</strong>两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象，<strong>也可以反过来</strong>，标记存活的对象，统一回收所有未被标记的对象。</li>\n</ul>","more":"\n\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>执行效率不稳定，如果Java堆中包含大量对象，而且<strong>其中大部分是需要被回收的</strong>，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的<strong>执行效率都随对象数量增长而降低</strong>；</li>\n<li>第二个是内存空间的碎片化问题，标记、清除之后会<strong>产生大量不连续的内存碎片</strong>，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时<strong>无法找到足够的连续内存</strong>而不得不<strong>提前触发另一次垃圾收集动作</strong>。</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100358.png\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528203926.jpeg\" alt=\"标记清除算法\"></p>\n<h2 id=\"标记-复制算法\"><a href=\"#标记-复制算法\" class=\"headerlink\" title=\"标记-复制算法\"></a>标记-复制算法</h2><ul>\n<li><p><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</p>\n</li>\n<li><p>它将可用内存按容量划分为<strong>大小相等的两块</strong>，每次只使用其中的一块。</p>\n</li>\n<li><p>当这一块的内存用完了，就将还<strong>存活着的对象复制到另外一块上面</strong>，然后再把<strong>已使用过的内存空间一次清理掉</strong>。</p>\n</li>\n</ul>\n<h3 id=\"缺点-1\"><a href=\"#缺点-1\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>如果内存中<strong>多数对象都是存活的</strong>，这种算法将会<strong>产生大量的内存间复制的开销</strong></li>\n<li>代价是将可用内存缩小为了<strong>原来的一半</strong>,空间浪费未免太多了一点.</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100420.jpg\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528203952.jpeg\" alt=\"标记复制算法\"></p>\n<h2 id=\"标记-整理算法\"><a href=\"#标记-整理算法\" class=\"headerlink\" title=\"标记-整理算法\"></a>标记-整理算法</h2><ul>\n<li><strong>标记过程</strong>就是对象是否属于垃圾的判定过程(<strong>采用可达分析算法GC Roots</strong>)</li>\n<li>在<strong>标记-清除</strong>的算法基础上改进,后续步骤不是直接对可回收对象进行清理，而是让<strong>所有存活的对象都向内存空间一端移动</strong>，然后直接<strong>清理掉边界以外的内存</strong>，</li>\n</ul>\n<h3 id=\"缺点-2\"><a href=\"#缺点-2\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>在有大量存活对象的老年代区域,<strong>移动存活对象</strong>并<strong>更新所有引用</strong>这些对象的地方将会是一种<strong>极为负重</strong>的操作,而且这种对象移动操作<strong>必须全程暂停用户应用程序</strong>才能进行,比<strong>标记-清除</strong>算法停顿时间长.</li>\n<li><img src=\"http://cdn.mjava.top/blog/20200529100506.jpg\" alt></li>\n</ul>\n<p><img src=\"http://cdn.mjava.top/blog/20200528204014.jpeg\" alt=\"标记整理算法\"></p>\n<h2 id=\"分代收集算法\"><a href=\"#分代收集算法\" class=\"headerlink\" title=\"分代收集算法\"></a>分代收集算法</h2><p>现代商用虚拟机基于以上算法的优缺点,根据<strong>分代收集理论</strong>,在不同的区域采用了不同的收集算法.</p>\n<blockquote>\n<p><font color=\"red\">老年代:新生代=2:1</font></p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200529101100.png\" alt></p>\n<h3 id=\"新生代\"><a href=\"#新生代\" class=\"headerlink\" title=\"新生代\"></a>新生代</h3><blockquote>\n<p>堆大小默认比例:<font color=\"red\">Eden:S0:S1=8:1:1</font></p>\n<p>采用标记-复制算法</p>\n</blockquote>\n<p>新生代分为<strong>Eden区</strong>和<strong>Survior区</strong>,而Survior区又分为<strong>From Survior区(S0)</strong>和<strong>To Survior区(S1)</strong>.此区域采用标记-复制算法.每次Minor GC/Young GC时,会把<strong>Eden区</strong>存活的对象复制到<strong>S0区</strong>,然后清空Eden区,当S0区满时,Eden区和S0区存活的对象会复制到<strong>S1区</strong>,然后S0和S0进行交换,永远保持S1为空状态,当新生代的对象经过一定次数的Minor GC还未被回收时,就会把这个对象移到老年代.</p>\n<h3 id=\"老年代\"><a href=\"#老年代\" class=\"headerlink\" title=\"老年代\"></a>老年代</h3><blockquote>\n<p>采用标记-整理法或标记-清理法</p>\n</blockquote>\n<p>当老年代Old区域满时,会触发<strong>Full GC</strong>,同时回收新生代和老生代的所有区域.回收后诺内存还是不足时,会引发<strong>OOM异常</strong>;</p>\n"},{"title":"JVM类加载过程","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-09-16T07:04:22.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 加载\n\n\n\n1. 通过一个类的全限定名(例如：`java.lang.String`)来获取定义此类的二进制字节流。\n\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n2. 在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据的访问入口。\n\n> 对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。\n\n\n\n- 从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。\n\n- 从网络中获取，这种场景最典型的应用就是Web Applet。\n\n- 运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。\n\n- 由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。\n\n- 从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n- 可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。\n\n\n\n## 验证\n\n- 文件格式验证\n  - 是否以魔数0xCAFEBABE开头。\n  - 主、次版本号是否在当前Java虚拟机接受范围之内\n  - 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。\n  - 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n  - CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。\n  - ·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息\n  - ......\n- 元数据验证\n  - 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。\n  - 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。\n  - 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。\n  - 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。\n  - ......\n- 字节码验证\n  - 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。\n  - 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。\n  - 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。\n  - ......\n- 符号引用验证\n  - 符号引用中通过字符串描述的全限定名是否能找到对应的类\n  - 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。\n  - 符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。\n  - ......\n- \n\n## 准备\n\n准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段\n\n例子：\n\n```java\n// 变量value在准备阶段过后的初始值为0而不是123\n// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行\npublic static int value = 123\n```\n\n![](http://cdn.mjava.top/blog/20200726220517.jpeg)\n\n## 解析\n\n解析阶段是Java虚拟机将常量池内的`符号引用`替换为`直接引用`的过程\n\n- **符号引用（Symbolic References）**：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。\n\n  > 下面红框中的都属于符号引用\n\n  ![](http://cdn.mjava.top/blog/20200726220833.png)\n\n- **直接引用（Direct References）**：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。\n\n## 初始化\n\n参考：[jvm类初始化](https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd)","source":"_posts/java/jvm/java-class-load-2.md","raw":"---\ntitle: JVM类加载过程\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-09-16 15:04:22\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- Java\ncategories:\n- JVM\n---\n\n\n\n## 加载\n\n\n\n1. 通过一个类的全限定名(例如：`java.lang.String`)来获取定义此类的二进制字节流。\n\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n2. 在内存中生成一个代表这个类的`java.lang.Class`对象，作为方法区这个类的各种数据的访问入口。\n\n> 对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。\n\n\n\n- 从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。\n\n- 从网络中获取，这种场景最典型的应用就是Web Applet。\n\n- 运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。\n\n- 由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。\n\n- 从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。\n\n- 可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。\n\n\n\n## 验证\n\n- 文件格式验证\n  - 是否以魔数0xCAFEBABE开头。\n  - 主、次版本号是否在当前Java虚拟机接受范围之内\n  - 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。\n  - 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。\n  - CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。\n  - ·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息\n  - ......\n- 元数据验证\n  - 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。\n  - 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。\n  - 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。\n  - 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。\n  - ......\n- 字节码验证\n  - 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。\n  - 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。\n  - 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。\n  - ......\n- 符号引用验证\n  - 符号引用中通过字符串描述的全限定名是否能找到对应的类\n  - 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。\n  - 符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。\n  - ......\n- \n\n## 准备\n\n准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段\n\n例子：\n\n```java\n// 变量value在准备阶段过后的初始值为0而不是123\n// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行\npublic static int value = 123\n```\n\n![](http://cdn.mjava.top/blog/20200726220517.jpeg)\n\n## 解析\n\n解析阶段是Java虚拟机将常量池内的`符号引用`替换为`直接引用`的过程\n\n- **符号引用（Symbolic References）**：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。\n\n  > 下面红框中的都属于符号引用\n\n  ![](http://cdn.mjava.top/blog/20200726220833.png)\n\n- **直接引用（Direct References）**：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。\n\n## 初始化\n\n参考：[jvm类初始化](https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd)","slug":"java/jvm/java-class-load-2","published":1,"updated":"2020-09-16T07:05:00.922Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04w008cw2g5gf97w48k","content":"<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li><p>通过一个类的全限定名(例如：<code>java.lang.String</code>)来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n</li>\n<li><p>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>\n</li>\n</ol><blockquote>\n<p>对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。</p>\n</blockquote><a id=\"more\"></a>\n\n<ul>\n<li><p>从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。</p>\n</li>\n<li><p>从网络中获取，这种场景最典型的应用就是Web Applet。</p>\n</li>\n<li><p>运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。</p>\n</li>\n<li><p>由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。</p>\n</li>\n<li><p>从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</p>\n</li>\n<li><p>可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。</p>\n</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><ul>\n<li>文件格式验证<ul>\n<li>是否以魔数0xCAFEBABE开头。</li>\n<li>主、次版本号是否在当前Java虚拟机接受范围之内</li>\n<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</li>\n<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li>\n<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</li>\n<li>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li>\n<li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li>\n<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</li>\n<li>……</li>\n</ul>\n</li>\n<li>字节码验证<ul>\n<li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</li>\n<li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</li>\n<li>保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</li>\n<li>……</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>\n<li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。</package></li>\n<li>……</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量value在准备阶段过后的初始值为0而不是123</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20200726220517.jpeg\" alt></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>解析阶段是Java虚拟机将常量池内的<code>符号引用</code>替换为<code>直接引用</code>的过程</p>\n<ul>\n<li><p><strong>符号引用（Symbolic References）</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>\n<blockquote>\n<p>下面红框中的都属于符号引用</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726220833.png\" alt></p>\n</li>\n<li><p><strong>直接引用（Direct References）</strong>：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd\" rel=\"noopener\" target=\"_blank\">jvm类初始化</a></p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"加载\"><a href=\"#加载\" class=\"headerlink\" title=\"加载\"></a>加载</h2><ol>\n<li><p>通过一个类的全限定名(例如：<code>java.lang.String</code>)来获取定义此类的二进制字节流。</p>\n</li>\n<li><p>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>\n</li>\n<li><p>在内存中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区这个类的各种数据的访问入口。</p>\n</li>\n</ol><blockquote>\n<p>对于数组类而言，情况就有所不同，数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。</p>\n</blockquote>","more":"\n\n<ul>\n<li><p>从ZIP压缩包中读取，这很常见，最终成为日后JAR、EAR、WAR格式的基础。</p>\n</li>\n<li><p>从网络中获取，这种场景最典型的应用就是Web Applet。</p>\n</li>\n<li><p>运行时计算生成，这种场景使用得最多的就是动态代理技术，在java.lang.reflect.Proxy中，就是用了ProxyGenerator.generateProxyClass()来为特定接口生成形式为“*$Proxy”的代理类的二进制字节流。</p>\n</li>\n<li><p>由其他文件生成，典型场景是JSP应用，由JSP文件生成对应的Class文件。</p>\n</li>\n<li><p>从数据库中读取，这种场景相对少见些，例如有些中间件服务器（如SAP Netweaver）可以选择把程序安装到数据库中来完成程序代码在集群间的分发。</p>\n</li>\n<li><p>可以从加密文件中获取，这是典型的防Class文件被反编译的保护措施，通过加载时解密Class文件来保障程序运行逻辑不被窥探。</p>\n</li>\n</ul>\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><ul>\n<li>文件格式验证<ul>\n<li>是否以魔数0xCAFEBABE开头。</li>\n<li>主、次版本号是否在当前Java虚拟机接受范围之内</li>\n<li>常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。</li>\n<li>指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。</li>\n<li>CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。</li>\n<li>·Class文件中各个部分及文件本身是否有被删除的或附加的其他信息</li>\n<li>……</li>\n</ul>\n</li>\n<li>元数据验证<ul>\n<li>这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。</li>\n<li>这个类的父类是否继承了不允许被继承的类（被final修饰的类）。</li>\n<li>如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。</li>\n<li>类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。</li>\n<li>……</li>\n</ul>\n</li>\n<li>字节码验证<ul>\n<li>保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。</li>\n<li>保证任何跳转指令都不会跳转到方法体以外的字节码指令上。</li>\n<li>保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。</li>\n<li>……</li>\n</ul>\n</li>\n<li>符号引用验证<ul>\n<li>符号引用中通过字符串描述的全限定名是否能找到对应的类</li>\n<li>在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。</li>\n<li>符号引用中的类、字段、方法的可访问性（private、protected、public、<package>）是否可被当前类访问。</package></li>\n<li>……</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><p>准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段</p>\n<p>例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量value在准备阶段过后的初始值为0而不是123</span></span><br><span class=\"line\"><span class=\"comment\">// 因为这时尚未开始执行任何Java方法 value赋值为123的动作要到类的初始化阶段才会被执行</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> value = <span class=\"number\">123</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"http://cdn.mjava.top/blog/20200726220517.jpeg\" alt></p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>解析阶段是Java虚拟机将常量池内的<code>符号引用</code>替换为<code>直接引用</code>的过程</p>\n<ul>\n<li><p><strong>符号引用（Symbolic References）</strong>：符号引用以一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可。符号引用与虚拟机实现的内存布局无关，引用的目标并不一定是已经加载到虚拟机内存当中的内容。各种虚拟机实现的内存布局可以各不相同，但是它们能接受的符号引用必须都是一致的，因为符号引用的字面量形式明确定义在《Java虚拟机规范》的Class文件格式中。</p>\n<blockquote>\n<p>下面红框中的都属于符号引用</p>\n</blockquote>\n<p><img src=\"http://cdn.mjava.top/blog/20200726220833.png\" alt></p>\n</li>\n<li><p><strong>直接引用（Direct References）</strong>：直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。</p>\n</li>\n</ul>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>参考：<a href=\"https://mp.weixin.qq.com/s?__biz=MzAxMTc4NDUyOA==&tempkey=MTA3MV9NS1dJTVFnVDhRQkRid2hBSDB4aUE2X3Nham5Lcm9VMlpXVlIzTGd4dkk0eDNNb29iV3NlaGh0blA3Z25CcmJ6cXBLYzl5Z09zakZSakNTeFdTOUtkbUQzZnNST0pnUUNTOEhkb1J3Ul84MDhPaEw1bGZSVm9TdXNteG5DLUowSDdmUGxYajkxSWFETENkZ0h0NTY1UkJfOC0yV0laXzdyakNfVDdnfn4%3D&chksm=03a1657734d6ec6126a1c6a802506964f632a2dff53f123de74de0f865b83ef11a9b338a187d#rd\" rel=\"noopener\" target=\"_blank\">jvm类初始化</a></p>\n"},{"title":"JVM逃逸分析技术","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-26T08:02:00.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存\n\n简单来讲就是，Java Hotspot 虚拟机可以分析**新创建对象**的使用范围，并决定是否在 Java 堆上分配内存的一项技术。\n\n## 使用\n\n- 开启逃逸分析：-XX:+DoEscapeAnalysis\n- 关闭逃逸分析：-XX:-DoEscapeAnalysis\n- 显示分析结果：-XX:+PrintEscapeAnalysis\n- 逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态\n\n## 逃逸程度\n\n逸分析的基本行为就是分析对象动态作用域,从**不逃逸**、**方法逃逸**到**线程逃逸**，称为对象**由低到高的不同逃逸程度**。\n\n### 方法逃逸\n\n当一个对象在**方法中**被定义后，它可能被**外部方法**所引用，例如作为调用参数传递到其他地方中，称为**方法逃逸**。\n\n ```java\n /*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所\n *改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线\n *程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。\n */\n  public static StringBuffer craeteStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb;\n  }\n  \n  //上述代码如果想要StringBuffer sb不逃出方法，可以这样写：\n  public static String createStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb.toString();\n  }\n ```\n\n\n\n### 线程逃逸\n\n- 当一个对象在**方法中**被定义后，它可能被**外部线程**访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为**线程逃逸**。\n\n\n\n\n\n## 逃逸分析优化\n\n如果能**证明一个对象不会逃逸到方法或线程之外**（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者**逃逸程度比较低**（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例**采取不同程度的优化**\n\n### 栈上分配（Stack Allocations）\n\n- 如果确定一个对象**不会逃逸出线程之外**，那让这个对象在**栈上分配内存**将会是一个很不错的主意，对象所占用的内存空间就可以**随栈帧出栈而销毁**。\n- 由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。\n- 栈上分配可以支持方法逃逸，但不能支持线程逃逸。\n\n### 标量替换（Scalar Replacement）\n\n- 若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为**标量**。相对的，如果一个数据可以继续分解，那它就被称为**聚合量（Aggregate）**，Java中的对象就是典型的聚合量。\n- -XX:+EliminateAllocations\t开启标量替换(jdk8默认开启)\n- -XX:+PrintEliminateAllocations    查看标量的替换情况\n- 如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为**标量替换**\n- 假如逃逸分析能够证明一个对象**不会被方法外部访问**，并且这个对象可以被拆散，那么程序真正执行的时候将**可能不去创建这个对象**，而改为直接创建它的若干个被这个方法使用的**成员变量**来代替。\n- 标量替换可以视作**栈上分配的一种特例**，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它**不允许对象逃逸出方法范围内**。\n\n### 同步消除（Synchronization Elimination）\n\n> 也叫锁消除\n\n- +XX:+EliminateLocks\t开启同步消除(jdk8默认开启)\n- 线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量**不会逃逸出线程**，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的**同步措施**也就可以**安全地消除掉**。\n- 比如常用的线程安全类:`StringBuffer`,`HashTable`,`Vector`等.","source":"_posts/java/jvm/jvm-javastack-EscapeAnalysis.md","raw":"---\ntitle: JVM逃逸分析技术\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-26 16:02:00\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n\n\n逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存\n\n简单来讲就是，Java Hotspot 虚拟机可以分析**新创建对象**的使用范围，并决定是否在 Java 堆上分配内存的一项技术。\n\n## 使用\n\n- 开启逃逸分析：-XX:+DoEscapeAnalysis\n- 关闭逃逸分析：-XX:-DoEscapeAnalysis\n- 显示分析结果：-XX:+PrintEscapeAnalysis\n- 逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态\n\n## 逃逸程度\n\n逸分析的基本行为就是分析对象动态作用域,从**不逃逸**、**方法逃逸**到**线程逃逸**，称为对象**由低到高的不同逃逸程度**。\n\n### 方法逃逸\n\n当一个对象在**方法中**被定义后，它可能被**外部方法**所引用，例如作为调用参数传递到其他地方中，称为**方法逃逸**。\n\n ```java\n /*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所\n *改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线\n *程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。\n */\n  public static StringBuffer craeteStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb;\n  }\n  \n  //上述代码如果想要StringBuffer sb不逃出方法，可以这样写：\n  public static String createStringBuffer(String s1, String s2) {\n      StringBuffer sb = new StringBuffer();\n      sb.append(s1);\n      sb.append(s2);\n      return sb.toString();\n  }\n ```\n\n\n\n### 线程逃逸\n\n- 当一个对象在**方法中**被定义后，它可能被**外部线程**访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为**线程逃逸**。\n\n\n\n\n\n## 逃逸分析优化\n\n如果能**证明一个对象不会逃逸到方法或线程之外**（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者**逃逸程度比较低**（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例**采取不同程度的优化**\n\n### 栈上分配（Stack Allocations）\n\n- 如果确定一个对象**不会逃逸出线程之外**，那让这个对象在**栈上分配内存**将会是一个很不错的主意，对象所占用的内存空间就可以**随栈帧出栈而销毁**。\n- 由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。\n- 栈上分配可以支持方法逃逸，但不能支持线程逃逸。\n\n### 标量替换（Scalar Replacement）\n\n- 若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为**标量**。相对的，如果一个数据可以继续分解，那它就被称为**聚合量（Aggregate）**，Java中的对象就是典型的聚合量。\n- -XX:+EliminateAllocations\t开启标量替换(jdk8默认开启)\n- -XX:+PrintEliminateAllocations    查看标量的替换情况\n- 如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为**标量替换**\n- 假如逃逸分析能够证明一个对象**不会被方法外部访问**，并且这个对象可以被拆散，那么程序真正执行的时候将**可能不去创建这个对象**，而改为直接创建它的若干个被这个方法使用的**成员变量**来代替。\n- 标量替换可以视作**栈上分配的一种特例**，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它**不允许对象逃逸出方法范围内**。\n\n### 同步消除（Synchronization Elimination）\n\n> 也叫锁消除\n\n- +XX:+EliminateLocks\t开启同步消除(jdk8默认开启)\n- 线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量**不会逃逸出线程**，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的**同步措施**也就可以**安全地消除掉**。\n- 比如常用的线程安全类:`StringBuffer`,`HashTable`,`Vector`等.","slug":"java/jvm/jvm-javastack-EscapeAnalysis","published":1,"updated":"2020-05-26T08:05:40.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04x008ew2g5l25asmer","content":"<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p><p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>开启逃逸分析：-XX:+DoEscapeAnalysis</li>\n<li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li>\n<li>显示分析结果：-XX:+PrintEscapeAnalysis</li>\n<li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li>\n</ul><a id=\"more\"></a>\n\n\n<h2 id=\"逃逸程度\"><a href=\"#逃逸程度\" class=\"headerlink\" title=\"逃逸程度\"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p>\n<h3 id=\"方法逃逸\"><a href=\"#方法逃逸\" class=\"headerlink\" title=\"方法逃逸\"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class=\"line\"><span class=\"comment\">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class=\"line\"><span class=\"comment\">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">craeteStringBuffer</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">     StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">     StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程逃逸\"><a href=\"#线程逃逸\" class=\"headerlink\" title=\"线程逃逸\"></a>线程逃逸</h3><ul>\n<li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li>\n</ul>\n<h2 id=\"逃逸分析优化\"><a href=\"#逃逸分析优化\" class=\"headerlink\" title=\"逃逸分析优化\"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p>\n<h3 id=\"栈上分配（Stack-Allocations）\"><a href=\"#栈上分配（Stack-Allocations）\" class=\"headerlink\" title=\"栈上分配（Stack Allocations）\"></a>栈上分配（Stack Allocations）</h3><ul>\n<li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li>\n<li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li>\n<li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li>\n</ul>\n<h3 id=\"标量替换（Scalar-Replacement）\"><a href=\"#标量替换（Scalar-Replacement）\" class=\"headerlink\" title=\"标量替换（Scalar Replacement）\"></a>标量替换（Scalar Replacement）</h3><ul>\n<li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li>\n<li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li>\n<li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li>\n<li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li>\n<li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li>\n<li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li>\n</ul>\n<h3 id=\"同步消除（Synchronization-Elimination）\"><a href=\"#同步消除（Synchronization-Elimination）\" class=\"headerlink\" title=\"同步消除（Synchronization Elimination）\"></a>同步消除（Synchronization Elimination）</h3><blockquote>\n<p>也叫锁消除</p>\n</blockquote>\n<ul>\n<li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li>\n<li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li>\n<li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p>逃逸分析技术的日渐成熟,促使所有的Java对象实例不一定都在Java堆上分配内存</p><p>简单来讲就是，Java Hotspot 虚拟机可以分析<strong>新创建对象</strong>的使用范围，并决定是否在 Java 堆上分配内存的一项技术。</p><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li>开启逃逸分析：-XX:+DoEscapeAnalysis</li>\n<li>关闭逃逸分析：-XX:-DoEscapeAnalysis</li>\n<li>显示分析结果：-XX:+PrintEscapeAnalysis</li>\n<li>逃逸分析技术在 Java SE 6u23+ 开始支持,并默认设置为启用状态</li>\n</ul>","more":"\n\n\n<h2 id=\"逃逸程度\"><a href=\"#逃逸程度\" class=\"headerlink\" title=\"逃逸程度\"></a>逃逸程度</h2><p>逸分析的基本行为就是分析对象动态作用域,从<strong>不逃逸</strong>、<strong>方法逃逸</strong>到<strong>线程逃逸</strong>，称为对象<strong>由低到高的不同逃逸程度</strong>。</p>\n<h3 id=\"方法逃逸\"><a href=\"#方法逃逸\" class=\"headerlink\" title=\"方法逃逸\"></a>方法逃逸</h3><p>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部方法</strong>所引用，例如作为调用参数传递到其他地方中，称为<strong>方法逃逸</strong>。</p>\n <figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*StringBuffer sb是一个方法内部变量，上述代码中直接将sb返回，这样这个StringBuffer有可能被其他方法所</span></span><br><span class=\"line\"><span class=\"comment\">*改变，这样它的作用域就不只是在方法内部，虽然它是一个局部变量，称其逃逸到了方法外部。甚至还有可能被外部线</span></span><br><span class=\"line\"><span class=\"comment\">*程访问到，譬如赋值给类变量或可以在其他线程中访问的实例变量，称为线程逃逸。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> StringBuffer <span class=\"title\">craeteStringBuffer</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">     StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"comment\">//上述代码如果想要StringBuffer sb不逃出方法，可以这样写：</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">createStringBuffer</span><span class=\"params\">(String s1, String s2)</span> </span>&#123;</span><br><span class=\"line\">     StringBuffer sb = <span class=\"keyword\">new</span> StringBuffer();</span><br><span class=\"line\">     sb.append(s1);</span><br><span class=\"line\">     sb.append(s2);</span><br><span class=\"line\">     <span class=\"keyword\">return</span> sb.toString();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程逃逸\"><a href=\"#线程逃逸\" class=\"headerlink\" title=\"线程逃逸\"></a>线程逃逸</h3><ul>\n<li>当一个对象在<strong>方法中</strong>被定义后，它可能被<strong>外部线程</strong>访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为<strong>线程逃逸</strong>。</li>\n</ul>\n<h2 id=\"逃逸分析优化\"><a href=\"#逃逸分析优化\" class=\"headerlink\" title=\"逃逸分析优化\"></a>逃逸分析优化</h2><p>如果能<strong>证明一个对象不会逃逸到方法或线程之外</strong>（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者<strong>逃逸程度比较低</strong>（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例<strong>采取不同程度的优化</strong></p>\n<h3 id=\"栈上分配（Stack-Allocations）\"><a href=\"#栈上分配（Stack-Allocations）\" class=\"headerlink\" title=\"栈上分配（Stack Allocations）\"></a>栈上分配（Stack Allocations）</h3><ul>\n<li>如果确定一个对象<strong>不会逃逸出线程之外</strong>，那让这个对象在<strong>栈上分配内存</strong>将会是一个很不错的主意，对象所占用的内存空间就可以<strong>随栈帧出栈而销毁</strong>。</li>\n<li>由于复杂度等原因，HotSpot中目前暂时还没有做这项优化，但一些其他的虚拟机（如Excelsior JET）使用了这项优化。</li>\n<li>栈上分配可以支持方法逃逸，但不能支持线程逃逸。</li>\n</ul>\n<h3 id=\"标量替换（Scalar-Replacement）\"><a href=\"#标量替换（Scalar-Replacement）\" class=\"headerlink\" title=\"标量替换（Scalar Replacement）\"></a>标量替换（Scalar Replacement）</h3><ul>\n<li>若一个数据已经无法再分解成更小的数据来表示了，Java虚拟机中的原始数据类型（int、long等数值类型及reference类型等）都不能再进一步分解了，那么这些数据就可以被称为<strong>标量</strong>。相对的，如果一个数据可以继续分解，那它就被称为<strong>聚合量（Aggregate）</strong>，Java中的对象就是典型的聚合量。</li>\n<li>-XX:+EliminateAllocations    开启标量替换(jdk8默认开启)</li>\n<li>-XX:+PrintEliminateAllocations    查看标量的替换情况</li>\n<li>如果把一个Java对象拆散，根据程序访问的情况，将其用到的成员变量恢复为原始类型来访问，这个过程就称为<strong>标量替换</strong></li>\n<li>假如逃逸分析能够证明一个对象<strong>不会被方法外部访问</strong>，并且这个对象可以被拆散，那么程序真正执行的时候将<strong>可能不去创建这个对象</strong>，而改为直接创建它的若干个被这个方法使用的<strong>成员变量</strong>来代替。</li>\n<li>标量替换可以视作<strong>栈上分配的一种特例</strong>，实现更简单（不用考虑整个对象完整结构的分配），但对逃逸程度的要求更高，它<strong>不允许对象逃逸出方法范围内</strong>。</li>\n</ul>\n<h3 id=\"同步消除（Synchronization-Elimination）\"><a href=\"#同步消除（Synchronization-Elimination）\" class=\"headerlink\" title=\"同步消除（Synchronization Elimination）\"></a>同步消除（Synchronization Elimination）</h3><blockquote>\n<p>也叫锁消除</p>\n</blockquote>\n<ul>\n<li>+XX:+EliminateLocks    开启同步消除(jdk8默认开启)</li>\n<li>线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量<strong>不会逃逸出线程</strong>，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的<strong>同步措施</strong>也就可以<strong>安全地消除掉</strong>。</li>\n<li>比如常用的线程安全类:<code>StringBuffer</code>,<code>HashTable</code>,<code>Vector</code>等.</li>\n</ul>\n"},{"title":"JAVA四种引用方法使用和对比","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:22:07.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n![](http://cdn.mjava.top/blog/20200526225718)\n\n## 强引用（Strongly Reference）\n\n> 无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n>\n> <font color=red>回收时机:强引用关系不存在时</font>\n\n```java\nObject obj=new Object();\n```\n\n\n\n## 软引用（Soft Reference）\n\n> 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。\n>\n> <font color=red>回收时机:发送内存溢出异常前</font>\n\n```java\n//软引用\n\nSoftReference<Object> srf = new SoftReference<Object>(new Object());\n\n//or\n\nObject obj=new Object();\nSoftReference<Object> srf = new SoftReference<Object>(obj);\nobj=null;  //这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达\n```\n\n\n\n### 弱引用（Weak Reference）\n\n> 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象**只能生存到下一次垃圾收集发生为止**。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。\n>\n> <font color=red>回收时机:下一次垃圾回收时</font>\n\n```java\n//弱引用\n\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\n\n//or\nObject obj=new Object();\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\nobj=null;\n```\n\n\n\n### 虚引用（Phantom Reference）\n\n> 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n>\n> <font color=red>回收时机:随时</font>\n\n```java\n//虚引用\nPhantomReference<Object> prf = new PhantomReference<Object>(new Object(), new ReferenceQueue<>());\n\n//or\n\nObject obj=new Object();\nPhantomReference<Object> prf = new PhantomReference<Object>(obj, new ReferenceQueue<>());\nobj=null;\n```\n","source":"_posts/java/jvm/jvm-object-four-quote.md","raw":"---\ntitle: JAVA四种引用方法使用和对比\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:22:07\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\n- JAVA\ncategories:\n- JVM\n- JAVA\n---\n\n\n\n![](http://cdn.mjava.top/blog/20200526225718)\n\n## 强引用（Strongly Reference）\n\n> 无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。\n>\n> <font color=red>回收时机:强引用关系不存在时</font>\n\n```java\nObject obj=new Object();\n```\n\n\n\n## 软引用（Soft Reference）\n\n> 软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。\n>\n> <font color=red>回收时机:发送内存溢出异常前</font>\n\n```java\n//软引用\n\nSoftReference<Object> srf = new SoftReference<Object>(new Object());\n\n//or\n\nObject obj=new Object();\nSoftReference<Object> srf = new SoftReference<Object>(obj);\nobj=null;  //这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达\n```\n\n\n\n### 弱引用（Weak Reference）\n\n> 弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象**只能生存到下一次垃圾收集发生为止**。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。\n>\n> <font color=red>回收时机:下一次垃圾回收时</font>\n\n```java\n//弱引用\n\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\n\n//or\nObject obj=new Object();\nWeakReference<Object> wrf = new WeakReference<Object>(new Object());\nobj=null;\n```\n\n\n\n### 虚引用（Phantom Reference）\n\n> 虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。\n>\n> <font color=red>回收时机:随时</font>\n\n```java\n//虚引用\nPhantomReference<Object> prf = new PhantomReference<Object>(new Object(), new ReferenceQueue<>());\n\n//or\n\nObject obj=new Object();\nPhantomReference<Object> prf = new PhantomReference<Object>(obj, new ReferenceQueue<>());\nobj=null;\n```\n","slug":"java/jvm/jvm-object-four-quote","published":1,"updated":"2020-05-29T02:37:29.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04y008jw2g5z1quro41","content":"<p><img src=\"http://cdn.mjava.top/blog/20200526225718\" alt></p><h2 id=\"强引用（Strongly-Reference）\"><a href=\"#强引用（Strongly-Reference）\" class=\"headerlink\" title=\"强引用（Strongly Reference）\"></a>强引用（Strongly Reference）</h2><blockquote>\n<p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<p><font color=\"red\">回收时机:强引用关系不存在时</font></p>\n</blockquote><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h2><blockquote>\n<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n<p><font color=\"red\">回收时机:发送内存溢出异常前</font></p>\n</blockquote><a id=\"more\"></a>\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> SoftReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;  <span class=\"comment\">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h3><blockquote>\n<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>\n<p><font color=\"red\">回收时机:下一次垃圾回收时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> WeakReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> WeakReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h3><blockquote>\n<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p>\n<p><font color=\"red\">回收时机:随时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//虚引用</span></span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> PhantomReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object(), <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> PhantomReference&lt;Object&gt;(obj, <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;());</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<p><img src=\"http://cdn.mjava.top/blog/20200526225718\" alt></p><h2 id=\"强引用（Strongly-Reference）\"><a href=\"#强引用（Strongly-Reference）\" class=\"headerlink\" title=\"强引用（Strongly Reference）\"></a>强引用（Strongly Reference）</h2><blockquote>\n<p>无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。</p>\n<p><font color=\"red\">回收时机:强引用关系不存在时</font></p>\n</blockquote><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id=\"软引用（Soft-Reference）\"><a href=\"#软引用（Soft-Reference）\" class=\"headerlink\" title=\"软引用（Soft Reference）\"></a>软引用（Soft Reference）</h2><blockquote>\n<p>软引用是用来描述一些还有用，但非必须的对象。只被软引用关联着的对象，在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，如果这次回收还没有足够的内存，才会抛出内存溢出异常。</p>\n<p><font color=\"red\">回收时机:发送内存溢出异常前</font></p>\n</blockquote>","more":"\n\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//软引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> SoftReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">SoftReference&lt;Object&gt; srf = <span class=\"keyword\">new</span> SoftReference&lt;Object&gt;(obj);</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;  <span class=\"comment\">//这种方法一定要设置obj为null,否则这个对象除了软引用可达外,还有原来强引用也可达</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"弱引用（Weak-Reference）\"><a href=\"#弱引用（Weak-Reference）\" class=\"headerlink\" title=\"弱引用（Weak Reference）\"></a>弱引用（Weak Reference）</h3><blockquote>\n<p>弱引用也是用来描述那些非必须对象，但是它的强度比软引用更弱一些，被弱引用关联的对象<strong>只能生存到下一次垃圾收集发生为止</strong>。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p>\n<p><font color=\"red\">回收时机:下一次垃圾回收时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//弱引用</span></span><br><span class=\"line\"></span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> WeakReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">WeakReference&lt;Object&gt; wrf = <span class=\"keyword\">new</span> WeakReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object());</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚引用（Phantom-Reference）\"><a href=\"#虚引用（Phantom-Reference）\" class=\"headerlink\" title=\"虚引用（Phantom Reference）\"></a>虚引用（Phantom Reference）</h3><blockquote>\n<p>虚引用也称为“幽灵引用”或者“幻影引用”，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。</p>\n<p><font color=\"red\">回收时机:随时</font></p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//虚引用</span></span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> PhantomReference&lt;Object&gt;(<span class=\"keyword\">new</span> Object(), <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//or</span></span><br><span class=\"line\"></span><br><span class=\"line\">Object obj=<span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">PhantomReference&lt;Object&gt; prf = <span class=\"keyword\">new</span> PhantomReference&lt;Object&gt;(obj, <span class=\"keyword\">new</span> ReferenceQueue&lt;&gt;());</span><br><span class=\"line\">obj=<span class=\"keyword\">null</span>;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"JVM判断对象是否还活着的两种方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-29T02:18:30.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 引用计数法\n\n> Java虚拟机**并不是**通过引用计数算法来判断对象是否存活的。\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\n\n### 优点\n\n- 原理简单,判定效率高\n\n### 缺点\n\n- 不能用于复杂的环境中,比如对象的互相引用问题\n\n\n\n##  可达性分析算法\n\n> Java虚拟机使用此算法来判断对象是否存活\n\n这个算法的基本思路就是通过一系列称为“`GC Roots`”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，**搜索过程所走过的路径称为“引用链”（Reference Chain）**，如果某个对象到GCRoots间**没有任何引用链相连**，或者用图论的话来说就是**从GC Roots到这个对象不可达时**，则证明**此对象是不可能再被使用的**。\n\n![](http://cdn.mjava.top/blog/20200526224246.jpeg)\n\n\n\nJava中作为GC Roots的对象:\n\n- 在虚拟机栈（**栈帧中的本地变量表**）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n- 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n- Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n- 所有被同步锁（synchronized关键字）持有的对象。\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n- **其他对象临时性地加入,共同构成GC Roots**","source":"_posts/java/jvm/jvm-object-is-alive.md","raw":"---\ntitle: JVM判断对象是否还活着的两种方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-29 10:18:30\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n\n\n## 引用计数法\n\n> Java虚拟机**并不是**通过引用计数算法来判断对象是否存活的。\n\n在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。\n\n### 优点\n\n- 原理简单,判定效率高\n\n### 缺点\n\n- 不能用于复杂的环境中,比如对象的互相引用问题\n\n\n\n##  可达性分析算法\n\n> Java虚拟机使用此算法来判断对象是否存活\n\n这个算法的基本思路就是通过一系列称为“`GC Roots`”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，**搜索过程所走过的路径称为“引用链”（Reference Chain）**，如果某个对象到GCRoots间**没有任何引用链相连**，或者用图论的话来说就是**从GC Roots到这个对象不可达时**，则证明**此对象是不可能再被使用的**。\n\n![](http://cdn.mjava.top/blog/20200526224246.jpeg)\n\n\n\nJava中作为GC Roots的对象:\n\n- 在虚拟机栈（**栈帧中的本地变量表**）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。\n- 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。\n- 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。\n- 在本地方法栈中JNI（即通常所说的Native方法）引用的对象。\n- Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。\n- 所有被同步锁（synchronized关键字）持有的对象。\n\n- 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。\n- **其他对象临时性地加入,共同构成GC Roots**","slug":"java/jvm/jvm-object-is-alive","published":1,"updated":"2020-05-29T02:21:26.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx04y008kw2g52twnui4t","content":"<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><blockquote>\n<p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p>\n</blockquote><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>原理简单,判定效率高</li>\n</ul><h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>不能用于复杂的环境中,比如对象的互相引用问题</li>\n</ul><h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2><a id=\"more\"></a>\n\n\n\n<blockquote>\n<p>Java虚拟机使用此算法来判断对象是否存活</p>\n</blockquote>\n<p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200526224246.jpeg\" alt></p>\n<p>Java中作为GC Roots的对象:</p>\n<ul>\n<li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n<li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h2><blockquote>\n<p>Java虚拟机<strong>并不是</strong>通过引用计数算法来判断对象是否存活的。</p>\n</blockquote><p>在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。</p><h3 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ul>\n<li>原理简单,判定效率高</li>\n</ul><h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ul>\n<li>不能用于复杂的环境中,比如对象的互相引用问题</li>\n</ul><h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2>","more":"\n\n\n\n<blockquote>\n<p>Java虚拟机使用此算法来判断对象是否存活</p>\n</blockquote>\n<p>这个算法的基本思路就是通过一系列称为“<code>GC Roots</code>”的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，<strong>搜索过程所走过的路径称为“引用链”（Reference Chain）</strong>，如果某个对象到GCRoots间<strong>没有任何引用链相连</strong>，或者用图论的话来说就是<strong>从GC Roots到这个对象不可达时</strong>，则证明<strong>此对象是不可能再被使用的</strong>。</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200526224246.jpeg\" alt></p>\n<p>Java中作为GC Roots的对象:</p>\n<ul>\n<li><p>在虚拟机栈（<strong>栈帧中的本地变量表</strong>）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。</p>\n</li>\n<li><p>在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。</p>\n</li>\n<li><p>在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。</p>\n</li>\n<li><p>在本地方法栈中JNI（即通常所说的Native方法）引用的对象。</p>\n</li>\n<li><p>Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。</p>\n</li>\n<li><p>所有被同步锁（synchronized关键字）持有的对象。</p>\n</li>\n<li><p>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。</p>\n</li>\n<li><p><strong>其他对象临时性地加入,共同构成GC Roots</strong></p>\n</li>\n</ul>\n"},{"title":"JVM运行时数据区域","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-05-26T08:35:47.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n# JVM运行时数据区域\n\n![Java虚拟机运行时数据区](http://cdn.mjava.top/blog/20200526000623.jpeg)\n\n### 程序计数器\n\n- 线程私有\n\n- 唯一一个没有规定 OutOfMemoryError 异常 的区域\n\n- 它可以看作是当前线程所执行的字节码的行号指示器\n\n- 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）\n\n  \n\n  > (摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？\n  >\n  > 答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；**程序计数器里面保存的是 当前线程执行的字节码的行号**（看着像行号，其实是指令地址）；\n  >\n  > 那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，**程序计数器的内存空间是线程私**有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！\n  >\n  > 那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是**线程被创建开始执行的时候，就要一同被创建**； \n  >\n  > 程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是**唯一一个没有规定 OutOfMemoryError 异常 的区域**;\n  >\n  > **当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）**；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 \n\n\n\n### Java虚拟机栈\n\n- 线程私有\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出`StackOverflowError异常`；\n- 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出`OutOfMemoryError异常`；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)\n- **-Xss5m**:\t设置5m的栈容量\n- 每个方法执行都会创建一个**栈帧**，栈帧包含局部变量表、操作数栈、动态连接、方法出口等\n\n### 本地方法栈\n\n- 线程私有\n- 与Java虚拟机栈相似\n\n- 与Java虚拟机栈区别:\tJava虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\n- Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一\n\n- 与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常\n\n### Java堆\n\n- 线程共享\n- 所有的Java对象实例不一定都在Java堆上分配内存\n- Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数`-Xmx`和`-Xms`设定）。\n- 如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出**OutOfMemoryError异常**。\n- Java堆是垃圾收集器(Garbage Collected)管理的内存区域\n\n\n\n### 方法区\n\n- 线程共享\n\n- 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\n\n- 虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作**“非堆”（Non-Heap）**，目的是**与Java堆区分开来**。\n\n- 在JDK1.6及之前,使用`永久代`来实现方法区.\n\n  - -XX:MaxPermSize    设置永久代内存上限\n  - -XX:PermSize    设置永久代内存\n\n- JDK1.7把`字符串常量池`、`类的静态变量(class statics)`转移到了java heap,但是永久代还是存在,主要放一些类信息(`运算时常量池`)等.\n\n  \n\n- JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像`字符串常量池`和`静态变量`还是存在Java Heap中\n\n- 如果方法区无法满足新的内存分配需求时，将抛出**OutOfMemoryError异常**。\n\n","source":"_posts/java/jvm/jvm-running-data-area.md","raw":"---\ntitle: JVM运行时数据区域\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-05-26 16:35:47\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- JVM\ncategories:\n- JVM\n---\n\n# JVM运行时数据区域\n\n![Java虚拟机运行时数据区](http://cdn.mjava.top/blog/20200526000623.jpeg)\n\n### 程序计数器\n\n- 线程私有\n\n- 唯一一个没有规定 OutOfMemoryError 异常 的区域\n\n- 它可以看作是当前线程所执行的字节码的行号指示器\n\n- 如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）\n\n  \n\n  > (摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？\n  >\n  > 答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；**程序计数器里面保存的是 当前线程执行的字节码的行号**（看着像行号，其实是指令地址）；\n  >\n  > 那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，**程序计数器的内存空间是线程私**有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！\n  >\n  > 那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是**线程被创建开始执行的时候，就要一同被创建**； \n  >\n  > 程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是**唯一一个没有规定 OutOfMemoryError 异常 的区域**;\n  >\n  > **当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）**；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 \n\n\n\n### Java虚拟机栈\n\n- 线程私有\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出`StackOverflowError异常`；\n- 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出`OutOfMemoryError异常`；(<font color=red>HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)\n- **-Xss5m**:\t设置5m的栈容量\n- 每个方法执行都会创建一个**栈帧**，栈帧包含局部变量表、操作数栈、动态连接、方法出口等\n\n### 本地方法栈\n\n- 线程私有\n- 与Java虚拟机栈相似\n\n- 与Java虚拟机栈区别:\tJava虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。\n- Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一\n\n- 与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常\n\n### Java堆\n\n- 线程共享\n- 所有的Java对象实例不一定都在Java堆上分配内存\n- Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数`-Xmx`和`-Xms`设定）。\n- 如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出**OutOfMemoryError异常**。\n- Java堆是垃圾收集器(Garbage Collected)管理的内存区域\n\n\n\n### 方法区\n\n- 线程共享\n\n- 用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。\n\n- 虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作**“非堆”（Non-Heap）**，目的是**与Java堆区分开来**。\n\n- 在JDK1.6及之前,使用`永久代`来实现方法区.\n\n  - -XX:MaxPermSize    设置永久代内存上限\n  - -XX:PermSize    设置永久代内存\n\n- JDK1.7把`字符串常量池`、`类的静态变量(class statics)`转移到了java heap,但是永久代还是存在,主要放一些类信息(`运算时常量池`)等.\n\n  \n\n- JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像`字符串常量池`和`静态变量`还是存在Java Heap中\n\n- 如果方法区无法满足新的内存分配需求时，将抛出**OutOfMemoryError异常**。\n\n","slug":"java/jvm/jvm-running-data-area","published":1,"updated":"2020-05-26T08:36:31.663Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx050008ow2g5h6w7qq70","content":"<h1 id=\"JVM运行时数据区域\"><a href=\"#JVM运行时数据区域\" class=\"headerlink\" title=\"JVM运行时数据区域\"></a>JVM运行时数据区域</h1><p><img src=\"http://cdn.mjava.top/blog/20200526000623.jpeg\" alt=\"Java虚拟机运行时数据区\"></p><h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p>\n</li>\n<li><p>它可以看作是当前线程所执行的字节码的行号指示器</p>\n</li>\n<li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p>\n</li>\n</ul><a id=\"more\"></a>\n\n<blockquote>\n<p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p>\n<p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p>\n<p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p>\n<p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p>\n<p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p>\n<p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 </p>\n</blockquote>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><ul>\n<li>线程私有</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li>\n<li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color=\"red\">HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li>\n<li><strong>-Xss5m</strong>:    设置5m的栈容量</li>\n<li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>与Java虚拟机栈相似</p>\n</li>\n<li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>\n</li>\n<li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p>\n</li>\n<li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p>\n</li>\n</ul>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><ul>\n<li>线程共享</li>\n<li>所有的Java对象实例不一定都在Java堆上分配内存</li>\n<li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li>\n<li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li>\n<li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li><p>线程共享</p>\n</li>\n<li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>\n</li>\n<li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p>\n</li>\n<li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p>\n<ul>\n<li>-XX:MaxPermSize    设置永久代内存上限</li>\n<li>-XX:PermSize    设置永久代内存</li>\n</ul>\n</li>\n<li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p>\n</li>\n</ul>\n<ul>\n<li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p>\n</li>\n<li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p>\n</li>\n</ul>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h1 id=\"JVM运行时数据区域\"><a href=\"#JVM运行时数据区域\" class=\"headerlink\" title=\"JVM运行时数据区域\"></a>JVM运行时数据区域</h1><p><img src=\"http://cdn.mjava.top/blog/20200526000623.jpeg\" alt=\"Java虚拟机运行时数据区\"></p><h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>唯一一个没有规定 OutOfMemoryError 异常 的区域</p>\n</li>\n<li><p>它可以看作是当前线程所执行的字节码的行号指示器</p>\n</li>\n<li><p>如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是本地（Native）方法，这个计数器值则应为空（Undefined）</p>\n</li>\n</ul>","more":"\n\n<blockquote>\n<p>(摘自网上)我们想象下，CPU是怎么知道记住之前A线程，执行到哪一处的？</p>\n<p>答案是，CPU根本就不会记住之前执行到哪里了，它只是埋头苦干；那是什么保证了切换线程的程序可以正常执行的；答案是 ： 程序计数器 ；<strong>程序计数器里面保存的是 当前线程执行的字节码的行号</strong>（看着像行号，其实是指令地址）；</p>\n<p>那么，我们需要几个程序计数器呢？如果，我们只有一个的话，切换B线程以后，程序计数器里面保存的就是B线程所执行的字节码的行号了，再切换回A线程，就蒙圈了，不知道执行到哪里了，因为，程序计数器里面保存的是B线程当前执行的字节码地址 ；因此，我们可以想象出，要为每个线程都分配一个程序计数器，因此，<strong>程序计数器的内存空间是线程私</strong>有的 ；这样即使线程 A 被挂起，但是线程 A 里面的程序计数器，记住了A线程当前执行到的字节码的指令地址了 ，等再次切回到A线程的时候，看一下程序计数器，就知道之前执行到哪里了！</p>\n<p>那么程序计数器，什么时候分配内存呢？我们试想下，一个线程在执行的任何期间，都会失去CPU执行权，因此，我们要从一个线程被创建开始执行，就要无时无刻的记录着该线程当前执行到哪里了！因此，线程计数器，必须是<strong>线程被创建开始执行的时候，就要一同被创建</strong>； </p>\n<p>程序计数器，保存的是当前执行的字节码的偏移地址（也就是之前说的行号，其实那不是行号，是指令的偏移地址，只是为了好理解，才说是行号的，），当执行到下一条指令的时候，改变的只是程序计数器中保存的地址，并不需要申请新的内存来保存新的指令地址；因此，永远都不可能内存溢出的；因此，jvm虚拟机规范，也就没有规定，也是<strong>唯一一个没有规定 OutOfMemoryError 异常 的区域</strong>;</p>\n<p><strong>当线程执行的是本地方法的时候，程序计数器中保存的值是空（undefined）</strong>；原因很简单：本地方法是C++/C 写的，由系统调用，根本不会产生字节码文件，因此，程序计数器也就不会做任何记录 </p>\n</blockquote>\n<h3 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h3><ul>\n<li>线程私有</li>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出<code>StackOverflowError异常</code>；</li>\n<li>如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出<code>OutOfMemoryError异常</code>；(<font color=\"red\">HotSpot虚拟机的栈容量是不可以动态扩展的，以前的Classic虚拟机倒是可以。所以在HotSpot虚拟机上是不会由于虚拟机栈无法扩展而导致OutOfMemoryError异常——只要线程申请栈空间成功了就不会有OOM，但是如果申请时就失败，仍然是会出现OOM异常的</font>)</li>\n<li><strong>-Xss5m</strong>:    设置5m的栈容量</li>\n<li>每个方法执行都会创建一个<strong>栈帧</strong>，栈帧包含局部变量表、操作数栈、动态连接、方法出口等</li>\n</ul>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><ul>\n<li><p>线程私有</p>\n</li>\n<li><p>与Java虚拟机栈相似</p>\n</li>\n<li><p>与Java虚拟机栈区别:    Java虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则是为虚拟机使用到的本地（Native）方法服务。</p>\n</li>\n<li><p>Hot-Spot虚拟机直接就把本地方法栈和虚拟机栈合二为一</p>\n</li>\n<li><p>与虚拟机栈一样，本地方法栈也会在栈深度溢出或者栈扩展失败时分别抛出StackOverflowError和OutOfMemoryError异常</p>\n</li>\n</ul>\n<h3 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h3><ul>\n<li>线程共享</li>\n<li>所有的Java对象实例不一定都在Java堆上分配内存</li>\n<li>Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数<code>-Xmx</code>和<code>-Xms</code>设定）。</li>\n<li>如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出<strong>OutOfMemoryError异常</strong>。</li>\n<li>Java堆是垃圾收集器(Garbage Collected)管理的内存区域</li>\n</ul>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><ul>\n<li><p>线程共享</p>\n</li>\n<li><p>用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。</p>\n</li>\n<li><p>虽然《Java虚拟机规范》中把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫作<strong>“非堆”（Non-Heap）</strong>，目的是<strong>与Java堆区分开来</strong>。</p>\n</li>\n<li><p>在JDK1.6及之前,使用<code>永久代</code>来实现方法区.</p>\n<ul>\n<li>-XX:MaxPermSize    设置永久代内存上限</li>\n<li>-XX:PermSize    设置永久代内存</li>\n</ul>\n</li>\n<li><p>JDK1.7把<code>字符串常量池</code>、<code>类的静态变量(class statics)</code>转移到了java heap,但是永久代还是存在,主要放一些类信息(<code>运算时常量池</code>)等.</p>\n</li>\n</ul>\n<ul>\n<li><p>JDK1.8彻底移除永久代,方法区采用本地内存中实现的元空间（Meta-space）来代替,将JDK1.7中永久代的信息移到了元空间,像<code>字符串常量池</code>和<code>静态变量</code>还是存在Java Heap中</p>\n</li>\n<li><p>如果方法区无法满足新的内存分配需求时，将抛出<strong>OutOfMemoryError异常</strong>。</p>\n</li>\n</ul>\n"},{"title":"创建线程的3种方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2020-06-22T08:29:38.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## Java线程状态变迁图\n\n![Java线程状态变迁图](http://cdn.mjava.top/blog/20200602150941.jpeg)\n\n\n\n## 构造一个线程\n\n在线程执行`start()`方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。\n\n**Thread常见参数及设置方法:**\n\n- ```java\n  //线程是否是守护线程  默认false\n  private boolean     daemon = false;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setDaemon(true);\n  ```\n\n- ```java\n  //线程名字\t默认\"Thread-\" + nextThreadNum()\n  private volatile String name;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setName(\"myThread\"); //不能设置为null,会报异常\n  ```\n\n- ```java\n  //线程优先级  是否起作用和操作系统及虚拟机版本相关\n  private int priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  //设置方法  范围:1-10  默认5\n  myThread.setPriority(1);\n  ```\n\n  \n\n### Thread源码构造方法\n\n在Thread源码中,一共提供了`9种`构造方法.\n\n![](http://cdn.mjava.top/blog/20200602151437.png)\n\n从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法<font color=grey>(注:`Thread`也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.\n\n\n\n### 无返回值的线程\n\n可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的\n\n#### 方法一:继承Thread类创建一个线程\n\n```java\n//继承Thread类,重写run方法\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"继承Thread,重写run方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyThread myThread=new MyThread();\n        myThread.start();\n    }\n}\n```\n\n\n\n#### 方法二:实现Runnable接口创建线程\n\n```java\n//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target\nclass MyRun implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"实现Runnable方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyRun myRun=new MyRun();\n        Thread thread=new Thread(myRun);\n        thread.start();\n    }\n}\n```\n\n\n\n### 有返回值的线程\t\n\n上面两个方法,都有一个共同缺点,就是**没有返回值**,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助`FutureTask`来完成了\n\n#### 方法三:通过FutureTask创建一个线程\n\n```java\n//实现Callable接口的call方法   类似实现Runnable的run方法\nclass MyCall implements Callable<Integer>{\n    @Override\n    public Integer call() throws Exception {\n        //计算1+1\n        return 1+1;\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyCall myCall=new MyCall();\n        //创建异步任务\n        FutureTask<Integer> futureTask=new FutureTask<>(myCall);\n        Thread thread2=new Thread(futureTask);\n        thread2.start();\n        //获取线程执行结果\n        Integer res=futureTask.get();\n        System.out.println(res); //输出2\n    }\n}\n```\n\n\n\n## 总结\n\n使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。","source":"_posts/java/thread/create-thread-3.md","raw":"---\ntitle: 创建线程的3种方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2020-06-22 16:29:38\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- 多线程\ncategories:\n- JAVA\n---\n\n\n\n## Java线程状态变迁图\n\n![Java线程状态变迁图](http://cdn.mjava.top/blog/20200602150941.jpeg)\n\n\n\n## 构造一个线程\n\n在线程执行`start()`方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。\n\n**Thread常见参数及设置方法:**\n\n- ```java\n  //线程是否是守护线程  默认false\n  private boolean     daemon = false;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setDaemon(true);\n  ```\n\n- ```java\n  //线程名字\t默认\"Thread-\" + nextThreadNum()\n  private volatile String name;\n  //设置方法\n  Thread thread=new Thread();\n  thread.setName(\"myThread\"); //不能设置为null,会报异常\n  ```\n\n- ```java\n  //线程优先级  是否起作用和操作系统及虚拟机版本相关\n  private int priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n  //设置方法  范围:1-10  默认5\n  myThread.setPriority(1);\n  ```\n\n  \n\n### Thread源码构造方法\n\n在Thread源码中,一共提供了`9种`构造方法.\n\n![](http://cdn.mjava.top/blog/20200602151437.png)\n\n从这些构造方法中,大致可以分为`有Runnable构造参数`的,和`无Runnable构造参数`两大类,无Runnable构造参数的就需要去继承`Thread`来重写`run()`方法<font color=grey>(注:`Thread`也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.\n\n\n\n### 无返回值的线程\n\n可以看到,通过集成`Thread`类和实现`Runnable`接口的`run()`方法返回值都是`void`.这类是没有返回值的\n\n#### 方法一:继承Thread类创建一个线程\n\n```java\n//继承Thread类,重写run方法\nclass MyThread extends Thread{\n    @Override\n    public void run() {\n        System.out.println(\"继承Thread,重写run方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyThread myThread=new MyThread();\n        myThread.start();\n    }\n}\n```\n\n\n\n#### 方法二:实现Runnable接口创建线程\n\n```java\n//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target\nclass MyRun implements Runnable{\n    @Override\n    public void run() {\n        System.out.println(\"实现Runnable方法\");\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyRun myRun=new MyRun();\n        Thread thread=new Thread(myRun);\n        thread.start();\n    }\n}\n```\n\n\n\n### 有返回值的线程\t\n\n上面两个方法,都有一个共同缺点,就是**没有返回值**,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助`FutureTask`来完成了\n\n#### 方法三:通过FutureTask创建一个线程\n\n```java\n//实现Callable接口的call方法   类似实现Runnable的run方法\nclass MyCall implements Callable<Integer>{\n    @Override\n    public Integer call() throws Exception {\n        //计算1+1\n        return 1+1;\n    }\n}\n\npublic class ThreadTest{\n    public static void main(String[] args){\n        MyCall myCall=new MyCall();\n        //创建异步任务\n        FutureTask<Integer> futureTask=new FutureTask<>(myCall);\n        Thread thread2=new Thread(futureTask);\n        thread2.start();\n        //获取线程执行结果\n        Integer res=futureTask.get();\n        System.out.println(res); //输出2\n    }\n}\n```\n\n\n\n## 总结\n\n使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。","slug":"java/thread/create-thread-3","published":1,"updated":"2020-06-22T08:30:17.581Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckglxx051008qw2g569h1lajk","content":"<h2 id=\"Java线程状态变迁图\"><a href=\"#Java线程状态变迁图\" class=\"headerlink\" title=\"Java线程状态变迁图\"></a>Java线程状态变迁图</h2><p><img src=\"http://cdn.mjava.top/blog/20200602150941.jpeg\" alt=\"Java线程状态变迁图\"></p><h2 id=\"构造一个线程\"><a href=\"#构造一个线程\" class=\"headerlink\" title=\"构造一个线程\"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p><p><strong>Thread常见参数及设置方法:</strong></p><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程是否是守护线程  默认false</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>     daemon = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置方法</span></span><br><span class=\"line\">Thread thread=<span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程名字\t默认\"Thread-\" + nextThreadNum()</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> String name;</span><br><span class=\"line\"><span class=\"comment\">//设置方法</span></span><br><span class=\"line\">Thread thread=<span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">thread.setName(<span class=\"string\">\"myThread\"</span>); <span class=\"comment\">//不能设置为null,会报异常</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程优先级  是否起作用和操作系统及虚拟机版本相关</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置方法  范围:1-10  默认5</span></span><br><span class=\"line\">myThread.setPriority(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul><a id=\"more\"></a>\n\n\n\n<h3 id=\"Thread源码构造方法\"><a href=\"#Thread源码构造方法\" class=\"headerlink\" title=\"Thread源码构造方法\"></a>Thread源码构造方法</h3><p>在Thread源码中,一共提供了<code>9种</code>构造方法.</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200602151437.png\" alt></p>\n<p>从这些构造方法中,大致可以分为<code>有Runnable构造参数</code>的,和<code>无Runnable构造参数</code>两大类,无Runnable构造参数的就需要去继承<code>Thread</code>来重写<code>run()</code>方法<font color=\"grey\">(注:<code>Thread</code>也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</p>\n<h3 id=\"无返回值的线程\"><a href=\"#无返回值的线程\" class=\"headerlink\" title=\"无返回值的线程\"></a>无返回值的线程</h3><p>可以看到,通过集成<code>Thread</code>类和实现<code>Runnable</code>接口的<code>run()</code>方法返回值都是<code>void</code>.这类是没有返回值的</p>\n<h4 id=\"方法一-继承Thread类创建一个线程\"><a href=\"#方法一-继承Thread类创建一个线程\" class=\"headerlink\" title=\"方法一:继承Thread类创建一个线程\"></a>方法一:继承Thread类创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承Thread类,重写run方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"继承Thread,重写run方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread myThread=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二-实现Runnable接口创建线程\"><a href=\"#方法二-实现Runnable接口创建线程\" class=\"headerlink\" title=\"方法二:实现Runnable接口创建线程\"></a>方法二:实现Runnable接口创建线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实现Runnable方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyRun myRun=<span class=\"keyword\">new</span> MyRun();</span><br><span class=\"line\">        Thread thread=<span class=\"keyword\">new</span> Thread(myRun);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有返回值的线程\"><a href=\"#有返回值的线程\" class=\"headerlink\" title=\"有返回值的线程\"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p>\n<h4 id=\"方法三-通过FutureTask创建一个线程\"><a href=\"#方法三-通过FutureTask创建一个线程\" class=\"headerlink\" title=\"方法三:通过FutureTask创建一个线程\"></a>方法三:通过FutureTask创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算1+1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyCall myCall=<span class=\"keyword\">new</span> MyCall();</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;Integer&gt; futureTask=<span class=\"keyword\">new</span> FutureTask&lt;&gt;(myCall);</span><br><span class=\"line\">        Thread thread2=<span class=\"keyword\">new</span> Thread(futureTask);</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取线程执行结果</span></span><br><span class=\"line\">        Integer res=futureTask.get();</span><br><span class=\"line\">        System.out.println(res); <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>\n","site":{"data":{"friends":[],"musics":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}],"url":{"url":"http://rs.mjava.top:81"}}},"excerpt":"<h2 id=\"Java线程状态变迁图\"><a href=\"#Java线程状态变迁图\" class=\"headerlink\" title=\"Java线程状态变迁图\"></a>Java线程状态变迁图</h2><p><img src=\"http://cdn.mjava.top/blog/20200602150941.jpeg\" alt=\"Java线程状态变迁图\"></p><h2 id=\"构造一个线程\"><a href=\"#构造一个线程\" class=\"headerlink\" title=\"构造一个线程\"></a>构造一个线程</h2><p>在线程执行<code>start()</code>方法之前,首先需要初始化(NEW)一个线程,初始化的时候,可以设置线程名称,线程所属的线程组、线程优先级、是否是Daemon线程等信息。</p><p><strong>Thread常见参数及设置方法:</strong></p><ul>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程是否是守护线程  默认false</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span>     daemon = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"><span class=\"comment\">//设置方法</span></span><br><span class=\"line\">Thread thread=<span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">thread.setDaemon(<span class=\"keyword\">true</span>);</span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程名字\t默认\"Thread-\" + nextThreadNum()</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> String name;</span><br><span class=\"line\"><span class=\"comment\">//设置方法</span></span><br><span class=\"line\">Thread thread=<span class=\"keyword\">new</span> Thread();</span><br><span class=\"line\">thread.setName(<span class=\"string\">\"myThread\"</span>); <span class=\"comment\">//不能设置为null,会报异常</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//线程优先级  是否起作用和操作系统及虚拟机版本相关</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">int</span> priority;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br><span class=\"line\"><span class=\"comment\">//设置方法  范围:1-10  默认5</span></span><br><span class=\"line\">myThread.setPriority(<span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>","more":"\n\n\n\n<h3 id=\"Thread源码构造方法\"><a href=\"#Thread源码构造方法\" class=\"headerlink\" title=\"Thread源码构造方法\"></a>Thread源码构造方法</h3><p>在Thread源码中,一共提供了<code>9种</code>构造方法.</p>\n<p><img src=\"http://cdn.mjava.top/blog/20200602151437.png\" alt></p>\n<p>从这些构造方法中,大致可以分为<code>有Runnable构造参数</code>的,和<code>无Runnable构造参数</code>两大类,无Runnable构造参数的就需要去继承<code>Thread</code>来重写<code>run()</code>方法<font color=\"grey\">(注:<code>Thread</code>也实现了Runnable接口)</font>,有Runnable构造参数的,就实现Runnable接口的run方法,然后通过构造参数,把实现Runnable接口的实例传入Thread.</p>\n<h3 id=\"无返回值的线程\"><a href=\"#无返回值的线程\" class=\"headerlink\" title=\"无返回值的线程\"></a>无返回值的线程</h3><p>可以看到,通过集成<code>Thread</code>类和实现<code>Runnable</code>接口的<code>run()</code>方法返回值都是<code>void</code>.这类是没有返回值的</p>\n<h4 id=\"方法一-继承Thread类创建一个线程\"><a href=\"#方法一-继承Thread类创建一个线程\" class=\"headerlink\" title=\"方法一:继承Thread类创建一个线程\"></a>方法一:继承Thread类创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//继承Thread类,重写run方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"继承Thread,重写run方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyThread myThread=<span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        myThread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法二-实现Runnable接口创建线程\"><a href=\"#方法二-实现Runnable接口创建线程\" class=\"headerlink\" title=\"方法二:实现Runnable接口创建线程\"></a>方法二:实现Runnable接口创建线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Runnable接口的run方法,然后以构造参数的形式设置Thread的target</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRun</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"实现Runnable方法\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyRun myRun=<span class=\"keyword\">new</span> MyRun();</span><br><span class=\"line\">        Thread thread=<span class=\"keyword\">new</span> Thread(myRun);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"有返回值的线程\"><a href=\"#有返回值的线程\" class=\"headerlink\" title=\"有返回值的线程\"></a>有返回值的线程</h3><p>上面两个方法,都有一个共同缺点,就是<strong>没有返回值</strong>,当有一些特殊需求时,比如开启一个线程,用来计算一些东西,或者是处理另外一些需要返回数据的业务,这时就需要借助<code>FutureTask</code>来完成了</p>\n<h4 id=\"方法三-通过FutureTask创建一个线程\"><a href=\"#方法三-通过FutureTask创建一个线程\" class=\"headerlink\" title=\"方法三:通过FutureTask创建一个线程\"></a>方法三:通过FutureTask创建一个线程</h4><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//实现Callable接口的call方法   类似实现Runnable的run方法</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyCall</span> <span class=\"keyword\">implements</span> <span class=\"title\">Callable</span>&lt;<span class=\"title\">Integer</span>&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//计算1+1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreadTest</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        MyCall myCall=<span class=\"keyword\">new</span> MyCall();</span><br><span class=\"line\">        <span class=\"comment\">//创建异步任务</span></span><br><span class=\"line\">        FutureTask&lt;Integer&gt; futureTask=<span class=\"keyword\">new</span> FutureTask&lt;&gt;(myCall);</span><br><span class=\"line\">        Thread thread2=<span class=\"keyword\">new</span> Thread(futureTask);</span><br><span class=\"line\">        thread2.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取线程执行结果</span></span><br><span class=\"line\">        Integer res=futureTask.get();</span><br><span class=\"line\">        System.out.println(res); <span class=\"comment\">//输出2</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>使用继承方式的好处是方便传参，你可以在子类里面添加成员变量，通过set方法设置参数或者通过构造函数进行传递，而如果使用Runnable方式，则只能使用主线程里面被声明为final的变量。不好的地方是Java不支持多继承，如果继承了Thread类，那么子类不能再继承其他类，而Runable则没有这个限制。前两种方式都没办法拿到任务的返回结果，但是Futuretask方式可以。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckglxx01q0007w2g599ydep82","category_id":"ckglxx01w0009w2g5zxxrzats","_id":"ckglxx023000kw2g5vdw987uv"},{"post_id":"ckglxx01u0008w2g5nb9dbkzp","category_id":"ckglxx01w0009w2g5zxxrzats","_id":"ckglxx025000pw2g59bbdis0z"},{"post_id":"ckglxx01y000bw2g5vl29yf67","category_id":"ckglxx01w0009w2g5zxxrzats","_id":"ckglxx027000tw2g55pu3b5s3"},{"post_id":"ckglxx01z000cw2g5fat5po8e","category_id":"ckglxx025000ow2g5pshjl7ma","_id":"ckglxx02a000zw2g591knqdwo"},{"post_id":"ckglxx020000dw2g5fqnjn5jb","category_id":"ckglxx025000ow2g5pshjl7ma","_id":"ckglxx02c0014w2g5mmttnlmd"},{"post_id":"ckglxx022000hw2g5ktrtgyzm","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02e001cw2g58x4659co"},{"post_id":"ckglxx023000iw2g5umarutee","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02h001iw2g5sqxogdiw"},{"post_id":"ckglxx024000mw2g5ioegmw60","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02k001ow2g5damk8niv"},{"post_id":"ckglxx025000nw2g566s1bzjv","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02m001uw2g5sh821jte"},{"post_id":"ckglxx026000rw2g5jcfli77v","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02o0021w2g5w9tqfa2l"},{"post_id":"ckglxx027000sw2g5skow2lj4","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02q0028w2g5foduhj0i"},{"post_id":"ckglxx028000ww2g5ehwt3d8k","category_id":"ckglxx029000yw2g56ts28tbk","_id":"ckglxx02s002dw2g5ites1fxo"},{"post_id":"ckglxx029000xw2g5r03fu4ie","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx02u002nw2g5xs2klb7p"},{"post_id":"ckglxx02a0010w2g5qp0hhs0z","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx02w002tw2g5db8qvjuz"},{"post_id":"ckglxx02b0013w2g5v60mylqy","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx02y002zw2g548c9uf26"},{"post_id":"ckglxx02c0017w2g5unqckygm","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx02z0033w2g5ne1gyxrn"},{"post_id":"ckglxx02d001aw2g5vdq7ih9o","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx0300037w2g55ulxu9tz"},{"post_id":"ckglxx02f001ew2g5ap7o8s79","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx030003dw2g5x5rbjilm"},{"post_id":"ckglxx02g001gw2g5l9063936","category_id":"ckglxx02q0027w2g5rrlob9pr","_id":"ckglxx031003hw2g5py9hamsg"},{"post_id":"ckglxx02h001kw2g545cf9rzd","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx032003lw2g5xfcs4xnt"},{"post_id":"ckglxx02i001mw2g51d0aa68i","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx033003pw2g5rup8zc9g"},{"post_id":"ckglxx02k001qw2g5eqvsce3x","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx034003tw2g54s4s998t"},{"post_id":"ckglxx02l001sw2g5fviz53h9","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx034003xw2g58sfd3fws"},{"post_id":"ckglxx02m001ww2g501cds6ex","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx0350041w2g59dssisnd"},{"post_id":"ckglxx02n001yw2g5moep733u","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx0360045w2g5gu1e311v"},{"post_id":"ckglxx02o0023w2g533fspzvd","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx0380049w2g5ng1z7uq2"},{"post_id":"ckglxx02p0025w2g5dkxsnp84","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx039004cw2g5gqcz6ph0"},{"post_id":"ckglxx02q002aw2g5r99tu52p","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx03a004hw2g58x82wmru"},{"post_id":"ckglxx02r002cw2g5amf7tfru","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx03a004jw2g5p2n5iv38"},{"post_id":"ckglxx02s002hw2g56dd3hysy","category_id":"ckglxx03a004gw2g5d8mxhh67","_id":"ckglxx03c004pw2g56ua3hk0r"},{"post_id":"ckglxx02t002jw2g5c09k7fre","category_id":"ckglxx03a004gw2g5d8mxhh67","_id":"ckglxx03c004sw2g57ts825yo"},{"post_id":"ckglxx02u002ow2g5fmz28edc","category_id":"ckglxx03a004gw2g5d8mxhh67","_id":"ckglxx03d004vw2g5cfu8ppgz"},{"post_id":"ckglxx02v002qw2g5r3xfwcgc","category_id":"ckglxx03c004rw2g50swzlwxl","_id":"ckglxx03e0050w2g5epc7psx8"},{"post_id":"ckglxx02w002vw2g5l7ncrtvb","category_id":"ckglxx03c004rw2g50swzlwxl","_id":"ckglxx03e0052w2g5fvysalsb"},{"post_id":"ckglxx03u006fw2g5nmcelcte","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx03y006mw2g5vjj2pnlo"},{"post_id":"ckglxx03s006bw2g55izkl3ea","category_id":"ckglxx03u006dw2g50aqd3qux","_id":"ckglxx03z006pw2g56b5sx0my"},{"post_id":"ckglxx03t006cw2g5xkcpqwk9","category_id":"ckglxx03x006iw2g5mpnkm1r3","_id":"ckglxx041006vw2g5e7yjwxt2"},{"post_id":"ckglxx040006sw2g55py1dki1","category_id":"ckglxx03z006qw2g5p4k9ctij","_id":"ckglxx042006zw2g578zmj7ws"},{"post_id":"ckglxx03w006gw2g5f8oxboou","category_id":"ckglxx03z006qw2g5p4k9ctij","_id":"ckglxx0420072w2g56u78e4nm"},{"post_id":"ckglxx03w006hw2g5y9ve8a2j","category_id":"ckglxx03z006qw2g5p4k9ctij","_id":"ckglxx0420073w2g5n6hax07s"},{"post_id":"ckglxx03x006lw2g5xjfqel1d","category_id":"ckglxx0420070w2g53cef29sm","_id":"ckglxx0430077w2g5dl26foft"},{"post_id":"ckglxx03y006ow2g53mrjys7u","category_id":"ckglxx0420074w2g5gnyqwjr6","_id":"ckglxx044007aw2g5opjllzqi"},{"post_id":"ckglxx04e007lw2g5wzsneqwa","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx04g007ow2g5nl3j6y0j"},{"post_id":"ckglxx04f007mw2g5dxd1kgkw","category_id":"ckglxx02z0032w2g5muaoanbp","_id":"ckglxx04g007pw2g5j8d7s8p8"},{"post_id":"ckglxx04o007yw2g5gc2hgaix","category_id":"ckglxx04q0080w2g5he6ccuez","_id":"ckglxx04v008aw2g5hz3ivfn0"},{"post_id":"ckglxx04p007zw2g57nkl47l7","category_id":"ckglxx04q0080w2g5he6ccuez","_id":"ckglxx04x008gw2g5ux6utyqa"},{"post_id":"ckglxx04q0082w2g5faquefmz","category_id":"ckglxx04q0080w2g5he6ccuez","_id":"ckglxx04z008lw2g53dxt8oxv"},{"post_id":"ckglxx04r0083w2g5m8bf9h6m","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx051008sw2g51495ss0h"},{"post_id":"ckglxx04y008kw2g52twnui4t","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx052008vw2g5groyorlt"},{"post_id":"ckglxx050008ow2g5h6w7qq70","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx053008xw2g5y36m2331"},{"post_id":"ckglxx04s0084w2g5wg3p8uzy","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx053008yw2g5xxqwteqa"},{"post_id":"ckglxx04t0087w2g5j6g8o334","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx0540092w2g5br6ybitg"},{"post_id":"ckglxx04u0088w2g5hdasomnv","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx0540096w2g5f8apfrrr"},{"post_id":"ckglxx04w008cw2g5gf97w48k","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx056009bw2g54lgn8h6v"},{"post_id":"ckglxx04x008ew2g5l25asmer","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx056009fw2g5nii7hcmk"},{"post_id":"ckglxx04y008jw2g5z1quro41","category_id":"ckglxx04x008fw2g52qr2g74o","_id":"ckglxx058009lw2g5u0wv3fe3"},{"post_id":"ckglxx04y008jw2g5z1quro41","category_id":"ckglxx055009aw2g5v23bqeyu","_id":"ckglxx058009mw2g54fwauohq"},{"post_id":"ckglxx051008qw2g569h1lajk","category_id":"ckglxx056009hw2g5cfkvh9o1","_id":"ckglxx059009pw2g5sshacc6f"}],"PostTag":[{"post_id":"ckglxx01q0007w2g599ydep82","tag_id":"ckglxx01x000aw2g5tleg70s0","_id":"ckglxx021000gw2g57pz3pzzf"},{"post_id":"ckglxx01u0008w2g5nb9dbkzp","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02b0012w2g5qhl279c9"},{"post_id":"ckglxx01u0008w2g5nb9dbkzp","tag_id":"ckglxx024000lw2g5y1f8rkm2","_id":"ckglxx02c0016w2g52iqpgnh1"},{"post_id":"ckglxx01u0008w2g5nb9dbkzp","tag_id":"ckglxx026000qw2g5s4kxbiyq","_id":"ckglxx02d0019w2g5dasqqiy9"},{"post_id":"ckglxx01u0008w2g5nb9dbkzp","tag_id":"ckglxx028000vw2g5b7h6bxiw","_id":"ckglxx02f001dw2g5tkyksd5p"},{"post_id":"ckglxx02f001ew2g5ap7o8s79","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02h001jw2g544n62kqc"},{"post_id":"ckglxx02h001kw2g545cf9rzd","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02k001pw2g5yuiyqfhd"},{"post_id":"ckglxx01y000bw2g5vl29yf67","tag_id":"ckglxx02a0011w2g532arfmcx","_id":"ckglxx02m001vw2g5fdhgkoml"},{"post_id":"ckglxx01y000bw2g5vl29yf67","tag_id":"ckglxx01x000aw2g5tleg70s0","_id":"ckglxx02n001xw2g5xgrd646k"},{"post_id":"ckglxx01y000bw2g5vl29yf67","tag_id":"ckglxx02g001fw2g5khb3h3xb","_id":"ckglxx02o0022w2g5yqqqkuxy"},{"post_id":"ckglxx01y000bw2g5vl29yf67","tag_id":"ckglxx02i001lw2g56uj6py9b","_id":"ckglxx02p0024w2g5eah5avwv"},{"post_id":"ckglxx02k001qw2g5eqvsce3x","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02q0029w2g5klu4n65n"},{"post_id":"ckglxx02l001sw2g5fviz53h9","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02r002bw2g5mv2207ok"},{"post_id":"ckglxx02m001ww2g501cds6ex","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02s002fw2g56oie2bbc"},{"post_id":"ckglxx02n001yw2g5moep733u","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02t002iw2g5llyzgpkx"},{"post_id":"ckglxx02o0023w2g533fspzvd","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02u002lw2g5z164o2pz"},{"post_id":"ckglxx01z000cw2g5fat5po8e","tag_id":"ckglxx02l001rw2g5l9y5e1yr","_id":"ckglxx02v002pw2g5pm1ky4rq"},{"post_id":"ckglxx01z000cw2g5fat5po8e","tag_id":"ckglxx02o001zw2g50my6b2so","_id":"ckglxx02w002rw2g5rmhodlk5"},{"post_id":"ckglxx01z000cw2g5fat5po8e","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx02x002ww2g5ahczxi0v"},{"post_id":"ckglxx02u002ow2g5fmz28edc","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx02y002xw2g5rcs5c564"},{"post_id":"ckglxx02u002ow2g5fmz28edc","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx02z0031w2g546m8y156"},{"post_id":"ckglxx020000dw2g5fqnjn5jb","tag_id":"ckglxx02o001zw2g50my6b2so","_id":"ckglxx02z0035w2g5if9zw94g"},{"post_id":"ckglxx020000dw2g5fqnjn5jb","tag_id":"ckglxx02u002kw2g5q9krt5lz","_id":"ckglxx0300036w2g5vkqmuwe3"},{"post_id":"ckglxx020000dw2g5fqnjn5jb","tag_id":"ckglxx02l001rw2g5l9y5e1yr","_id":"ckglxx030003aw2g5f8v2k58a"},{"post_id":"ckglxx020000dw2g5fqnjn5jb","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx030003bw2g5amyw8v2k"},{"post_id":"ckglxx022000hw2g5ktrtgyzm","tag_id":"ckglxx02z0034w2g5ygcu0k0x","_id":"ckglxx031003fw2g5ikxsq9oh"},{"post_id":"ckglxx022000hw2g5ktrtgyzm","tag_id":"ckglxx0300039w2g5fh8x3k45","_id":"ckglxx031003iw2g5mtolaz65"},{"post_id":"ckglxx023000iw2g5umarutee","tag_id":"ckglxx02z0034w2g5ygcu0k0x","_id":"ckglxx033003nw2g58s2zufgr"},{"post_id":"ckglxx023000iw2g5umarutee","tag_id":"ckglxx032003jw2g5kf98yd42","_id":"ckglxx033003qw2g5xijetpil"},{"post_id":"ckglxx024000mw2g5ioegmw60","tag_id":"ckglxx02z0034w2g5ygcu0k0x","_id":"ckglxx034003vw2g5ppn9v56q"},{"post_id":"ckglxx024000mw2g5ioegmw60","tag_id":"ckglxx033003rw2g5m837xmhf","_id":"ckglxx035003yw2g58do8ghal"},{"post_id":"ckglxx025000nw2g566s1bzjv","tag_id":"ckglxx02z0034w2g5ygcu0k0x","_id":"ckglxx0360043w2g5w95u1v40"},{"post_id":"ckglxx025000nw2g566s1bzjv","tag_id":"ckglxx035003zw2g5uah40he1","_id":"ckglxx0360046w2g5ti6qwgyc"},{"post_id":"ckglxx026000rw2g5jcfli77v","tag_id":"ckglxx0350042w2g5yv49mrfu","_id":"ckglxx039004dw2g5ba6zgqzr"},{"post_id":"ckglxx026000rw2g5jcfli77v","tag_id":"ckglxx0380047w2g5q860bc65","_id":"ckglxx039004ew2g5o82ruk3v"},{"post_id":"ckglxx027000sw2g5skow2lj4","tag_id":"ckglxx0350042w2g5yv49mrfu","_id":"ckglxx03b004lw2g51aggcl3l"},{"post_id":"ckglxx027000sw2g5skow2lj4","tag_id":"ckglxx03a004fw2g5ocy24zxn","_id":"ckglxx03b004mw2g5ho84ua67"},{"post_id":"ckglxx028000ww2g5ehwt3d8k","tag_id":"ckglxx02z0034w2g5ygcu0k0x","_id":"ckglxx03d004tw2g5s9vi45ro"},{"post_id":"ckglxx028000ww2g5ehwt3d8k","tag_id":"ckglxx03b004nw2g5ojb25t54","_id":"ckglxx03d004uw2g51qpj1pi3"},{"post_id":"ckglxx029000xw2g5r03fu4ie","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03d004yw2g56veqsvyc"},{"post_id":"ckglxx02a0010w2g5qp0hhs0z","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03f0054w2g5gfbxrho9"},{"post_id":"ckglxx02a0010w2g5qp0hhs0z","tag_id":"ckglxx02l001rw2g5l9y5e1yr","_id":"ckglxx03f0055w2g5xsuhqumh"},{"post_id":"ckglxx02a0010w2g5qp0hhs0z","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx03f0057w2g5cwxbp5b6"},{"post_id":"ckglxx02b0013w2g5v60mylqy","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03f0058w2g59729sfiq"},{"post_id":"ckglxx02c0017w2g5unqckygm","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03g005cw2g5zkjw9ka4"},{"post_id":"ckglxx02c0017w2g5unqckygm","tag_id":"ckglxx03f0059w2g5npaasb6d","_id":"ckglxx03g005dw2g5x680esba"},{"post_id":"ckglxx02c0017w2g5unqckygm","tag_id":"ckglxx02l001rw2g5l9y5e1yr","_id":"ckglxx03h005fw2g531yqd1nq"},{"post_id":"ckglxx02d001aw2g5vdq7ih9o","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03h005gw2g5r61ckx75"},{"post_id":"ckglxx02g001gw2g5l9063936","tag_id":"ckglxx03c004qw2g5i6482msv","_id":"ckglxx03h005iw2g5lsv6s39f"},{"post_id":"ckglxx02i001mw2g51d0aa68i","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx03i005lw2g5n0hejut5"},{"post_id":"ckglxx02i001mw2g51d0aa68i","tag_id":"ckglxx03h005hw2g59atr5jy3","_id":"ckglxx03i005mw2g5753alx4o"},{"post_id":"ckglxx02i001mw2g51d0aa68i","tag_id":"ckglxx03h005jw2g5b8adk3jp","_id":"ckglxx03i005ow2g5mdiflovy"},{"post_id":"ckglxx02p0025w2g5dkxsnp84","tag_id":"ckglxx03h005kw2g5z35zcu1u","_id":"ckglxx03i005pw2g52iek7nuf"},{"post_id":"ckglxx02q002aw2g5r99tu52p","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx03j005sw2g5nje7sscg"},{"post_id":"ckglxx02q002aw2g5r99tu52p","tag_id":"ckglxx03i005nw2g5jvwd4abl","_id":"ckglxx03j005tw2g54blcp02j"},{"post_id":"ckglxx02q002aw2g5r99tu52p","tag_id":"ckglxx02u002kw2g5q9krt5lz","_id":"ckglxx03j005vw2g5ha4itujp"},{"post_id":"ckglxx02r002cw2g5amf7tfru","tag_id":"ckglxx03j005rw2g5k4a2nzv2","_id":"ckglxx03j005xw2g5sq4xrldx"},{"post_id":"ckglxx02r002cw2g5amf7tfru","tag_id":"ckglxx03j005uw2g55h94wj01","_id":"ckglxx03j005yw2g5xi5utwja"},{"post_id":"ckglxx02s002hw2g56dd3hysy","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx03k0060w2g554wb2k1y"},{"post_id":"ckglxx02s002hw2g56dd3hysy","tag_id":"ckglxx02l001rw2g5l9y5e1yr","_id":"ckglxx03k0061w2g5z5qlc3lu"},{"post_id":"ckglxx02s002hw2g56dd3hysy","tag_id":"ckglxx03j005ww2g53f2ghvtg","_id":"ckglxx03k0063w2g5jx40y1ms"},{"post_id":"ckglxx02t002jw2g5c09k7fre","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx03k0064w2g5u3juh394"},{"post_id":"ckglxx02t002jw2g5c09k7fre","tag_id":"ckglxx03j005zw2g5r3qux97a","_id":"ckglxx03l0066w2g58gwjb4oh"},{"post_id":"ckglxx02v002qw2g5r3xfwcgc","tag_id":"ckglxx02u002kw2g5q9krt5lz","_id":"ckglxx03l0067w2g5zmyjiaa2"},{"post_id":"ckglxx02v002qw2g5r3xfwcgc","tag_id":"ckglxx03k0062w2g5k4so5doy","_id":"ckglxx03l0068w2g5l3b7baeo"},{"post_id":"ckglxx02w002vw2g5l7ncrtvb","tag_id":"ckglxx02u002kw2g5q9krt5lz","_id":"ckglxx03l0069w2g5q6ejociq"},{"post_id":"ckglxx02w002vw2g5l7ncrtvb","tag_id":"ckglxx03k0062w2g5k4so5doy","_id":"ckglxx03l006aw2g59dkxobxk"},{"post_id":"ckglxx03s006bw2g55izkl3ea","tag_id":"ckglxx03u006ew2g5kkx95sfv","_id":"ckglxx03x006kw2g5ivid51ef"},{"post_id":"ckglxx03s006bw2g55izkl3ea","tag_id":"ckglxx02q0026w2g5d52asqjv","_id":"ckglxx03y006nw2g5z2ecpwtv"},{"post_id":"ckglxx03t006cw2g5xkcpqwk9","tag_id":"ckglxx03x006jw2g5jc4067x8","_id":"ckglxx040006tw2g5fnusfkr3"},{"post_id":"ckglxx03t006cw2g5xkcpqwk9","tag_id":"ckglxx02u002kw2g5q9krt5lz","_id":"ckglxx041006uw2g5by5qydq3"},{"post_id":"ckglxx03u006fw2g5nmcelcte","tag_id":"ckglxx03z006rw2g5i8tedyd0","_id":"ckglxx041006yw2g5v78pwyls"},{"post_id":"ckglxx03w006gw2g5f8oxboou","tag_id":"ckglxx041006xw2g5smt5tg97","_id":"ckglxx0430076w2g54z1qtann"},{"post_id":"ckglxx03w006gw2g5f8oxboou","tag_id":"ckglxx0420071w2g565lg9fxh","_id":"ckglxx0430078w2g5faaprbv9"},{"post_id":"ckglxx03w006hw2g5y9ve8a2j","tag_id":"ckglxx0420075w2g53qxk3j4w","_id":"ckglxx045007cw2g5yauahcl4"},{"post_id":"ckglxx03w006hw2g5y9ve8a2j","tag_id":"ckglxx0430079w2g5d5btdhpd","_id":"ckglxx045007dw2g5cmlf5vgg"},{"post_id":"ckglxx03x006lw2g5xjfqel1d","tag_id":"ckglxx044007bw2g5t3akuweg","_id":"ckglxx046007gw2g5qo57t73a"},{"post_id":"ckglxx03x006lw2g5xjfqel1d","tag_id":"ckglxx045007ew2g5qdks8uzc","_id":"ckglxx047007hw2g5dytuuokk"},{"post_id":"ckglxx03y006ow2g53mrjys7u","tag_id":"ckglxx03z006rw2g5i8tedyd0","_id":"ckglxx048007jw2g51iacw8ys"},{"post_id":"ckglxx040006sw2g55py1dki1","tag_id":"ckglxx048007iw2g5j4kl7e2p","_id":"ckglxx048007kw2g5swnz0vhm"},{"post_id":"ckglxx04e007lw2g5wzsneqwa","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx04g007sw2g5ugqzy0d4"},{"post_id":"ckglxx04e007lw2g5wzsneqwa","tag_id":"ckglxx04f007nw2g5wcr4qojz","_id":"ckglxx04g007tw2g56jsrj5if"},{"post_id":"ckglxx04e007lw2g5wzsneqwa","tag_id":"ckglxx04g007qw2g5ll1dl8ih","_id":"ckglxx04h007uw2g57ow2i9f5"},{"post_id":"ckglxx04f007mw2g5dxd1kgkw","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx04h007vw2g58t6o68bg"},{"post_id":"ckglxx04f007mw2g5dxd1kgkw","tag_id":"ckglxx03h005jw2g5b8adk3jp","_id":"ckglxx04h007ww2g593v83gsp"},{"post_id":"ckglxx04f007mw2g5dxd1kgkw","tag_id":"ckglxx04g007rw2g5vcbxw1xy","_id":"ckglxx04h007xw2g570gxn0ac"},{"post_id":"ckglxx04o007yw2g5gc2hgaix","tag_id":"ckglxx04q0081w2g5f3lcqj76","_id":"ckglxx04w008dw2g5jmmzbo2g"},{"post_id":"ckglxx04o007yw2g5gc2hgaix","tag_id":"ckglxx04s0086w2g58dy86bq6","_id":"ckglxx04x008hw2g57xu5xj5n"},{"post_id":"ckglxx04p007zw2g57nkl47l7","tag_id":"ckglxx04v008bw2g5l86uno70","_id":"ckglxx050008pw2g5utdzknoh"},{"post_id":"ckglxx04p007zw2g57nkl47l7","tag_id":"ckglxx04x008iw2g58dsia94c","_id":"ckglxx052008tw2g5mrkoe6hp"},{"post_id":"ckglxx04q0082w2g5faquefmz","tag_id":"ckglxx04z008nw2g5yppl92dr","_id":"ckglxx0530090w2g5ci6yxmlv"},{"post_id":"ckglxx04q0082w2g5faquefmz","tag_id":"ckglxx052008uw2g5bv95ftj3","_id":"ckglxx0540093w2g57fwpwtgh"},{"post_id":"ckglxx04r0083w2g5m8bf9h6m","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx0540097w2g5zd8vfxgt"},{"post_id":"ckglxx04r0083w2g5m8bf9h6m","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx0550098w2g58212v5iy"},{"post_id":"ckglxx04s0084w2g5wg3p8uzy","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx056009cw2g56exyakfd"},{"post_id":"ckglxx04s0084w2g5wg3p8uzy","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx056009dw2g5uk5ctwjj"},{"post_id":"ckglxx04t0087w2g5j6g8o334","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx056009gw2g5fqy8uaon"},{"post_id":"ckglxx04t0087w2g5j6g8o334","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx057009iw2g5yb3nn3w1"},{"post_id":"ckglxx04u0088w2g5hdasomnv","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx057009kw2g5wk732evk"},{"post_id":"ckglxx04w008cw2g5gf97w48k","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx059009ow2g5q96fb6ue"},{"post_id":"ckglxx04w008cw2g5gf97w48k","tag_id":"ckglxx020000fw2g5lvajmmej","_id":"ckglxx059009qw2g5fmn3v1st"},{"post_id":"ckglxx04x008ew2g5l25asmer","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx05a009sw2g5a9o9cv1n"},{"post_id":"ckglxx04y008jw2g5z1quro41","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx05b009vw2g5i7amuujx"},{"post_id":"ckglxx04y008jw2g5z1quro41","tag_id":"ckglxx05a009tw2g5s32mf02q","_id":"ckglxx05b009ww2g57if8pggt"},{"post_id":"ckglxx04y008kw2g52twnui4t","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx05b009yw2g5hxn41e05"},{"post_id":"ckglxx050008ow2g5h6w7qq70","tag_id":"ckglxx053008zw2g5oaq54vy4","_id":"ckglxx05c00a0w2g50xpvs25t"},{"post_id":"ckglxx051008qw2g569h1lajk","tag_id":"ckglxx05c009zw2g5xw6uguaz","_id":"ckglxx05c00a1w2g5oz35bqhv"}],"Tag":[{"name":"数据结构","_id":"ckglxx01x000aw2g5tleg70s0"},{"name":"Java","_id":"ckglxx020000fw2g5lvajmmej"},{"name":"Recursive","_id":"ckglxx024000lw2g5y1f8rkm2"},{"name":"Algorithm","_id":"ckglxx026000qw2g5s4kxbiyq"},{"name":"Json","_id":"ckglxx028000vw2g5b7h6bxiw"},{"name":"AVL","_id":"ckglxx02a0011w2g532arfmcx"},{"name":"平衡二叉树","_id":"ckglxx02g001fw2g5khb3h3xb"},{"name":"二叉树","_id":"ckglxx02i001lw2g56uj6py9b"},{"name":"Docker","_id":"ckglxx02l001rw2g5l9y5e1yr"},{"name":"Mysql","_id":"ckglxx02o001zw2g50my6b2so"},{"name":"Linux","_id":"ckglxx02q0026w2g5d52asqjv"},{"name":"Pit","_id":"ckglxx02u002kw2g5q9krt5lz"},{"name":"设计模式","_id":"ckglxx02z0034w2g5ygcu0k0x"},{"name":"抽象工厂模式","_id":"ckglxx0300039w2g5fh8x3k45"},{"name":"建造者模式","_id":"ckglxx032003jw2g5kf98yd42"},{"name":"工厂方法模式","_id":"ckglxx033003rw2g5m837xmhf"},{"name":"模板方法模式","_id":"ckglxx035003zw2g5uah40he1"},{"name":"GOF","_id":"ckglxx0350042w2g5yv49mrfu"},{"name":"OOP","_id":"ckglxx0380047w2g5q860bc65"},{"name":"Singleton","_id":"ckglxx03a004fw2g5ocy24zxn"},{"name":"原型模式","_id":"ckglxx03b004nw2g5ojb25t54"},{"name":"Jenkins","_id":"ckglxx03c004qw2g5i6482msv"},{"name":"SonarQube","_id":"ckglxx03f0059w2g5npaasb6d"},{"name":"ArrayList","_id":"ckglxx03h005hw2g59atr5jy3"},{"name":"源码解析","_id":"ckglxx03h005jw2g5b8adk3jp"},{"name":"Nacos","_id":"ckglxx03h005kw2g5z35zcu1u"},{"name":"Base64","_id":"ckglxx03i005nw2g5jvwd4abl"},{"name":"Logback","_id":"ckglxx03j005rw2g5k4a2nzv2"},{"name":"MDC","_id":"ckglxx03j005uw2g55h94wj01"},{"name":"RaspberryPi","_id":"ckglxx03j005ww2g53f2ghvtg"},{"name":"fastDFS","_id":"ckglxx03j005zw2g5r3qux97a"},{"name":"MySQL","_id":"ckglxx03k0062w2g5k4so5doy"},{"name":"RocketMQ","_id":"ckglxx03u006ew2g5kkx95sfv"},{"name":"Vue","_id":"ckglxx03x006jw2g5jc4067x8"},{"name":"Git","_id":"ckglxx03z006rw2g5i8tedyd0"},{"name":"Spring AOP","_id":"ckglxx041006xw2g5smt5tg97"},{"name":"注解","_id":"ckglxx0420071w2g565lg9fxh"},{"name":"Fegin","_id":"ckglxx0420075w2g53qxk3j4w"},{"name":"Resttemplate","_id":"ckglxx0430079w2g5d5btdhpd"},{"name":"UI","_id":"ckglxx044007bw2g5t3akuweg"},{"name":"推荐","_id":"ckglxx045007ew2g5qdks8uzc"},{"name":"SpringBoot","_id":"ckglxx048007iw2g5j4kl7e2p"},{"name":"源码分析","_id":"ckglxx04f007nw2g5wcr4qojz"},{"name":"LinkedList","_id":"ckglxx04g007qw2g5ll1dl8ih"},{"name":"ArrayDeque","_id":"ckglxx04g007rw2g5vcbxw1xy"},{"name":"SSO","_id":"ckglxx04q0081w2g5f3lcqj76"},{"name":"CAS框架","_id":"ckglxx04s0086w2g58dy86bq6"},{"name":"OAuth2.0","_id":"ckglxx04v008bw2g5l86uno70"},{"name":"JWT","_id":"ckglxx04x008iw2g58dsia94c"},{"name":"OAuth","_id":"ckglxx04z008nw2g5yppl92dr"},{"name":"spring-security","_id":"ckglxx052008uw2g5bv95ftj3"},{"name":"JVM","_id":"ckglxx053008zw2g5oaq54vy4"},{"name":"JAVA","_id":"ckglxx05a009tw2g5s32mf02q"},{"name":"多线程","_id":"ckglxx05c009zw2g5xw6uguaz"}]}}