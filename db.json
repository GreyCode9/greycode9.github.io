{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","path":"baidu-verify-9BFFE2B7F8.txt","modified":1,"renderable":0},{"_id":"source/root.txt","path":"root.txt","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/images/nrmls.png","path":"images/nrmls.png","modified":1,"renderable":0},{"_id":"source/images/nrmuse.png","path":"images/nrmuse.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate.png","path":"images/vuecreate.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate2.png","path":"images/vuecreate2.png","modified":1,"renderable":0},{"_id":"source/images/vuecreate3.png","path":"images/vuecreate3.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_16_16_7-3.svg","path":"images/logo_16_16_7-3.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_16_16_7-3.png","path":"images/logo_16_16_7-3.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_180_180_82.svg","path":"images/logo_180_180_82.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_256_256_116-7.svg","path":"images/logo_256_256_116-7.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_32_32_14-6.png","path":"images/logo_32_32_14-6.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_32_32_14-6.svg","path":"images/logo_32_32_14-6.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_512_512_233-5.svg","path":"images/logo_512_512_233-5.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo_bak.svg","path":"images/logo_bak.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"6ac1a441d26185b407703ab9ffa5959860e49773","modified":1567499036664},{"_id":"source/404.md","hash":"9e6f55d7c01343e1ffd36d55860587fd269d6cb6","modified":1565538056161},{"_id":"source/baidu-verify-9BFFE2B7F8.txt","hash":"50cc3c23409426c3e28cf8800423ecda502f1eb8","modified":1573740556097},{"_id":"source/ea667b0f708cd4ded0b79ebbdd99373a.html","hash":"8285746bede8562c1bc26a88041d01ca82127d20","modified":1573745067447},{"_id":"source/root.txt","hash":"51c99f66271aedfff930264c82fdbe9b4d05b67e","modified":1574392658514},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1573713420554},{"_id":"source/robots.txt","hash":"c18cc8be26a5c74b1c2f6ee7775647c07197ab67","modified":1573792794334},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1573713420554},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1573713420554},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1573713420554},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1573713420554},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1573713420554},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1573713420554},{"_id":"themes/next/README.md","hash":"a0430372844df9caea6e9bf96492775ed42a4578","modified":1573713420554},{"_id":"themes/next/_config.yml","hash":"6b5f960d04c94d439b092c14d8fec4253f425cc8","modified":1574330909809},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1573713420554},{"_id":"themes/next/gulpfile.js","hash":"72e6d5a6e32d5f95d82e4c4d0c963d39555bb760","modified":1573713420558},{"_id":"themes/next/package.json","hash":"b7fd0a53c7cb4c40c6f236065bfed34e6188e786","modified":1573713420562},{"_id":"source/_data/friends.json","hash":"855ca7e4e0c1c862e50b76ecfb4184cc39df46fe","modified":1572424650083},{"_id":"source/_data/musics.json","hash":"b7b2bea12131e17849a781cf379ce62776513270","modified":1572424606783},{"_id":"source/_data/url.yml","hash":"130b11df7a8a42f800e103e994c948f2130785e3","modified":1567670838571},{"_id":"source/_posts/test.md","hash":"f6e9840943461116ef9880919656714278827a4a","modified":1575961257756},{"_id":"source/about/index.md","hash":"6ac84d6e965e43adf038c725696b0d092e1c539a","modified":1565538056161},{"_id":"source/categories/index.md","hash":"5c03e8bf8ebfd90090c540be943e1433aadb685a","modified":1574332247873},{"_id":"source/friends/index.md","hash":"75fb0e0cea8341302f9dd72c6cdab156ead139d3","modified":1565538056161},{"_id":"source/images/nrmls.png","hash":"4b5016f2b844e38a61bd1fb44cc6dd7c44be123e","modified":1567670007657},{"_id":"source/images/nrmuse.png","hash":"c7bc96979ddcd9e1c9b7de09d98f510b76c89940","modified":1567670142956},{"_id":"source/images/vuecreate.png","hash":"f85fb6b87192b4bb5521c29a3e1932888c18609b","modified":1567668935851},{"_id":"source/images/vuecreate2.png","hash":"b270c1135532825f1be47c229fa78eb14bcfa499","modified":1567669323828},{"_id":"source/tags/index.md","hash":"0f067daff94309177dc8d71f9ecbf4a7c8d616e8","modified":1574332230853},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1573713420538},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1573713420538},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1573713408142},{"_id":"themes/next/.git/index","hash":"c12bdf8f4025d3db6c358f45e1d48dbdc1b09108","modified":1573713420570},{"_id":"themes/next/.git/packed-refs","hash":"e80cae5e36d800818aa2643d241c009f8cae362c","modified":1573713420534},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1573713420554},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"838201a0284e90843cd8e762e290c9bd7f10e993","modified":1573713420554},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2a4ff75ccb91d9001032c08e22489096b850bf4f","modified":1573713420554},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1573713420554},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1573713420554},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1573713420554},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1573713420554},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1573713420554},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1573713420554},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1573713420554},{"_id":"themes/next/.github/stale.yml","hash":"941209526c2f7d916c76163c9e1ac1af9d956679","modified":1573713420554},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1573713420554},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1573713420554},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"5b4c013e0598b3211ebd899265936cfdaf7c139f","modified":1573713420554},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1573713420558},{"_id":"themes/next/docs/DATA-FILES.md","hash":"d0d46cb265f0efceffce82214cd36d8b82ddce13","modified":1573713420558},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1573713420558},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"08cda41b4bcf687facfda19ab39718ec7a05ae54","modified":1573713420558},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1573713420558},{"_id":"themes/next/docs/MATH.md","hash":"f520b336f16665e164d6edf075bdcc6aa17b31bc","modified":1573713420558},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"199e9ef3cb5928af0fe801d03d2d1aeea704cea4","modified":1573713420558},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1573713420558},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1573713420558},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1573713420558},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1573713420558},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1573713420558},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1573713420558},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1573713420558},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1573713420558},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1573713420558},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1573713420558},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1573713420558},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1573713420558},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1573713420558},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1573713420558},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1573713420558},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1573713420558},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1573713420558},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1573713420558},{"_id":"themes/next/languages/zh-CN.yml","hash":"e92e1e07a89c9fab27f445f9ec0fa35049fef38c","modified":1573713420558},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1573713420558},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1573713420558},{"_id":"themes/next/layout/_layout.swig","hash":"512bdf6787b5d9fb1d40b126b0fa8e6f1018d1cd","modified":1573713420558},{"_id":"themes/next/layout/archive.swig","hash":"59155648f6306888077d1f1d635f63177b36148d","modified":1573713420562},{"_id":"themes/next/layout/category.swig","hash":"c55debb2588e4746b02d31ec249bf0a84fdea260","modified":1573713420562},{"_id":"themes/next/layout/index.swig","hash":"92822212a07206bf8832c0b405d18810ae0949c9","modified":1573786340342},{"_id":"themes/next/layout/page.swig","hash":"e61d64c055b6497a04affc143f47fdd0a6dc495b","modified":1573713420562},{"_id":"themes/next/layout/post.swig","hash":"a98d603684f2ab4591da8518d3d911b0b0ca25d2","modified":1573787024986},{"_id":"themes/next/layout/tag.swig","hash":"7ff6e34d557a3da1c6a29ecd97842bf73ff213dc","modified":1574330338377},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1573713420562},{"_id":"source/images/vuecreate3.png","hash":"18ad1a8dba3920753ec8b0441cbc057b99cade1f","modified":1567669445975},{"_id":"source/_posts/algorithm/algorithm-recursive-01.md","hash":"2b286fda02c79701d7218bd33293bc7ba9c4b84e","modified":1575714760434},{"_id":"source/_posts/docker/docker-mysql.md","hash":"d0b3d7e1c847fa4a8728203feadb975b8802ed26","modified":1575714760434},{"_id":"source/_posts/gof/gof-singleton.md","hash":"3fa02e192fbec3077b8478565fe9099758138eaa","modified":1574315638887},{"_id":"source/_posts/java/java-8-stream-method.md","hash":"936349a4acbeb50c1dc2c8040a94abd75f77249c","modified":1575943005635},{"_id":"source/_posts/java/java-array-init.md","hash":"85995b4a0a9f03679016e42477d168982857ca74","modified":1575859465415},{"_id":"source/_posts/java/java-equals.md","hash":"6a3f4d08afb15480038263aa8624369f2596bd3b","modified":1575714760434},{"_id":"source/_posts/java/java-integer-int.md","hash":"4f68118a52752afd86b7da377d2dbe356bbc239f","modified":1573715659014},{"_id":"source/_posts/java/java-isnull-four.md","hash":"b3393fcb504a687fb782728ec0723256ac1ba115","modified":1575714760434},{"_id":"source/_posts/java/nacos-post-error.md","hash":"fac1d611ab4471ad417450457868bac7fb1a4098","modified":1573746823558},{"_id":"source/_posts/java/problem-java-base64.md","hash":"423d236fa289c5bd0f1f9a185c6a6a10cff941ef","modified":1573716813765},{"_id":"source/_posts/jenkins/build-jenkins-ci-cd.md","hash":"eb111fa32374e4a542b4d0a06f6c78332524255b","modified":1575714760434},{"_id":"source/_posts/jenkins/build-jenkins-docker.md","hash":"90e805bcf5bdba885da4824112145d3de838df30","modified":1575714760434},{"_id":"source/_posts/jenkins/build-jenkins-mavne.md","hash":"c0b09c7ccc1b363989357c3bdfd031e544a2e0d0","modified":1575714760434},{"_id":"source/_posts/jenkins/problem-jenkins-01.md","hash":"5eb6cf6e419ee52b76ee5b703de4ed9ebb2654bb","modified":1575714760434},{"_id":"source/_posts/jenkins/problem-jenkins-02.md","hash":"94bc6c81cf6e16d618afa674ec99abf266c6c73e","modified":1575714760434},{"_id":"source/_posts/linux/build-docker-pi.md","hash":"f7bd3e6cf1b94a922c350abe8c0224f0893f6c05","modified":1573716878183},{"_id":"source/_posts/linux/problem-jdk-timezone.md","hash":"3170b50dea6e6c832306747b81885c2ae921832d","modified":1573715696331},{"_id":"source/_posts/rocketmq/rocketmq-cluster-build.md","hash":"5d992b8e9bb016fd09bdf811cbe81fa70b39b635","modified":1575714760434},{"_id":"source/_posts/spring/spring-boot-resttemplate-example.md","hash":"fbfb25931165c3596f31806bbe4dd78337d214df","modified":1575714760434},{"_id":"source/_posts/vue/vue-cli3-11-problem.md","hash":"6c4f20413d88487d55371da3e119a0d938d08bec","modified":1573738717918},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1573713408146},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1573713408146},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1573713408146},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1573713408146},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1573713408146},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1573713408146},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1573713408146},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1573713408142},{"_id":"themes/next/.git/logs/HEAD","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"a0601577b77b8ad89742dc99f98edebf9cc45c10","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"6d79701dd0bb3757722650d9df30eeaacd83344e","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"bf8b10715f5529cc6997501d821307895710ba58","modified":1573713420554},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"35a9e1469962a9a163abd0b83677a412516272ef","modified":1573713420554},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1573713420558},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"2665f6a9d72090f9452a8811544ff2596e8899be","modified":1573713420558},{"_id":"themes/next/docs/ru/README.md","hash":"7302b2e5318c0c13e6484aa6487be29599ebc2b2","modified":1573713420558},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"fe3f5cda1975114884d84bef384a562920d70335","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"4245fe9472647226692fcbdd5a52d6e6dcd251bc","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"ebacdc94f6f9724a7c6ef7c3cdde41ff7c37931a","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"3b4dbf0d2ca12ab442b7e0e227769ce100b8a444","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"3ef324cee2761da762eaa5d8d9b9f9601dc264bc","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"264d131b8865bae069f8e4d78a33a0f59d28e36b","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"2d60a18340c9260cd4dc81fe8acc7983d6b2d011","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1766bd2e528ec148d3c5dd55e6be55449fcda94e","modified":1573713420558},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"8109a531d3a7f5a306e36d4304c11f0c7c180c87","modified":1573713420558},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"815676d904f92748ddf4f529bed2baf066997bc6","modified":1573713420558},{"_id":"themes/next/layout/_macro/post.swig","hash":"73659d188030dbc0e0efb939118dc08b46dd430d","modified":1573713420558},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e2c9db54cc9e154e882008fde6588b065fadc9a7","modified":1573713420558},{"_id":"themes/next/layout/_partials/comments.swig","hash":"3a72e3d72980fa0944008b36b284b044d0e84b2a","modified":1573713420558},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a1d11a2f179242146bb2b87d4a4c43463178bc64","modified":1574316590017},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"b9d3f6534efb9e637ac46318fa07c2e5607bf830","modified":1573713420558},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1573713420558},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1573713420558},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1573713420562},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"9675acc599ffa546f05a60375c1637b0327be4fd","modified":1573713420562},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1573713420562},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1573713420562},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1573713420562},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1573713420562},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"dd6bd817cb69b5ad5e9746498146314b54054ff8","modified":1573713420562},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1573713420562},{"_id":"themes/next/scripts/events/index.js","hash":"ac2945693791e62a3046248f2a511afadcaebc16","modified":1573713420562},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1573713420562},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1573713420562},{"_id":"themes/next/scripts/filters/locals.js","hash":"2601d05d44ad2b59370477cb8f61dd95898a1a9c","modified":1573713420562},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1573713420562},{"_id":"themes/next/scripts/filters/post.js","hash":"3c1e483c2c4a1c5a2f9a99b81ce0fda5fd21926b","modified":1573713420562},{"_id":"themes/next/scripts/helpers/engine.js","hash":"b357cbc5d5b39b1bb5221149e7d358135a7ba56d","modified":1573713420562},{"_id":"themes/next/scripts/helpers/font.js","hash":"32268fb4c59c5b37c1eb1c9582ab630e09e5cc7d","modified":1573713420562},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"e60e6c0aaa979d42b01685ba2a03a76fa6e059e2","modified":1573713420562},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1573713420562},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1573713420562},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1573713420562},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8f86694a57d30685c4ced381f1ed09e8114dbb6e","modified":1573713420562},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1573713420562},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1573713420562},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1573713420562},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1573713420562},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1573713420562},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1573713420562},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1573713420566},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1573713420566},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1573713420566},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1573713420566},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1573713420566},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1573713420566},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1573713420566},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1573713420566},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1573713420566},{"_id":"themes/next/source/images/logo_16_16_7-3.svg","hash":"cc1ff6e3dd1a82b703ed71a084de10a46e29edcf","modified":1574325685207},{"_id":"themes/next/source/images/logo_16_16_7-3.png","hash":"1aba4261552797bf81a44ebfaf3a17eb93e887ca","modified":1574326889819},{"_id":"themes/next/source/images/logo_180_180_82.svg","hash":"6143c45a71228aec5c8907a6a9da4206165ffcd2","modified":1574326366061},{"_id":"themes/next/source/images/logo_256_256_116-7.svg","hash":"e5dc902cd8f7e2b89aefb9579978aa998fc083fd","modified":1574325887642},{"_id":"themes/next/source/images/logo_32_32_14-6.png","hash":"85e3d17c0b5731ba32d1059c0cb77aeb2c31a26d","modified":1574326929516},{"_id":"themes/next/source/images/logo_32_32_14-6.svg","hash":"356c9c77914260098e02fee9887fcd1802fe419b","modified":1574325790152},{"_id":"themes/next/source/images/logo_512_512_233-5.svg","hash":"9708ed7eb3f9960f0c7b718a64286e15cc307415","modified":1574325981887},{"_id":"themes/next/source/images/logo_bak.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1573713420566},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1573713420566},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1573713420566},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1573713420566},{"_id":"themes/next/source/js/bookmark.js","hash":"c9acb262acf0cf127497b570fa9479fb32f34547","modified":1573713420566},{"_id":"themes/next/source/js/local-search.js","hash":"fda0f761ae20577f22c1528dde7ae059368fe9a8","modified":1573713420566},{"_id":"themes/next/source/js/motion.js","hash":"9ac69597315b5b7b4c8900b7949d2a31387d6284","modified":1573713420566},{"_id":"themes/next/source/js/next-boot.js","hash":"f7045763e277e685c271bd4b4c37e531d699ac63","modified":1573713420566},{"_id":"themes/next/source/js/utils.js","hash":"a2984bf0631756a904cd43f8e3a8f6fb15b9ceb5","modified":1573713420566},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1573713420566},{"_id":"themes/next/.git/refs/heads/master","hash":"e2c4f0f617e999a7e88046088cad6d575de491fc","modified":1573713420538},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"f5d2c5a3421ae52888be62e2c837459d1175cc93","modified":1573713420558},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"0f4565e123e2ceccaff08316bc38151cda7fcbc4","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"7487ca8f0e4b16351ea0d6b35dc52b0d32176d57","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"30528a8da30994b1ef9355a72b09b2cd85a7c0e9","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"ff33b5797f5e4b5cbcb3c222c17bc636c6b88df6","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d488664bc16608b5f829f959c2058b4381be244a","modified":1573713420558},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"fbec9f77139e1f300509c38446416b4b26350cfa","modified":1573713420558},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1573713420558},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"a56e4f6ad95c106f361d354f828d1ef4810b1d76","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"becfa683c3e5409e20cdb7b1dc8a6db331bddefe","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1573713420558},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"78cb2077f50bc3b81130a516ffc04bc1fcea5834","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1573713420558},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1573713420558},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"d4f94b643ac87d4d858cd8a6f70e030613f98b48","modified":1573713420558},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"246ff123cbaa507f23514c0c51c6cc006685898e","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1573713420562},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"194201cce870c1af6f5123a62cb766cd24e46217","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1573713420562},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1573713420562},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1573713420562},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"fe3cdd70224bd0c8171513a5dfed7b85deb7f23d","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"9719cb5858896aef86c2e0bec0ace259936680c4","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"8063f65cdaae80840fcf427b875ae606f678dfa5","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1573713420562},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"a9c8e7987b63b9ef66e47b966aea05ac77ff920a","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1573713420562},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"fb27a38f9a4b8fcba4f637b03904f7a83cc73416","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"e456d7a2aaabe55447f78cd952b30d70a6c1e742","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1573713420562},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"7f2941d119abca6627561fb010dad96fa48d2092","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1573713420562},{"_id":"themes/next/layout/_third-party/statistics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1573713420562},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"4958fa997ff6df2b2ce05341f40cc3a81b0f91bb","modified":1573713420562},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7fa72dc60c078842979861622839b109683e05a3","modified":1573713420562},{"_id":"themes/next/scripts/events/lib/config.js","hash":"246e55d48f2f3ef510c11594c7c08ddb93ac0928","modified":1573713420562},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1573713420562},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d84b7606df9d52d3296bd98482ede39fad55d8c3","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1fc2a94b94108175848ba9541d05898c071386d0","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"d2ce60980fc148bfb877981aabd07bf45d2cdcda","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"c081166868e6428a07c51c5674b86b7a4cc9c2a8","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1573713420562},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"5201cd09a5e263282ccbf205f07d46f4c6d3f700","modified":1573713420562},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1573713420566},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0a25f3df1b5c39794365efde387647da81da884a","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"52550138127ae9ebbe049bcdacd94d767c003855","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"b9d7058db61df7bbd2b58779efe45621a06ffc18","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"c261d685c5ed0df34718d94bb2ba977c0ed443e6","modified":1573713420566},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"50bc57e66331c0f15a4527010b4ca3316ac92403","modified":1573713420566},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e76e0e411c9892004e73e1bb7b3c1cca2191eedc","modified":1573713420566},{"_id":"themes/next/source/js/schemes/muse.js","hash":"792f4522a3b0b96584a041a4aca20fcded410079","modified":1573713420566},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"dccbb1be3938050e13277251ab5d88c736edf396","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1573713420566},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1573713420570},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1573713420570},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1573713420538},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"80d359661d08b80ad561b97f8508766b3e1f6d01","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"47ee915d7b0a97e74140a25fbfc01c04d6781534","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"112f5e8f1fe5cec4419e87acfbdef0e615ed23f3","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"41c7cd1b63d49476ed5fbdd26ab9411d8f44bd05","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"170c4598cbbe49cd1527f94158d97d2320a6b906","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"990bd301ce2de0a6b936781c58318f3945d81bc2","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"44fe82eadbdbb2f66adda37ac83ebd0f85876bfc","modified":1573713420562},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"2067e15799a3a3cda8bfe7782d67a4dc42f1ef79","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"d8ba44b8e1a0332c5c1079ff65fc83d2918a5865","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"f3c5f1dadc01042381444102d35174dacc6f079a","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"08c2679a31f195940fe1e6c76e64799fb21cda99","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4341f0e057b42e8c47629bb3196fca3b49f0cc19","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"24a086a6904bbf5355a354403c9b0e6069f7eb01","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"48743ac61af37a4de2026667e15a65de5e8cf542","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"e321bd62f5e04d1fdc101a470ec13604e99816a5","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"316ee13fc26d327c8862c2455211144c180cf9c1","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f5abb2ea7746586738fb4e82107fceed041708ee","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c0ed534696ed86560c95ab2a3541b2b42a41ed39","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"c59226767164285d6708d8762f937f93bab264ca","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0424a1fcffa1ae82fe70935972a894aca885bf9a","modified":1573713420566},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1573713420570},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1573713420570},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"72346f2f3340bb7b1dfdd3bf0e74ed8591ea0e8b","modified":1573713420538},{"_id":"themes/next/.git/objects/pack/pack-6a1c0dbbd040071fcc9bde9e78ce12bc59cd04ef.idx","hash":"2af6b92a3fca10e77b5982a927434049da1d4308","modified":1573713420518},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6336c2b129db802221b1fd75e5fbe8aab85c0a1f","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"98227b4de364b48b11e21efcf4f1beb2ed3ab329","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"4b84f35e7040f9adb5cc540c366d7f9eb4c48bcc","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"e3ade812b5541eca5b863ad3ff234ea95925bf31","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"d557a0de91a428330b43cdae9f1ec7167d24e2e4","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"3566136c06d96b34e1e7a3eca72fb0f40a63af80","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f8ba308231cf81453e41457796e94f1ce886d855","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"13d6737e3e85c62626fa8467533a8bdcc2f55410","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2d9d68a431a334626d463bb1bdfbcd2ea8242e94","modified":1573713420562},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"5528a755b180312d008054653633d857aeeb6780","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"0672ea2acf28dcc2cfc5244da36d3387d71a17cb","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"4b237e2344f35e9d1f6dbc3842d5e432d478ebfd","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"d5d85d3646d184e0340924addcfd2523fb289d00","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a7ed54e2f52185a7b6bb9a8201f6c3aa74b0cb00","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b5ba1b3d5535ccf1e5df6f4cd8ee0147d7278be9","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"cc4beedb56c37246d9e0f74e4b2cc34231dabc65","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"1db4ce981fe9fcb9ee4279395c29553efbb43947","modified":1573713420562},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"e2ad7ccf1865a45548e3f31c70fac2c65d6ef534","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"eaa62b5de4ddb18378c1a4049a172d4fa4b655d8","modified":1573713420566},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"9a18b186b08ec220d1b17cf83812bcdd06077814","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"2b536832cfc81667dadd9603c8c700e44d458261","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"4b980363822c24b3ad85c271719210a8ad2b646e","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"879f9cec9c88d65b2e31af4346b2bc0f6941f05d","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"5bf28a03ef021c27cfd713971caca5a0b9466fd1","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"068b304be305fbfd0220276d56b93cefd968f0b6","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1573713420566},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"419fa6cfc103d08dfd6a385ab7f24468c644d581","modified":1573713420566},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1573713420570},{"_id":"themes/next/.git/objects/pack/pack-6a1c0dbbd040071fcc9bde9e78ce12bc59cd04ef.pack","hash":"dbd40786ba7ec55cfcab42d83811725b0dc01ea2","modified":1573713420514}],"Category":[{"name":"Test","_id":"ck3zinexm00052ag5enx3s7bc"},{"name":"Algorithm","_id":"ck3zineyv000d2ag5x5cg3k0k"},{"name":"Docker","_id":"ck3zineyx000i2ag5xew99stc"},{"name":"Java","_id":"ck3zineyz000o2ag54m5oqwer"},{"name":"GOF","_id":"ck3zinez400102ag5b78kocm0"},{"name":"Jenkins","_id":"ck3zineza001m2ag5homo2g7k"},{"name":"Linux","_id":"ck3zinezf002b2ag5d2np1l7b"},{"name":"RocketMq","_id":"ck3zinezg002j2ag5g3jivn07"},{"name":"Spring","_id":"ck3zinezh002p2ag59cs91nof"},{"name":"Vue","_id":"ck3zinezt003f2ag5eh9oq5ya"}],"Data":[{"_id":"friends","data":[]},{"_id":"musics","data":[{"name":"等你下课(with 杨瑞代)","artist":"周杰伦","url":"https://mjava.top/music/等你下课(with 杨瑞代) - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003bSL0v4bpKAx.jpg?max_age=2592000"},{"name":"告白气球","artist":"周杰伦","url":"https://mjava.top/music/告白气球 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000003RMaRI1iFoYd.jpg?max_age=2592000"},{"name":"稻香","artist":"周杰伦","url":"https://mjava.top/music/稻香 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"},{"name":"给我一首歌的时间","artist":"周杰伦","url":"https://mjava.top/music/给我一首歌的时间 - 周杰伦.mp3","cover":"http://y.gtimg.cn/music/photo_new/T002R300x300M000002Neh8l0uciQZ.jpg?max_age=2592000"}]},{"_id":"url","data":{"url":"http://rs.mjava.top:81"}}],"Page":[{"title":"404","date":"2019-07-19T08:41:10.000Z","type":"404","layout":"404","description":"你来到了没有知识的荒原 :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2019-07-19 16:41:10\ntype: \"404\"\nlayout: \"404\"\ndescription: \"你来到了没有知识的荒原 :(\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"404.html","comments":1,"_id":"ck3zinew600002ag5u3a2wh3f"},{"_content":"ea667b0f708cd4ded0b79ebbdd99373a","source":"ea667b0f708cd4ded0b79ebbdd99373a.html","raw":"ea667b0f708cd4ded0b79ebbdd99373a","date":"2019-11-15T01:46:17.652Z","updated":"2019-11-14T15:24:27.447Z","path":"ea667b0f708cd4ded0b79ebbdd99373a.html","title":"","comments":1,"layout":"page","_id":"ck3zinew800012ag5dm3dnnuo"},{"title":"about","date":"2019-08-04T14:52:47.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2019-08-04 22:52:47\ntype: \"about\"\nlayout: \"about\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"about/index.html","comments":1,"_id":"ck3zinexh00022ag5so7mqwlj"},{"title":"分类","date":"2019-08-04T14:50:38.000Z","type":"categories","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-08-04 22:50:38\ntype: \"categories\"\nlayout: \"categories\"\ncomments: false\n---\n","updated":"2019-11-21T10:30:47.873Z","path":"categories/index.html","_id":"ck3zinexl00042ag505lhkfg1"},{"title":"friends","date":"2019-08-04T14:53:14.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2019-08-04 22:53:14\ntype: \"friends\"\nlayout: \"friends\"\n---\n","updated":"2019-08-11T15:40:56.161Z","path":"friends/index.html","comments":1,"_id":"ck3zinexn00072ag5ar1xyugr"},{"title":"标签","date":"2019-08-04T14:52:11.000Z","type":"tags","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-08-04 22:52:11\ntype: \"tags\"\nlayout: \"tags\"\ncomments: false\n---\n","updated":"2019-11-21T10:30:30.853Z","path":"tags/index.html","_id":"ck3ziney8000a2ag51j3eg4dc"}],"Post":[{"title":"test","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-10T06:59:37.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><h1 id=\"hjava\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Java数组的几种初始化方式</span></h1>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">一维数组</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化容量</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;定义容量为5,初始值为0的int一维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]&nbsp;array2=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br></code></pre>\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化值</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一维容量为5的一维数组的值<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]&nbsp;array10={<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">4</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;aray12[]={<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">4</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>};<br></code></pre>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">二维数组</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化容量</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">声明了列数的</span></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一个5行5列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array3=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]array4[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array5[][]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">未声明列数的</span></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;赋值方法<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array6=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br>array6[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]{<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>};<br>System.out.println(array6[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>]);<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//输出:1</span><br></code></pre>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一个5行空列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array6=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]arra7[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array8[][]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br></code></pre>\n<h3 id=\"hhttpcdnmjavatopfvyypbf11cgiwwtqks1ujg8hxm9u\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/FvyYPBf11CgIwWtQks1Ujg8hXm9U\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure></span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">初始化值</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化并赋值一个2行3列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array13={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]array14[]={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array15[][]={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br></code></pre>\n<h2 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p></div>","source":"_posts/test.md","raw":"---\ntitle: test\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-10 14:59:37\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Test\ncategories:\n- Test\n---\n\n<div class=\"output_wrapper\" id=\"output_wrapper_id\" style=\"font-size: 15px; color: rgb(62, 62, 62); line-height: 1.8; word-spacing: 2px; letter-spacing: 2px; font-family: 'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif; background-image: linear-gradient(90deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%), linear-gradient(360deg, rgba(50, 0, 0, 0.05) 3%, rgba(0, 0, 0, 0) 3%); background-size: 20px 20px; background-position: center center;\"><h1 id=\"hjava\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.6em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">Java数组的几种初始化方式</span></h1>\n<h2 id=\"h\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">一维数组</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<h3 id=\"h-1\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化容量</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;定义容量为5,初始值为0的int一维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]&nbsp;array2=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br></code></pre>\n<h3 id=\"h-2\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化值</span></h3>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一维容量为5的一维数组的值<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]&nbsp;array10={<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">4</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;aray12[]={<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">4</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>};<br></code></pre>\n<h2 id=\"h-3\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">二维数组</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">二维数组初始化时必须要声明行数,列数可随意 </p>\n</blockquote>\n<h3 id=\"h-4\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">初始化容量</span></h3>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">声明了列数的</span></li>\n</ul>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一个5行5列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array3=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]array4[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array5[][]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>];<br></code></pre>\n<ul style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; padding-left: 32px; list-style-type: disc;\">\n<li style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; margin-bottom: 0.5em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\">未声明列数的</span></li>\n</ul>\n<blockquote style=\"line-height: inherit; display: block; padding: 15px 15px 15px 1rem; font-size: 0.9em; margin: 1em 0px; color: rgb(0, 0, 0); border-left: 5px solid rgb(239, 112, 96); background: rgb(239, 235, 233); overflow: auto; overflow-wrap: normal; word-break: normal;\">\n  <p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 0px;\">此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;赋值方法<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array6=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br>array6[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[]{<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">1</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">2</span>,<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">3</span>};<br>System.out.println(array6[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>][<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">0</span>]);<br><br><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">//输出:1</span><br></code></pre>\n</blockquote>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化一个5行空列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array6=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]arra7[]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array8[][]=<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">new</span>&nbsp;<span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[<span class=\"hljs-number\" style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; word-wrap: inherit !important; word-break: inherit !important;\">5</span>][];<br></code></pre>\n<h3 id=\"hhttpcdnmjavatopfvyypbf11cgiwwtqks1ujg8hxm9u\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; font-size: 1.3em;\"><span style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><figure style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px;\"><img src=\"http://cdn.mjava.top/FvyYPBf11CgIwWtQks1Ujg8hXm9U\" alt=\"\" title=\"\" style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; display: block; margin: 0px auto; max-width: 100%;\"><figcaption style=\"line-height: inherit; margin: 0px; padding: 0px; margin-top: 10px; text-align: center; color: rgb(153, 153, 153); font-size: 0.7em;\"></figcaption></figure></span></h3>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">初始化值</p>\n<pre style=\"font-size: inherit; color: inherit; line-height: inherit; margin: 0px; padding: 0px; background: url('./school-book.png') rgb(246, 246, 174); border-top: 2px solid rgb(210, 232, 185); border-bottom: 1px solid rgb(210, 232, 185);\"><code class=\"java language-java hljs\" style=\"overflow-wrap: break-word; margin: 0px 2px; background: rgb(248, 248, 248); font-weight: normal; word-spacing: 0px; letter-spacing: 0px; font-family: Consolas, Inconsolata, Courier, monospace; border-radius: 0px; overflow-x: auto; padding: 15px 0.5em 0.5em 30px; font-size: 11px; line-height: 16px; color: rgb(62, 89, 21); white-space: pre !important; word-wrap: normal !important; word-break: normal !important; overflow: auto !important; display: -webkit-box !important;\"><span class=\"hljs-comment\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(230, 4, 21); word-wrap: inherit !important; word-break: inherit !important;\">/**<br>*&nbsp;初始化并赋值一个2行3列的二维数组<br>*/</span><br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>[][]&nbsp;array13={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;[]array14[]={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br><span class=\"hljs-keyword\" style=\"font-size: inherit; line-height: inherit; margin: 0px; padding: 0px; color: rgb(0, 85, 153); font-weight: bold; word-wrap: inherit !important; word-break: inherit !important;\">int</span>&nbsp;array15[][]={{<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>},{<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">6</span>}};<br></code></pre>\n<h2 id=\"h-5\" style=\"color: inherit; line-height: inherit; padding: 0px; margin: 1.6em 0px; font-weight: bold; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"font-size: inherit; line-height: inherit; margin: 0px; display: inline-block; font-weight: normal; background: rgb(239, 112, 96); color: rgb(255, 255, 255); padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">总结</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid rgb(239, 235, 233); border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: inherit; color: inherit; line-height: inherit; padding: 0px; margin: 1.7em 0px;\">​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;</p></div>","slug":"test","published":1,"updated":"2019-12-10T07:00:57.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinexh00032ag5mseak12d"},{"title":"递归算法-获取json中指定key的所有值","top":true,"cover":true,"toc":true,"mathjax":true,"date":"2019-08-17T04:38:52.000Z","password":null,"summary":null,"_content":"\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://cdn.mjava.top/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](http://cdn.mjava.top/blog/json2.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo\n","source":"_posts/algorithm/algorithm-recursive-01.md","raw":"---\ntitle: 递归算法-获取json中指定key的所有值\ntop: true\ncover: true\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Recursive\n  - Algorithm\n  - Json\ncategories:\n  - Algorithm\ndate: 2019-08-17 12:38:52\npassword:\nsummary:\n---\n\n今天在工作中遇到要解析json并获取json里所有指定key的值，再把key的值插入对应的数据映射表。于是写了一个递归算法来取值。\n\n## 1.首先导入alibaba的fastjson，用来解析json。当然也可以用其他的解析包\n```java\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>fastjson</artifactId>\n    <version>1.2.58</version>\n</dependency>\n```\n## 2.创建两个工具类方法，用来判断传入的是不是json对象或json数组\n```java\npublic static boolean isJSONObj(Object json){\n   return json instanceof JSONObject;\n}\npublic static boolean isJSONArray(Object json){\n   return json instanceof JSONArray;\n}\n```\n> java中的instanceof也称为类型比较运算符，因为它将实例与类型进行比较。它返回true或false。\n\n## 3.建立核心重载方法\n```java\n    public static void getJSONValue(JSONObject json,String k,List<String> list){\n        for (Object j:json.keySet()){\n            if(isJSONObj(json.get(j))){\n                //是对象\n                JSONObject j2= JSON.parseObject(json.get(j).toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(json.get(j))){\n                JSONArray j3=JSON.parseArray(json.get(j).toString());\n                //是数组\n                getJSONValue(j3,k,list);\n            }else if(j==k){\n                //是字符串\n                list.add(json.get(j).toString());\n            }\n        }\n    }\n\n    public static void getJSONValue(JSONArray json,String k,List<String> list){\n        for (Object j:json){\n            if(isJSONObj(j)){\n                //是对象\n                JSONObject j2= JSON.parseObject(j.toString());\n                getJSONValue(j2,k,list);\n            }else if(isJSONArray(j)){\n                //是数组\n                JSONArray j3=JSON.parseArray(j.toString());\n                getJSONValue(j3,k,list);\n            }\n        }\n    }\n\n```\n## 4.接下来写一个比较复杂的json，里面有对象嵌套数组的，数组嵌套对象的，数组嵌套数组的\n[示例json](http://cdn.mjava.top/blog/demojson.txt)\n\n## 5.调用方法\n```java\ntry {\n    File file=new File(demo1.class.getResource(\"/2.json\").getPath());\n    FileInputStream fileInputStream=new FileInputStream(file);\n    InputStreamReader inputStreamReader=new InputStreamReader(fileInputStream);\n    BufferedReader bufferedReader=new BufferedReader(inputStreamReader);\n    String line=\"\";\n    StringBuffer json=new StringBuffer();\n    while ((line=bufferedReader.readLine())!=null){\n        json.append(line);\n    }\n\n    JSONObject j3=JSON.parseObject(json.toString());\n    List<String> mid=new ArrayList<>();\n    getJSONValue(j3,\"interfaceId\",mid);\n    System.out.println(mid.toString());\n}catch (Exception e){\n    System.out.println(e.getMessage());\n}\n```\n## 6.成功获取\n![控制台返回](http://cdn.mjava.top/blog/json2.png)\n\n>demo源码地址：https://github.com/z573419235/studyDemo\n","slug":"algorithm/algorithm-recursive-01","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineys000b2ag5eptht1g1"},{"title":"Docker下安装mysql并设置用户权限","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-03T07:58:46.000Z","password":null,"summary":null,"_content":"\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](http://cdn.mjava.top/blog/dockerpullmysql.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](http://cdn.mjava.top/blog/dockerimages.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](http://cdn.mjava.top/blog/dockerrun.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](http://cdn.mjava.top/blog/dockerps.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](http://cdn.mjava.top/blog/dockerexec.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](http://cdn.mjava.top/blog/sqlclient.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","source":"_posts/docker/docker-mysql.md","raw":"---\ntitle: Docker下安装mysql并设置用户权限\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Docker\ntags:\n  - Docker\n  - Mysql\n  - Linux\ndate: 2019-09-03 15:58:46\npassword:\nsummary:\n---\n\n## 环境\n\n* Ubuntu18.04\n\n* Docker19.03.1\n\n* Mysql5.7\n\n  \n\n## Docker\n\n### 拉取镜像\n\n  Docker拉取镜像默认是从DockerHub上面拉取，上面有各厂商提供的优质官方镜像，可以直接拉取使用。或者也可以用DockerFile自定义构建你自己的镜像。\n\n```shell\nsudo docker pull mysql:5.7\t\t\t//拉取镜像到本地\n```\n\n注：上面mysql:5.7指的是拉取5.7版本的mysql，如果不加直接写mysql的话默认是拉取mysql的最新版本。\n\n![拉取镜像](http://cdn.mjava.top/blog/dockerpullmysql.png)\n\n如果显示上面这样，说明已经拉取好了。\n\n### 查看镜像\n\n```shell\nsudo docker images\t\t//查看本地镜像\n```\n\n![查看本地镜像](http://cdn.mjava.top/blog/dockerimages.png)\n\n\n\n### 创建容器\n\n#### 创建\n\n```shell\nsudo docker run -d -p 3306:3306 --name mysql5.7 -e MYSQL_ROOT_PASSWORD=root mysql:5.7\n```\n\n* -d       指定容器运行于后台\n* -p       端口映射   主机端口:容器端口\n* --name    自定义容器名字，方便记忆，不设置的话会随机生产\n* -e        容器环境变量\n\n![创建容器](http://cdn.mjava.top/blog/dockerrun.png)\n\n创建好的话会显示一串随机生产的id\n\n#### 查看创建好的容器\n\n```shell\nsudo docker ps -a\n```\n\n* -a        显示所有创建好的容器，如果不加只显示正在运行的容器\n\n![查看容器](http://cdn.mjava.top/blog/dockerps.png)\n\n## Mysql\n\n### 进入容器\n\n```shell\nsudo docker exec -it mysql5.7 bash\n```\n\n* -i        打开STDIN，用于控制台交互\n* -t        分配tty设备，该可以支持终端登录\n\n![进入容器](http://cdn.mjava.top/blog/dockerexec.png)\n\n### 登录mysql\n\n```shell\nmysql -uroot -p\n```\n\n注：然后输入刚才创建容器时的密码，就是MYSQL_ROOT_PASSWORD这个参数\n\n### 创建测试数据库\n\n```sql\ncreate database test;\n```\n\n### 创建mysql用户\n\n```sql\ncreate user 'zmh'@'%' identified by 'zmh';\n```\n\n注：\"%\"表示可以任意ip访问\n\n### 切换mysql用户\n\n```sql\nalter user 'zmh' identified by 'zmh';\n```\n\n### 授权\n\n授权test库的所有表的所有权限给zmh用户\n\n```sql\ngrant all privileges on test.* to 'zmh'@'%';\n```\n\n### 刷新权限\n\n```sql\nflush privileges;\n```\n\n退出mysql命令行\n\n```sql\nexit\n```\n\n### 客户端连接测试\n\n![进入容器](http://cdn.mjava.top/blog/sqlclient.png)\n\n成功！\n\n\n\n## 附加\n\n如果要重启mysql的话，不用进容器里面，直接重启容器就可以\n\n* sudo docker start mysql5.7       启动mysql5.7容器\n* sudo docker stop mysql5.7        停止mysql5.7容器\n* sudo docker restart mysql5.7   重启mysql5.7容器","slug":"docker/docker-mysql","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyu000c2ag5l2dh0vj2"},{"title":"Java8 Stream方法大全","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-10T01:53:34.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n![Stream](http://cdn.mjava.top/blog/java_8_stream.png)","source":"_posts/java/java-8-stream-method.md","raw":"---\ntitle: Java8 Stream方法大全\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-10 09:53:34\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n![Stream](http://cdn.mjava.top/blog/java_8_stream.png)","slug":"java/java-8-stream-method","published":1,"updated":"2019-12-10T01:56:45.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyv000f2ag51x9wkha2"},{"title":"Java数组的几种初始化方式","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-12-09T02:22:12.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","source":"_posts/java/java-array-init.md","raw":"---\ntitle: Java数组的几种初始化方式\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-12-09 10:22:12\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n- Java\ncategories:\n- Java\n---\n\n\n\n## 一维数组\n\n### 初始化容量\n\n```java\n/**\n* 定义容量为5,初始值为0的int一维数组\n*/\nint array[]=new int[5];\nint[] array2=new int[5];\n```\n\n### 初始化值\n\n```java\n/**\n* 初始化一维容量为5的一维数组的值\n*/\nint[] array10={1,2,3,4,5};\nint aray12[]={1,2,3,4,5};\n```\n\n\n\n\n\n## 二维数组\n\n> 二维数组初始化时必须要声明行数,列数可随意 \n\n\n### 初始化容量\n- 声明了列数的\n\n\n\n```java\n/**\n* 初始化一个5行5列的二维数组\n*/\nint[][] array3=new int[5][5];\nint []array4[]=new int[5][5];\nint array5[][]=new int[5][5];\n```\n\n\n-  未声明列数的\n\n\n\n> 此种方法初始化后如果要赋值的话要new一个数组,如果按照常规的方法赋值然后取值会报空指针异常\n```java\n/**\n* 初始化一个5行空列的二维数组\n*/\nint[][] array6=new int[5][];\nint []arra7[]=new int[5][];\nint array8[][]=new int[5][];\n```\n ```java\n/**\n* 赋值方法\n*/\nint[][] array6=new int[5][];\narray6[0]=new int[]{1,2,3};\nSystem.out.println(array6[0][0]);\n\n//输出:1\n ```\n\n\n#### 初始化值\n\n```java\n/**\n* 初始化并赋值一个2行3列的二维数组\n*/\nint[][] array13={{1,2,3},{4,5,6}};\nint []array14[]={{1,2,3},{4,5,6}};\nint array15[][]={{1,2,3},{4,5,6}};\n```\n\n\n\n## 总结\n\n​    其他像什么三维数组,多维数组初始化的方式都差不多,可以自己在IDE工具中试一下;","slug":"java/java-array-init","published":1,"updated":"2019-12-09T02:44:25.415Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyw000g2ag5ccqkezg1"},{"title":"设计模式系例-单例模式","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-22T13:16:37.000Z","password":null,"summary":null,"_content":"\n​    网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","source":"_posts/gof/gof-singleton.md","raw":"---\ntitle: 设计模式系例-单例模式\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - GOF\n  - Singleton\ncategories:\n  - GOF\ndate: 2019-10-22 21:16:37\npassword:\nsummary:\n---\n\n​    网上说单例模式是所有模式中最简单的一种模式，巧的是我也这么认为。不过越简单的东西，往往坑就隐藏的越深，这边文章我会把我知道的几个坑所出来。\n\n\n\n## 一.什么是单例模式\n\n​    就如同他的名字一样，'单例'-就是只有一个实例。也就是说一个类在全局中最多只有一个实例存在，不能在多了，在多就不叫单例模式了。\n\n\n\n### 1.白话小故事\n\n​    程序员小H单身已久，每天不是对着电脑，就是抱着手机这样来维持生活。某日，坐在电脑前，突然感觉一切都索然无味。谋生想找一个对象来一起度过人生美好的每一天。\n\n​    于是精心打扮出门找对象，由于小H很帅，很快就找到了心仪的另一半--小K。小H的心中永远只有小K一个人，而且发誓永远不会在找新对象。\n\n> 小H和小K的关系就是单例模式，在小H的全局中只有一个小K对象，且无第二个，如果有第二个的话，他们之间的关系就出问题了。哈哈\n\n\n\n## 2.用在哪里\n\n​    单例模式一般用在对实例数量有严格要求的地方，比如数据池，线程池，缓存，session回话等等。\n\n\n\n## 3.在Java中构成的条件\n\n- 静态变量\n- 静态方法\n- 私有构造器\n\n## 二.单例模式的两种形态\n\n### 1.懒汉模式\n\n> 线程不安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n### 2.饿汉模式\n\n> 线程安全\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton=new Singleton();\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        return unsingleton;\n    }\n}\n```\n\n\n\n#### 调用\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        Singleton singleton1=Singleton.getInstance();\n    }\n}\n```\n\n## 三.懒汉模式优化成线程安全\n\n  懒汉模式要变成线程安全的除了用饿汉模式之外，还有两种方法。\n\n### 1.加synchronized关键字\n\n> 此方法是最简单又有效的方法，不过对性能上会有所损失。比如两个线程同时调用这个实例，其中一个线程要等另一个线程调用完才可以继续调用。而线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的，所以加synchronized就显得有些浪费性能。\n\n```java\npublic class Singleton {\n\n    private static Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static synchronized Singleton getInstance(){\n        if(unsingleton==null){\n            unsingleton=new Singleton();\n        }\n        return unsingleton;\n    }\n}\n```\n\n### 2.用\"双重检查加锁\"\n\n> 上个方法说到，线程不安全往往发生在这个实例在第一次调用的时候发生，当实例被调用一次后，线程是安全的。那有没有方法只有在第一次调用的时候才用synchronized关键字，而第一次后就不用synchronized关键字呢？答案是当然有的，就是用volatile来修饰静态变量，保持其可见性。\n\n```java\npublic class Singleton {\n\n    private static volatile Singleton unsingleton;\n\n    private Singleton(){}\n\n    public static Singleton getInstance(){\n        if(unsingleton==null){\n            //只有当第一次访问的时候才会使用synchronized关键字\n            synchronized (Singleton.class){\n                unsingleton=new Singleton();\n            }\n        }\n        return unsingleton;\n    }\n}\n```\n\n\n\n## 三种线程安全的单例模式比较\n\n- 饿汉模式：性能好，写法简单，个人比较推荐用这个\n\n- 加synchronized关键字：性能差，不过对懒汉模式的盖章比较直接有效。\n\n- volatile-双重验证加锁：性能好，对Java版本有要求，要求Java5以上版本\n\n  ","slug":"gof/gof-singleton","published":1,"updated":"2019-11-21T05:53:58.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyw000h2ag54yju2k4t"},{"title":"Java的==和equals","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T11:22:50.000Z","password":null,"summary":null,"_content":"在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](http://cdn.mjava.top/blog/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](http://cdn.mjava.top/blog/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","source":"_posts/java/java-equals.md","raw":"---\ntitle: Java的==和equals\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Java\ntags:\n  - Java\ndate: 2019-08-20 19:22:50\npassword:\nsummary:\n---\n在平常工作和学习中，我们一般用==和equals来比较两个对象或数据是否相等。但是什么时候用equals，什么时候用==一直都不怎么清楚，今天整理了下；\n\n## 首先看看Java的栈空间和堆空间的地址引用\n![Java栈空间和堆空间](http://cdn.mjava.top/blog/javaand1.png)\n\n##  ==的说明\n  在Java中，==对比的是两个对象在空间里的地址是否一致,比如上图的s2==s3返回的是false，s5==s6返回的是为true。话不多说，上代码。\n```java\npublic class demo2 {\n    public static void main(String[] args) {\n        String s1=new String(\"t1\");\n        String s2=new String(\"t2\");\n        String s3=new String(\"t2\");\n\n        String s4=new String(\"t3\");\n        String s5=\"t3\";\n        String s6=\"t3\";\n\n        System.out.println(\"s2==s3:\"+(s2==s3));\n        System.out.println(\"s5==s6:\"+(s5==s6));\n    }\n}\n```\n结果：\n![控制台输出](http://cdn.mjava.top/blog/javaand2.png)\n\n>这是因为==比的是在空间里的地址，s2和s3在堆里面是两个不同的对象，所以地址也不同，自然返回就是false。s5和s6是Java的基础数据类型，指向的是常量池里同一个引用，所以地址也相同，返回的就是true。\n\n## equals的说明\n  每个Object里的equals都不一样，我们看看String里的源码\n```java\npublic boolean equals(Object anObject) {\n    if (this == anObject) {\n        return true;\n    }\n    if (anObject instanceof String) {\n        String anotherString = (String)anObject;\n        int n = value.length;\n        if (n == anotherString.value.length) {\n            char v1[] = value;\n            char v2[] = anotherString.value;\n            int i = 0;\n            while (n-- != 0) {\n                if (v1[i] != v2[i])\n                    return false;\n                i++;\n            }\n            return true;\n        }\n    }\n    return false;\n}\n```\n* 首先它会对比地址，如果地址相等，就直接返回true\n* 如果地址不相等，就会对比里面的每一个字符，直到完全相等，然后返回true\n\n## 总结\n　　所以一般如果是对比两个对象是否相等的话，用==就可以。但是如果你要对比两个值是否相等的话，就要用equals了，因为如果用==就会出现上面明明值相等,返回却是false的情况。\n","slug":"java/java-equals","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyx000l2ag5041rc5kd"},{"title":"Base64影响泰文字段取值问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-14T02:39:23.000Z","password":null,"summary":null,"_content":"\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","source":"_posts/java/problem-java-base64.md","raw":"---\ntitle: Base64影响泰文字段取值问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Base64\n  - Pit\ncategories:\n  - Java\ndate: 2019-08-14 10:39:23\npassword:\nsummary:\n---\n\n## 今天在工作中，图片要用base64上传，上传数据中还有泰文，然后和前端app联调时发现他们传的泰文这边竟然没存到库里，怀疑是app没有传值过来，于是一番操作\n\n#### 查看日志\n\n>what,日志里面竟然有他们传过来的泰文的值\n\n#### 对比ios和android的数据\n\n>发现日志里的数据都是一样的，但是android上传的数据全部传入了mysql数据库，ios的除了泰文，其他的也都传到了库里\n\n#### 确定问题\n\n>最后对比发现，android的泰文字段三放在base64字段前面的然后传上来的，ios是放在base64字段后面传上来的，怀疑问题在此处\n\n#### 修复bug\n\n>于是叫ios也和android一样，把上传字段的顺序调整了以下，把泰文的字段放在base64字段前面，然后上传。改了之后试了以下，，竟然解决了，2222333333\n\n总结：暂时不知道具体什么原因，有可能是因为base64数据太长了，影响到泰文的字段存储了。\n","slug":"java/problem-java-base64","published":1,"updated":"2019-11-14T07:33:33.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyy000m2ag5ywpd0uce"},{"title":"Integer和int区别","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-19T13:51:11.000Z","password":null,"summary":null,"_content":"## 1.两者本质区别\n  int是Java的基础数据类型之一，而Integer是基于int进行封装的一个对象\n\n","source":"_posts/java/java-integer-int.md","raw":"---\ntitle: Integer和int区别\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\ncategories:\n  - Java\ndate: 2019-08-19 21:51:11\npassword:\nsummary:\n---\n## 1.两者本质区别\n  int是Java的基础数据类型之一，而Integer是基于int进行封装的一个对象\n\n","slug":"java/java-integer-int","published":1,"updated":"2019-11-14T07:14:19.014Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineyz000r2ag5ejjcoh26"},{"title":"Nacos报[NACOS HTTP-POST]","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-14T15:50:58.000Z","password":null,"summary":null,"_content":"\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","source":"_posts/java/nacos-post-error.md","raw":"---\ntitle: Nacos报[NACOS HTTP-POST]\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-14 23:50:58\npassword:\nsummary:\ntags:\n  - Nacos\ncategories:\n  - Java\n---\n\n## 问题\n\n　由于项目使用阿里的Nacos来管理项目的配置文件，今天所有使用Nacos的项目的日志都报[NACOS HTTP-POST] The maximum number of tolerable server reconnection errors has been reached这个错误。\n\n## 解决方法\n\n　查阅资料后说是连接超过了最大重试次数。Nacos有个maxRetry这个配置参数，默认是3;可是和SpringCloud整合后在application文件中找不到这个参数，只好另寻方法；\n\n　由于项目都是Docker容器化的，先前出现过连接不到Nacos的问题,于是就查看了各个Docker容器的IP。\n\n### 修正Nacos的地址\n\n　查阅后发现，是因为同事吧服务器重启了一遍，导致Docker服务也重启了，然后Docker容器里的IP全部都变了。因为同一台服务器上我们各个容器间的访问是通过Docker容器内部IP的，也就是172.16.x.x这个IP段。所以导致访问不到报错。\n\n```properties\nspring.cloud.nacos.config.server-addr=172.16.X.X     //更改到最新nacos的地址\n```","slug":"java/nacos-post-error","published":1,"updated":"2019-11-14T15:53:43.558Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez0000s2ag5w93c2o5j"},{"title":"Jenkins教程-Docker+GitLab持续部署持续集成","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:02.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](http://cdn.mjava.top/blog/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","source":"_posts/jenkins/build-jenkins-ci-cd.md","raw":"---\ntitle: Jenkins教程-Docker+GitLab持续部署持续集成\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:02\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 环境\n\n|        | 地址       | 系统     | 安装的软件                   |\n| ------ | ---------- | -------- | ---------------------------- |\n| 主机１ | 10.25.0.72 | Centos 7 | Docker　,　Jenkins(Docker版) |\n| 主机２ | 10.25.0.50 | Cnetos 7 | Docker                       |\n\n\n\n## Jenkins所需添加插件\n\n- [Git Parameter](https://plugins.jenkins.io/git-parameter)\n- [GitLab](https://plugins.jenkins.io/gitlab-plugin)\n\n- [SSH](https://plugins.jenkins.io/ssh)\n\n## 创建ssh登录凭据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n> 这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入10.25.0.50服务器的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160316.png)\n\n## 添加SSH配置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160521.png)\n> 找到SSH remote hosts \n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160541.png)\n> 设置你远程机器的ip和端口，然后选择刚配置好的凭证，点击save保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112160920.png)\n\n## 配置Job\n\n> 进入上篇文章创建好的Job,在此基础上进行改造\n\n\n\n### 配置Git Parameter,来获取gitlab的Tag数据\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161424.png)\n\n### 配置触发器\n\n> 点击最下面的Generate,生成秘钥。然后记下URL:http://172.16.54.131:8080/project/JenkinsTest 和生成的秘钥：60327d68d10f1f7621696edd42719d1c\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161808.png)\n\n### 添加构建完成后的动作\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161842.png)\n\n### 添加Execute shell 和Execute shell script on remote host using ssh\n\n- Execute shell ： 执行Jenkins所在服务器的脚本\n- Execute shell script on remote host using ssh：登录远程服务器执行脚本\n\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112161940.png)\n\n\n\n### 编写你要执行的脚本\n\n> 由于是自定义的，内容我就不粘贴出来了.编写好后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164613.png)\n\n## 开始构建\n\n### 手动构建\n\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164653.png)\n\n\n\n#### 选择你要构建的tag标签，点击Build开始构建并自动部署\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112164746.png)\n\n### 自动构建\n\n> 自动构建是当你push或打tag上传代码的时候，Jenkins就会自动构建部署\n\n\n\n#### 自动构建流程\n\n![Jenkins界面](http://cdn.mjava.top/blog/201911121717.png)\n\n\n####　配置GitLab代码仓库\n> 点击你你项目右边Settings的Integrations,然后在URL和Secret Tonken中填写刚保存的URL和秘钥，选择Tag push events,然后点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112165036.png)\n\n　\n\n\n\n#### Git打Tag标签\n\n```shell\ngit tag -a 1.0 -m '1.0'  \t\t//打一个1.0的tag\ngit push origin 1.0 \t\t\t//上传1.0标签到远程仓库\n```\n\n上传完tag后此时Jenkins已经开始自动构建并部署项目了；\n\n\n\n## 注意\n\n弄自动部署时，Jenkins和GitLab要都能互相访问的到，不然就会出错；","slug":"jenkins/build-jenkins-ci-cd","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez2000x2ag5cs9sw14h"},{"title":"Jenkins教程-搭建(Docker版)","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:34.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](http://cdn.mjava.top/blog/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](http://cdn.mjava.top/blog/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](http://cdn.mjava.top/blog/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](http://cdn.mjava.top/blog/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](http://cdn.mjava.top/blog/jenkins_20191107160204.png)\n\n","source":"_posts/jenkins/build-jenkins-docker.md","raw":"---\ntitle: Jenkins教程-搭建(Docker版)\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\n  - Docker\n  - Linux\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:34\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n  \n\n## 环境\n\n- 主机：172.16.54.131\n\n- 系统：Cnetos 7\n\n## 安装Docker-CE\n\n### 检查Docker\n\n首先检查本机是否安装Docker，如果安装了直接跳过安装Docker步骤\n\n```shell\ndocker -v\n```\n\n> 如果出现Docker version 19.03.4, build 9013bf583a类似的信息，则说明已安装Docker\n\n### 安装\n\n- 本教程以centos7安装方式说明，其他系统安装方式会有不同\n\n执行以下命令，安装Docker\n\n```shell\nyum install -y yum-utils device-mapper-persistent-data lvm2\n\nyum-config-manager \\\n    --add-repo \\\n    https://download.docker.com/linux/centos/docker-ce.repo\n    \nyum install docker-ce\n\nservice docker start\n\nsystemctl enable docker\n```\n\n- 第一条命令：为添加源做准备 使其支持存储\n- 第二条命令：添加docker-ce软件源\n- 第三条命令：安装docker-ce\n- 第四条命令：启动docker服务\n- 第五条命令：设置开启自启\n\n## 安装Jenkins的Docker容器\n\n### 创建文件夹\n\n在创建容器前先在宿主机创建一个Jenkins的工作文件夹，用于持久化\n\n```shell\nmkdir /opt/jenkins     \t\t\t//创建文件夹\nchmod 7777 /opt/jenkins\t\t\t//授予权限\n```\n\n> 该文件夹一定要给权限，不然docker容器访问不了，容器会创建失败。\n\n### 拉取官方镜像\n\n```shell\ndocker pull jenkins/jenkins:lts\n```\n\n### 启动容器\n\n```shell\ndocker run -d -p 8080:8080 -p 50000:50000 -u root -v /var/run/docker.sock:/var/run/docker.sock -v $(which docker):/usr/bin/docker -v /opt/jenkins:/var/jenkins_home -v /etc/localtime:/etc/localtime -e JAVA_OPTS=-Duser.timezone=Asia/Shanghai --restart=always --name jenkins jenkins/jenkins:lts\n```\n\n> 启动容器一定要用root用户进入docker容器，不然访问不了宿主机的docker服务。还有要挂载/var/run/docker.sock和$(which docker)这两个文件夹到容器，这样docker版的jenkins才可以用使用docker相关服务。 \n\n### 查看容器日志\n\n```shell\ndocker logs jenkins \n```\n\n![log界面](http://cdn.mjava.top/blog/jenkins_docker_logs_4345.png)\n> 记下43455b344f904cf69a4af9e231f7d48d这个密码，等下要用到\n\n## 初始化Jenkins\n\n### 解锁\n\n在浏览器访问172.16.54.131:8080这个地址，进入Jenkins的web界面。（如果访问不了，请开启防火墙的8080端口）\n\n![jenkins界面](http://cdn.mjava.top/blog/jenkins_web_sign_in_201911071359.png)\n\n在输入框中填入刚才保存的密码\n\n### 自定义\n\n推荐直接选 安装推荐的插件\n\n![Jenkins自定义界面](http://cdn.mjava.top/blog/jenkins_setupwizard_1911071408.png)\n\n### 安装插件\n\n到这个界面等他安装完成，时间会长一点\n\n![Jenkins安装插件](http://cdn.mjava.top/blog/jenkins_191107141216.png)\n\n> 如这个界面插件下载失败，直接点继续，进行下一步，具体解决办法可以看这个篇文章\n>\n> [Jenkins初始化界面插件安装失败解决方法](https://mjava.top/2019/11/07/technology/learningExperience/Linux/Jenkins/Jenkins%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/)\n\n\n\n### 创建用户\n\n设置你的登录账号和密码，然后点保存完成\n![Jenkins创建用户](http://cdn.mjava.top/blog/jenkins_20191107160016.png)\n\n### 实例配置\n默认直接点保存完成\n![Jenkins实例配置](http://cdn.mjava.top/blog/jenkins_20191107160056.png)\n\n### 开始使用\n点击开始使用Jenkins\n![Jenkins开始使用](http://cdn.mjava.top/blog/jenkins_20191107160129.png)\n\n### Jenkins主界面\n进入Jenkins主界面，到此教程结束\n![Jenkins主界面](http://cdn.mjava.top/blog/jenkins_20191107160204.png)\n\n","slug":"jenkins/build-jenkins-docker","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez3000y2ag5q2goj7iz"},{"title":"Java中String判断为空的4大方法比较","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-20T10:59:15.000Z","password":null,"summary":null,"_content":"\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](http://cdn.mjava.top/blog/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","source":"_posts/java/java-isnull-four.md","raw":"---\ntitle: Java中String判断为空的4大方法比较\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\ncategories:\n  - Java\ndate: 2019-08-20 18:59:15\npassword:\nsummary:\n---\n\n## 一.四大方法\n```java\npublic class demo1 {\n   public static void main(String[] args) {\n       String a=\"\";\n       String a2=new String();\n\n       System.out.println(a==\"\");\n       System.out.println(a2==\"\");\n       System.out.println(\"------------------------------\");\n       System.out.println(a==null);\n       System.out.println(a2==null);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.length()<=0);\n       System.out.println(a2.length()<=0);\n       System.out.println(\"------------------------------\");\n       System.out.println(a.isEmpty());\n       System.out.println(a2.isEmpty());\n       System.out.println(\"------------------------------\");\n       \n   }\n}\n```\n## 二.输出结果\n![控制台输出](http://cdn.mjava.top/blog/javaands1.png)\n\n>可以看到用\"==\"判断的那组出现了不一致的情况\n","slug":"java/java-isnull-four","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez400122ag5f3zx0vg5"},{"title":"Jenkins教程-创建Maven项目","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:26:19.000Z","password":null,"summary":null,"_content":"\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110029.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112803.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112841.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122030.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122112.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122135.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","source":"_posts/jenkins/build-jenkins-mavne.md","raw":"---\ntitle: Jenkins教程-创建Maven项目\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:26:19\npassword:\nsummary:\n---\n\n## 目录\n\n- [Jenkins教程-搭建(Docker版)](https://mjava.top/jenkins/build-jenkins-docker/)\n\n- [Jenkins教程-创建Maven项目](https://mjava.top/jenkins/build-jenkins-mavne/)\n\n- [Jenkins教程-Docker+GitLab持续部署持续集成](https://mjava.top/jenkins/build-jenkins-ci-cd/)\n\n\n\n## 前期准备\n\n本教程是和gitlab集成,所以要有gitlab仓库。注意：如果后期要弄自动部署的话,你Jenkins的地址gitlab必须能访问到。不然gitlab监听到事件就通知不了Jenkins了；\n\n### 环境\n\n- Centos 7\n- Jenkins(Docker版)\n\n### 所需插件\n\n> 除了搭建Jenkins时安装的插件,还需安装的插件\n\n- [Maven Integration](https://plugins.jenkins.io/maven-plugin)\n\n### 安装Maven\n\n点击侧边栏的Manage Jenkins,然后点击Global Tool Configuration,进入全局工具设置\n![Jenkins界面](http://cdn.mjava.top/blog/20191112105932.png)\n\n\n然后找到Maven,点击Add Maven,可以选择你要的Maven版本，然后设置一个名字。点击保存\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110029.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112110130.png)\n\n\n\n### 创建Git登录凭证\n点击侧边栏的凭证，然后按图点击\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111043.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111058.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111115.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111130.png)\n\n这边Kind有很多选项，这边选择Username with password,用账户密码来设置；然后在Username和Password输入框中分别输入gitlab的账号和密码。点击OK保存；\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111529.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111806.png)\n\n\n\n保存后就会出现你保存好的凭证；\n\n\n\n## 创建JOB\n![Jenkins界面](http://cdn.mjava.top/blog/20191112111950.png)\n\n### 创建Maven项目\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112035.png)\n\n### 输入你的gitlab项目地址，然后选择刚才配置的凭证\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112620.png)\n\n### 输入Maven打包命令，然后点击保存\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112719.png)\n\n### 开始构建\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112747.png)\n\n### 查看构建项目日志\n> 第一次构建会比慢，因为他要下载maven相关构建的包\n\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112803.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112841.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112112854.png)\n\n### 查看构建好的jar包\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122030.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122112.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122135.png)\n![Jenkins界面](http://cdn.mjava.top/blog/20191112122200.png)\n\n> 到此，构建maven项目已结束，可以下载这个jar包进行部署。后面会有自动构建部署的教程","slug":"jenkins/build-jenkins-mavne","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez500152ag5fwxo4qd9"},{"title":"Jenkins插件版本太旧的更新方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-12T09:27:27.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102254.png)","source":"_posts/jenkins/problem-jenkins-01.md","raw":"---\ntitle: Jenkins插件版本太旧的更新方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-12 17:27:27\npassword:\nsummary:\n---\n\n## 前言\n\n\tJenkins的插件好多都是互相依赖的，如果有的插件版本太低，而另一个插件就会导致用不了，就会出现下面的情况：\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102617.png)\n\nDurable Task Plugin version 1.29 is older than required. To fix, install version 1.33 or later.\n\n\n\n## 查看本地已安装版本\n\n可以看到，本地安装的版本和刚才提示的一样，是1.29版本的，刚才提示说太旧了，要更新到1.33版本。\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108100855.png)\n\n\n\n## 搜索插件\n\n当你理所应当的去这个界面准备搜索这个插件并更新时。。。。你傻了，，怎么搜不到？？？WTF\n\n![jenkins插件管理界面](http://cdn.mjava.top/blog/20191108102907.png)\n\n\n\n不要慌，天无绝人之路，这里找不到，可以去另外的地方找。浏览器打开这个网站\n\n[Jenkins插件下载](https://plugins.jenkins.io/)\n\n- 进入后在输入框里输入你刚才要下载的插件:\n\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101610.png)\n\n\n- 选择对应的插件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101748.png)\n\n\n- 然后点击右上角\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101807.png)\n\n\n- 下载刚才提示的1.33版本\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108101832.png)\n\n\n- 下载完成后是一个hpi文件\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102109.png)\n\n\n## 导入插件\n- 到插件管理界面，找到Upload Plugin\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102152.png)\n\n- 然后选择刚才下载的插件，点击导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102223.png)\n\n- 可以看到插件正在导入\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102240.png)\n\n- 导入完成后，重启Jenkins就OK了\n![jenkins插件下载](http://cdn.mjava.top/blog/20191108102254.png)","slug":"jenkins/problem-jenkins-01","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez600192ag5s999sfyf"},{"title":"Jenkins初始化界面插件安装失败解决方法","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-07T09:19:52.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](http://cdn.mjava.top/blog/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](http://cdn.mjava.top/blog/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](http://cdn.mjava.top/blog/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](http://cdn.mjava.top/blog/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](http://cdn.mjava.top/blog/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](http://cdn.mjava.top/blog/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](http://cdn.mjava.top/blog/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](http://cdn.mjava.top/blog/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","source":"_posts/jenkins/problem-jenkins-02.md","raw":"---\ntitle: Jenkins初始化界面插件安装失败解决方法\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Jenkins\ncategories:\n  - Jenkins\ndate: 2019-11-07 17:19:52\npassword:\nsummary:\n---\n\n## 前言\n\n在初始化安装界面可能由于网络问题会出现插件下载失败，就像下面这个界面\n\n![Jenkins插件安装失败](http://cdn.mjava.top/blog/jenkins_error_2_20191107155729.png)\n\n别着急，直接点击继续，先完成初始化步骤。\n\n\n\n## 设置源\n\n- 插件下载失败，一般都是网络的原因，只要更换到国内的软件源就可以了，点击Manage Jenkins\n![Jenkins](http://cdn.mjava.top/blog/20191107162947.png)\n\n\n- 点击Correct\n![Jenkins](http://cdn.mjava.top/blog/20191107163016.png)\n\n\n- 点击Advanced\n![Jenkins](http://cdn.mjava.top/blog/20191107163040.png)\n\n\n- 下拉找到Update Site\n![Jenkins](http://cdn.mjava.top/blog/20191107163100.png)\n\n\n- 然后把输入框的内容换成\n\n```shell\nhttps://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/2.89/update-center.json\n```\n\n![Jenkins](http://cdn.mjava.top/blog/20191107165325.png)\n\n## 重新下载插件\n\n- 然后重新下载刚才那些下载失败的插件,这里随机选一个\n![Jenkins](http://cdn.mjava.top/blog/20191107165630.png)\n\n\n- 在刚才设置源的那个界面点击 Available，搜索插件，选择，点击install\n![Jenkins](http://cdn.mjava.top/blog/20191107165916.png)\n\n\n- 插件正在安装\n![Jenkins](http://cdn.mjava.top/blog/20191107165947.png)\n\n\n> 安装完全部插件后然后重启Jenkins，插件界面的报错信息才会消失;如果遇到插件下载不下来或搜不到，可以看这篇文章：[Jenkins插件版本太旧的更新方法](https://mjava.top/jenkins/problem-jenkins-01/)\n\n","slug":"jenkins/problem-jenkins-02","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez7001d2ag5b51h4uyg"},{"title":"树莓派安装docker","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-30T10:33:03.000Z","password":null,"summary":null,"_content":"\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","source":"_posts/linux/build-docker-pi.md","raw":"---\ntitle: 树莓派安装docker\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Linux\n  - Docker\n  - RaspberryPi\ncategories:\n  - Linux\ndate: 2019-08-30 18:33:03\npassword:\nsummary:\n---\n\n## 前言\n\n  和平常x86_64架构的电脑安装docker不同，树莓派是ARM架构的，所以安装步骤比较繁琐一点。\n\n\n\n##  使用APT源安装docker\n\n  更新apt软件源及安装必备组件。为了确认所下载软件包的合法性，还需要添加软件源的 GPG 密钥。\n\n```shell\n$sudo apt-get update\n$sudo apt-get install \\\n\t apt-transport-https \\\n     ca-certificates \\\n     curl \\\n     gnupg2 \\\n     lsb-release \\\n     software-properties-common\n$curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/raspbian/gpg | sudo apt-key add -\n```\n\n\n\n## 添加docker ce 软件源\n\n* 首先执行以下一行命令，然后记一下输出的结果\n\n  ```shell\n  $ echo $(lsb_release -cs)\n  stretch\n  ```\n\n* 在/etc/apt/sources.list.d目录下新建文件docker.list\n\n  ```shell\n  $ sudo vi /etc/apt/sources.list.d/docker.list\n  ```\n\n* 在文件里添加下面这行\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian $(lsb_release -cs) stable\n  ```\n\n* 把$(lsb_release -cs)改为刚才第一行输出的结果，比如我的输出的是stretch，改完后如下\n\n  ```shell\n  deb [arch=armhf] https://download.docker.com/linux/raspbian stretch stable\n  ```\n\n* 保存，退出\n\n  \n\n## 安装docker ce\n\n  依次执行以下两行命令，即可完成安装\n\n```shell\n$ sudo apt-get update\n$ sudo apt-get install docker-ce\n```\n\n\n\n## 启动\n\n```shell\n$ service docker start           启动\n$ service docker stop            停止\n$ service docker status          状态\n$ service docker restart         重启\n```","slug":"linux/build-docker-pi","published":1,"updated":"2019-11-14T07:34:38.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez8001h2ag5af2jefjz"},{"title":"JDK时区问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-08-27T07:26:30.000Z","password":null,"summary":null,"_content":"\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","source":"_posts/linux/problem-jdk-timezone.md","raw":"---\ntitle: JDK时区问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - Java\n  - Linux\ncategories:\n  - Linux\ndate: 2019-08-27 15:26:30\npassword:\nsummary:\n---\n\n\n今天碰到一个大坑，弄了快一个小时才解决掉；\n\n一个管理台后端服务，用docker隔离了三个容器，oracle,nginx,tomcat;后发现管理台查出来的时间和现实时间相差8个小时，一查是linux时区问题；\n\n---\n\n* 于是改之,三台容器都输入一下代码\n\n```shell\ncp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\n```\n\n测试了一下，发现问题docker容器的时区是正确了，可是问题并未得到解决，数据库时间还是慢了8个小时。\n\n---\n\n* 于是又查资料，换另外一种设置时区的方法；\n\n```shell\nvi /etc/sysconfig/clock\n```\n\n在里面输入如下内容\n\n```shell\nZONE=\"Asia/Shanghai\"\nUTC=false\nARC=false\n```\n\n保存，重启，测试。。。。。发现还是一样,快疯了\n\n---\n\n* 第三种方法，设置TZ环境变量\n\n> 设置环境变量可以在设置系统级别的/etc/profile  ,也可以设置用户级别的home目录的.bashrc。由于用的是docker，防止变量重启失效，只能在.bashrc里设置。在.bashrc加入如下内容：\n\n```shell\nexport TZ='CST-8'\n```\n\n保存：然后执行\n\n```shell\nsource .bashrc\n```\n\n使设置立即生效。\n\n重启容器，测试，发现时间正常了。。。。哈哈哈哈\n\n---\n\n## 总结\n\n上面问题出在jdk的new Date()方法，所以只要设置jdk所在的那个docker容器的变量就可以，不用每个都设置。jdk的new Date()方法每次调用都会去取环境变量TZ的时区，TZ是TimeZone的缩写，容器内部操作系统并未指定时区（TimeZone）信息，系统默认使用世界标准时（UTC+0),所以导致new Date()出来的数据存库会比当前时间慢8个小时；\n","slug":"linux/problem-jdk-timezone","published":1,"updated":"2019-11-14T07:14:56.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinez9001l2ag5z9w2cihg"},{"title":"RocketMQ集群搭建","top":true,"cover":false,"toc":true,"mathjax":true,"date":"2019-10-09T12:55:36.000Z","password":null,"summary":null,"_content":"\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](http://cdn.mjava.top/blog/rocketmq_console.png)","source":"_posts/rocketmq/rocketmq-cluster-build.md","raw":"---\ntitle: RocketMQ集群搭建\ntop: true\ncover: false\ntoc: true\nmathjax: true\ntags:\n  - RocketMQ\n  - Linux\ncategories:\n  - RocketMq\ndate: 2019-10-09 20:55:36\npassword:\nsummary:\n---\n\n  本文只讲RocketMQ集群的搭建(异步复制)，具体理论知识后续会在写新文章详细介绍;\n\n\n\n## 环境\n\n- JDK1.8\n- Centos7\n\n\n\n## 主机-两台\n\n- centos7_1 :172.16.54.130\n- centos7_2 :172.16.54.128\n\n\n\n## 软件资源\n\n- JDK1.8 :https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- RocketMQ4.5.2 :http://mirrors.tuna.tsinghua.edu.cn/apache/rocketmq/4.5.2/rocketmq-all-4.5.2-bin-release.zip\n\n\n\n## 安装JDK\n\n  首先分别在两台主机上安装JDK1.8，具体安装方法这里就不说了，网上随便搜一搜都有；\n\n\n\n## 配置RocketMQ\n\n  把下载的RocketMQ包分别上传到两台服务器上，然后用命令解压:\n\n  ```shell\n# unzip rocketmq-all-4.5.2-bin-release.zip\n  ```\n\n### 编写配置文件\n\n  这一步很重要，集群的搭建关键在于配置文件的编写，首先看看RocketMq配置文件的解析:\n\n```properties\n#所属集群名字 \nbrokerClusterName=rocketmq-cluster\n\n#broker名字，每队master和slave保持一致\nbrokerName=broker-a\n\n#0 表示 Master，>0 表示 Slave\nbrokerId=0 \n\n#指定主机ip\nbrokerIP1 = 主机IP\n\n#nameServer地址，分号分割\nnamesrvAddr=主机IP:9876;主机IP:9876\n\n#在发送消息时，自动创建服务器不存在的topic，默认创建的队列数 \ndefaultTopicQueueNums=4\n\n#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭 \nautoCreateTopicEnable=true\n\n#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭 \nautoCreateSubscriptionGroup=true\n\n#Broker 对外服务的监听端口 \nlistenPort=10911\n\n#删除文件时间点，默认凌晨 4点\n deleteWhen=04\n\n#文件保留时间，默认 48 小时 \nfileReservedTime=120\n\n#commitLog每个文件的大小默认1G \nmapedFileSizeCommitLog=1073741824\n\n#ConsumeQueue每个文件默认存30W条，根据业务情况调整\nmapedFileSizeConsumeQueue=300000\n\n#检测物理文件磁盘空间\ndiskMaxUsedSpaceRatio=88\n\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/store/checkpoint\n\n#Broker 的角色\n#- ASYNC_MASTER 异步复制Master\n#- SYNC_MASTER 同步双写Master\n#- SLAVE \nbrokerRole=ASYNC_MASTER\n\n#刷盘方式\n#- ASYNC_FLUSH 异步刷盘\n#- SYNC_FLUSH 同步刷盘 flushDiskType=ASYNC_FLUSH\n#checkTransactionMessageEnable=false\n\n#abort 文件存储路径\nabortFile=/usr/javawork/apache-rocketmq/store/abort\n\n#限制的消息大小 maxMessageSize=65536\n```\n\n以上配置可根据个人需求加入到自己的配置文件中；RocketMQ官方已经为我们创建好了简单的集群配置文件，进去解压后的文件夹，在进入到conf文件夹，可以看到里面有三个文件夹：\n\n- 2m-2s-async :2个master，2个slave，async异步复制\n- 2m-2s-sync :2个master，2个slave，sync同步双写\n- 2m-noslave :2个master,没有slave\n\n这里我们用async异步复制模式，进入文件夹，分别编辑：\n\n#### centos7_1主机编辑如下两个配置文件\n\n> 注意，master和slave的文件存储路径不能用同一个路径，所以必须要区分开。\n\n##### broker-a.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=0\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=ASYNC_MASTER\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=10911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/master/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/master/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/master/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/master/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/master/store/checkpoint\n```\n\n*这个监听端口设置设置成10911后还会自动监听10909,10912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n##### broker-a-s.properties\n\n```properties\nbrokerClusterName=DefaultCluster\nbrokerName=broker-a\nbrokerId=1\ndeleteWhen=04\nfileReservedTime=48\nbrokerRole=SLAVE\nflushDiskType=ASYNC_FLUSH\nnamesrvAddr=172.16.54.128:9876;172.16.54.130:9876\nlistenPort=20911\n#存储路径\nstorePathRootDir=/usr/local/rocketmq/slave/store\n#commitLog 存储路径 \nstorePathCommitLog=/usr/local/rocketmq/slave/store/commitlog\n#消费队列存储路径存储路径\nstorePathConsumeQueue=/usr/local/rocketmq/slave/store/consumequeue\n#消息索引存储路径\nstorePathIndex=/usr/local/rocketmq/slave/store/index\n#checkpoint 文件存储路径\nstoreCheckpoint=/usr/local/rocketmq/slave/store/checkpoint\n```\n\n*这个监听端口设置设置成20911后还会自动监听20909,20912这两个端口，所以要配置文件要避免设置到相应的端口。*\n\n\n\n#### centos7_2主机编辑如下两个配置文件\n\n##### 和centos7_1主机配置一样，这边就不写了，不过brokerName要设置成不同的，我这边设置成broker-b。\n\n\n\n## 设置RocketMQ运行的JVM内存(非必须)\n\n> 此项设置非必须，如果你主机内存很大的话可以不设置，RocketMQ默认要8G。\n\n  进入rocketmq-all-4.5.2-bin-release/bin目录，两台主机分别设置runbroker.sh和runserver.sh这两个文件。\n\n- runbroker.sh：找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms8g -Xmx8g -Xmn4g\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m\"\n```\n\n- runserver.sh: 找到如下一行配置\n\n```properties\nJAVA_OPT=\"${JAVA_OPT} -server -Xms4g -Xmx4g -Xmn2g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n\n改成：\nJAVA_OPT=\"${JAVA_OPT} -server -Xms512m -Xmx512m -Xmn256m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m\"\n```\n\n\n\n## 启动RocketMQ\n\n> 启动RocketMQ前为了方便访问，先关闭两台主机的防火墙。执行如下命令：\n>\n> ```shell\n> # service firewalld stop\n> ```\n>\n> \n\n  进入rocketmq-all-4.5.2-bin-release/bin这个目录，两台主机分别执行以下命令：\n\n- 启动namesrv\n\n```shell\n# nohup sh mqnamesrv &\n```\n\n- 启动broker-master\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a.properties &\n```\n\n- 启动broker-slave\n\n```shell\n# nohup sh mqbroker -c ../conf/2m-2s-async/broker-a-s.properties &\n```\n\n*注意两台主机启动broker时后面的-c记得加载你配置好的配置文件路径，别加载错了*\n\n\n\n## 搭建Console可视化控制台\n\n  任意一台机器或者本地下载Console源码，地址：https://github.com/apache/rocketmq-externals，或者有git的话直接用命令拉取：\n\n```shell\n# git clone https://github.com/apache/rocketmq-externals.git\n```\n\n进去目录：\n\n```shell\n# cd rocketmq-externals-master/rocketmq-console\n```\n\n修改配置文件：\n\n```shell\n# vim src/main/resources/application.properties\n```\n\n添加两个namesvr的主机ip\n\n```properties\nrocketmq.config.namesrvAddr=172.16.54.128:9876;172.16.54.130:9876\n```\n\n然后进项目跟目录，运行项目\n\n```shell\n# mvn sprint-boot:run\n```\n\n浏览器访问：\n\n![可视化Console界面](http://cdn.mjava.top/blog/rocketmq_console.png)","slug":"rocketmq/rocketmq-cluster-build","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zineza001o2ag5n6y4f8xq"},{"title":"RestTemplate简单使用","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-11-20T09:32:18.000Z","password":null,"summary":null,"keywords":null,"description":null,"_content":"\n\n\n## 前言\n\n​\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](http://cdn.mjava.top/blog/20191120165138.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](http://cdn.mjava.top/blog/20191120165302.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","source":"_posts/spring/spring-boot-resttemplate-example.md","raw":"---\ntitle: RestTemplate简单使用\ntop: false\ncover: false\ntoc: true\nmathjax: true\ndate: 2019-11-20 17:32:18\npassword:\nsummary:\nkeywords:\ndescription:\ntags:\n - SpringBoot\ncategories:\n - Spring\n---\n\n\n\n## 前言\n\n​\t本文只讲常用的**GET** 和**POST**请求,其他类型的请求(如**PUT**，**PATCH**)请求方式都差不多，有兴趣的可以查看RestTemplate源码。\n\n## GET\n\n> GET官方给了**getForEntity**和**getForObject**两种种方法，每个方法又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(String url, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T getForObject(URI url, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t<T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;\n```\n\n### 使用\n\n#### API接口\n\n>  首先我写了两个接口供RestTemplate调用\n\n```java\n@RestController\npublic class Test {\n\n    @GetMapping(\"/test\")\n    public JSONObject test(){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",\"Mr.Zheng\");\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n\n    @GetMapping(\"/test/{name}\")\n    public JSONObject test2(@PathVariable String name){\n        JSONObject jsonObject=new JSONObject();\n        jsonObject.put(\"name:\",name);\n        jsonObject.put(\"tag:\",\"Good\");\n        return jsonObject;\n    }\n    \n}\n```\n\n#### getForObject\n\n##### 代码\n\n```java\n\t@Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        String response=template.getForObject(uri, String.class);\n        System.out.println(response);\n\n        //url带参数请求 \n        String response2=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        String reponse3=template.getForObject(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3);\n    }\n```\n\n##### 结果:\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n#### getForEntity\n\n##### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n\n        //使用URI请求\n        URI uri=URI.create(\"http://localhost:8090/test\");\n        ResponseEntity<String> response=template.getForEntity(uri, String.class);\n        System.out.println(response.getBody());\n\n        //url带参数请求\n        ResponseEntity<String> response2=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,\"hui1\");\n        System.out.println(response2.getBody());\n\n        //当url参数过多可以用map\n        Map<String,String> param=new HashMap<>();\n        param.put(\"name\",\"hui2\");\n        ResponseEntity<String> reponse3=template.getForEntity(\"http://localhost:8090/test/{name}\",String.class,param);\n        System.out.println(reponse3.getBody());\n    }\n```\n\n\n\n##### 结果\n\n```java\n{\"name:\":\"Mr.Zheng\",\"tag:\":\"Good\"}\n{\"name:\":\"hui1\",\"tag:\":\"Good\"}\n{\"name:\":\"hui2\",\"tag:\":\"Good\"}\n```\n\n\n\n### 小结\n\n可以看到**getForEntity**和**getForObject**的使用方法差不多，他们的区别就是\n\n- getForObject只返回结果，getForEntity包装了返回的信息，可以从中获取更多关于http请求的信息，比如请求头，请求状态等\n\n## POST\n\n> POST官方给了**postForLocation**,**postForObject**,**postForEntity**三种方法，每种又有三个重载方法\n\n### 官方源码接口\n\n```java\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Object... uriVariables) throws RestClientException;\n\n\t@Nullable\n\tURI postForLocation(String url, @Nullable Object request, Map<String, ?> uriVariables)\n\t\t\tthrows RestClientException;\n\n\t@Nullable\n\tURI postForLocation(URI url, @Nullable Object request) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t@Nullable\n\t<T> T postForObject(URI url, @Nullable Object request, Class<T> responseType) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tObject... uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(String url, @Nullable Object request, Class<T> responseType,\n\t\t\tMap<String, ?> uriVariables) throws RestClientException;\n\n\t<T> ResponseEntity<T> postForEntity(URI url, @Nullable Object request, Class<T> responseType)\n\t\t\tthrows RestClientException;\n```\n\n\n\n### API接口\n\n```java\n@RestController\npublic class Test {\n    private static final Logger LOG= LoggerFactory.getLogger(Test.class);\n\n    @PostMapping(\"/test\")\n    public JSONObject test(@RequestBody JSONObject param){\n        LOG.info(\"param:{}\",param.toJSONString());\n        return param;\n    }\n\n    @PostMapping(\"/test/{urlParam}\")\n    public JSONObject test(@RequestBody JSONObject param,@PathVariable String urlParam){\n        LOG.info(\"param:{}\",param);\n        param.put(\"urlParam\",urlParam);\n        return param;\n    }\n    \n}\n```\n\n### postForObject\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"tag\",\"this is post request!!\");\n\n        //使用URI请求\n        URI uri=URI.create(baseURL+\"/test\");\n        String response=template.postForObject(uri,param,String.class);\n        System.out.println(response);\n\n        //url带参数请求\n        String response2=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,\"this is urlParam\");\n        System.out.println(response2);\n\n        //当url参数过多可以用map\n        Map<String,String> mapParam=new HashMap<>();\n        mapParam.put(\"urlParam\",\"this is map param!!\");\n        String reponse3=template.postForObject(baseURL+\"/test/{urlParam}\",param,String.class,mapParam);\n        System.out.println(reponse3);\n    }\n```\n\n#### 结果\n\n```java\n{\"tag\":\"this is post request!!\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is urlParam\"}\n{\"tag\":\"this is post request!!\",\"urlParam\":\"this is map param!!\"}\n```\n\n\n\n### postForEntity\n\n> postForEntity和postForObject用法类似，具体这里就写了。\n\n\n\n### postForLocation\n\n> 这个请求和其他请求不一样，可以看到他返回的是URI，这里具体讲一下\n\n#### 新写个API接口\n\n```java\n@RestController\npublic class UriTest {\n    private static final Logger LOG= LoggerFactory.getLogger(UriTest.class);\n\n    @PostMapping(\"/uri\")\n    public void uriTest(@RequestBody JSONObject param, HttpServletResponse response) throws IOException {\n        try {\n            //打印上传的参数\n            LOG.info(\"requestParam:{}\",param);\n            //跳转百度\n            response.sendRedirect(\"https://www.baidu.com\");\n        }catch (Exception e){\n            LOG.info(e.getMessage(),e);\n        }\n    }\n}\n```\n\n#### 代码\n\n```java\n    @Test\n    public void restTemplate(){\n        RestTemplate template=new RestTemplate();\n        String baseURL=\"http://localhost:8090\";\n        JSONObject param=new JSONObject();\n        param.put(\"info\",\"this is postForLocation test!!\");\n\n        URI response2=template.postForLocation(baseURL+\"/uri\",param);\n        System.out.println(response2);\n    }\n```\n\n#### 结果\n\n![代码运行结果](http://cdn.mjava.top/blog/20191120165138.png)\n\n\n\n#### 服务端日志\n\n![服务端日志](http://cdn.mjava.top/blog/20191120165302.png)\n\n### 小结\n\n**postForObject**和**postForEntity**两个方法和GET请求的用法差不多，只是POST请求比GET请求多了个request请求体。而**postForLocation**方法一般用的比较少,一般只有后端发生301或302等跳转时用来获取跳转后的URL，方法的形参中不用定义返回的数据类型，默认是URI；","slug":"spring/spring-boot-resttemplate-example","published":1,"updated":"2019-12-07T10:32:40.434Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinezb001r2ag51en7raka"},{"title":"Vue Cli3-11创建项目慢的问题","top":false,"cover":false,"toc":true,"mathjax":true,"date":"2019-09-05T08:33:23.000Z","password":null,"summary":null,"_content":"## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","source":"_posts/vue/vue-cli3-11-problem.md","raw":"---\ntitle: Vue Cli3-11创建项目慢的问题\ntop: false\ncover: false\ntoc: true\nmathjax: true\ncategories:\n  - Vue\ntags:\n  - Vue\n  - Pit\ndate: 2019-09-05 16:33:23\npassword:\nsummary:\n---\n## 前言\n\n  这几天刚学习vue，于是下载了最新的vue cli3.11来搭建项目，可是搭建的时候一直卡在下载插件见面，就是下面这张图。\n\n![vuecreate](/images/vuecreate.png)\n\n网上查了说不能用国内的镜像，WTF，不是说国内的更快吗？好吧，我换！！！\n\n## 下载nrm\n\n  看清楚哦，是nrm部署npm！！！nrm 是一个 `npm` 源管理器，允许你快速地在 `npm` 源间切换。执行以下命令安装。\n\n```shell\nsudo npm install -g nrm\n```\n\n### 测试nrm是否安装成功\n\n```shell\nnrm -V\n```\n\n如果输出版本号，则说明安装成功。\n\n## 切换npm源\n\n  ```shell\nnrm ls\n  ```\n\n此命令会列出npm的所有源\n\n![nrmls](/images/nrmls.png)\n\n可以看到我现在使用的是淘宝的源，现在把他切换到npm的源。\n\n```shell\nnrm use npm\n```\n\n![nrmuse](/images/nrmuse.png)\n\n## 再次创建vue项目\n\n```shell\nvue create rrr2\n```\n![vuecreate2](/images/vuecreate2.png)\n![vuecreate3](/images/vuecreate3.png)\n\n项目成功创建！！！\n","slug":"vue/vue-cli3-11-problem","published":1,"updated":"2019-11-14T13:38:37.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck3zinezs003e2ag5jkvkd30e"}],"PostAsset":[],"PostCategory":[{"post_id":"ck3zinexh00032ag5mseak12d","category_id":"ck3zinexm00052ag5enx3s7bc","_id":"ck3zinexo00092ag525638hc8"},{"post_id":"ck3zineys000b2ag5eptht1g1","category_id":"ck3zineyv000d2ag5x5cg3k0k","_id":"ck3zineyz000n2ag592zerjxv"},{"post_id":"ck3zineyu000c2ag5l2dh0vj2","category_id":"ck3zineyx000i2ag5xew99stc","_id":"ck3zinez1000t2ag5kas0q8t2"},{"post_id":"ck3zineyz000r2ag5ejjcoh26","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinez4000z2ag56b2i71g2"},{"post_id":"ck3zineyv000f2ag51x9wkha2","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinez500132ag56dxic7rv"},{"post_id":"ck3zinez0000s2ag5w93c2o5j","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinez600162ag5pvwpg2j6"},{"post_id":"ck3zineyw000g2ag5ccqkezg1","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinez7001a2ag5xo6hib8n"},{"post_id":"ck3zinez400122ag5f3zx0vg5","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinez8001e2ag5wbq075n0"},{"post_id":"ck3zineyw000h2ag54yju2k4t","category_id":"ck3zinez400102ag5b78kocm0","_id":"ck3zinez9001i2ag58ljc61oq"},{"post_id":"ck3zineyx000l2ag5041rc5kd","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zineza001n2ag55j8ire7f"},{"post_id":"ck3zineyy000m2ag5ywpd0uce","category_id":"ck3zineyz000o2ag54m5oqwer","_id":"ck3zinezc001t2ag5vkbkxkn8"},{"post_id":"ck3zinez2000x2ag5cs9sw14h","category_id":"ck3zineza001m2ag5homo2g7k","_id":"ck3zinezd001z2ag5md9a4ar8"},{"post_id":"ck3zinez3000y2ag5q2goj7iz","category_id":"ck3zineza001m2ag5homo2g7k","_id":"ck3zineze00242ag51o4zukh6"},{"post_id":"ck3zinez500152ag5fwxo4qd9","category_id":"ck3zineza001m2ag5homo2g7k","_id":"ck3zinezf00282ag5mga8foth"},{"post_id":"ck3zinez600192ag5s999sfyf","category_id":"ck3zineza001m2ag5homo2g7k","_id":"ck3zinezg002c2ag5eh359zgd"},{"post_id":"ck3zinez7001d2ag5b51h4uyg","category_id":"ck3zineza001m2ag5homo2g7k","_id":"ck3zinezg002e2ag5grgqkm6v"},{"post_id":"ck3zinez8001h2ag5af2jefjz","category_id":"ck3zinezf002b2ag5d2np1l7b","_id":"ck3zinezh002k2ag5cxniyw85"},{"post_id":"ck3zinez9001l2ag5z9w2cihg","category_id":"ck3zinezf002b2ag5d2np1l7b","_id":"ck3zinezh002o2ag58656wij6"},{"post_id":"ck3zineza001o2ag5n6y4f8xq","category_id":"ck3zinezg002j2ag5g3jivn07","_id":"ck3zinezi002s2ag5mv5xvbxh"},{"post_id":"ck3zinezb001r2ag51en7raka","category_id":"ck3zinezh002p2ag59cs91nof","_id":"ck3zinezi002u2ag5yq1wtsok"},{"post_id":"ck3zinezs003e2ag5jkvkd30e","category_id":"ck3zinezt003f2ag5eh9oq5ya","_id":"ck3zinezu003j2ag506huq9pf"}],"PostTag":[{"post_id":"ck3zinexh00032ag5mseak12d","tag_id":"ck3zinexn00062ag5ctx11i4m","_id":"ck3zinexo00082ag5ahueb0c4"},{"post_id":"ck3zineyw000g2ag5ccqkezg1","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zineyx000k2ag5ptn1iieg"},{"post_id":"ck3zineyx000l2ag5041rc5kd","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zineyz000q2ag52lhdzguc"},{"post_id":"ck3zineyz000r2ag5ejjcoh26","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zinez1000w2ag5e7rrsx5e"},{"post_id":"ck3zineys000b2ag5eptht1g1","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zinez500142ag5tv0um6a0"},{"post_id":"ck3zineys000b2ag5eptht1g1","tag_id":"ck3zineyx000j2ag59ws742ug","_id":"ck3zinez600172ag5gb79kgdw"},{"post_id":"ck3zineys000b2ag5eptht1g1","tag_id":"ck3zineyz000p2ag5rfzbul2o","_id":"ck3zinez7001c2ag5xdsay368"},{"post_id":"ck3zineys000b2ag5eptht1g1","tag_id":"ck3zinez1000v2ag5av4mu34y","_id":"ck3zinez8001f2ag50aqq4qjm"},{"post_id":"ck3zinez400122ag5f3zx0vg5","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zinez9001k2ag5p1924vf9"},{"post_id":"ck3zinez9001l2ag5z9w2cihg","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zinezb001q2ag58a5vongw"},{"post_id":"ck3zinez9001l2ag5z9w2cihg","tag_id":"ck3zinez9001j2ag511et92p7","_id":"ck3zinezc001s2ag51om0sy2f"},{"post_id":"ck3zineyu000c2ag5l2dh0vj2","tag_id":"ck3zinez400112ag577zq51ph","_id":"ck3zinezd001w2ag565c5f07f"},{"post_id":"ck3zineyu000c2ag5l2dh0vj2","tag_id":"ck3zinez7001b2ag5eouv6f8x","_id":"ck3zinezd001x2ag5w44imnmh"},{"post_id":"ck3zineyu000c2ag5l2dh0vj2","tag_id":"ck3zinez9001j2ag511et92p7","_id":"ck3zineze00202ag5587vzwjo"},{"post_id":"ck3zineyv000f2ag51x9wkha2","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zineze00222ag5w30x3cz1"},{"post_id":"ck3zineyw000h2ag54yju2k4t","tag_id":"ck3zinezd001v2ag5kp0vtf3i","_id":"ck3zinezf00262ag5lf25d2qi"},{"post_id":"ck3zineyw000h2ag54yju2k4t","tag_id":"ck3zineze00212ag5xz64xwdd","_id":"ck3zinezf00292ag5efko37t6"},{"post_id":"ck3zineyy000m2ag5ywpd0uce","tag_id":"ck3zineyv000e2ag5aq5mlakt","_id":"ck3zinezg002g2ag5igpm68np"},{"post_id":"ck3zineyy000m2ag5ywpd0uce","tag_id":"ck3zineze00252ag5os0d8hgl","_id":"ck3zinezg002h2ag5zjr5xabt"},{"post_id":"ck3zineyy000m2ag5ywpd0uce","tag_id":"ck3zinezf002a2ag5p8omx07w","_id":"ck3zinezh002l2ag5mj16lpbz"},{"post_id":"ck3zinez0000s2ag5w93c2o5j","tag_id":"ck3zinezg002d2ag574et7ubz","_id":"ck3zinezh002m2ag5xdiqypm4"},{"post_id":"ck3zinez2000x2ag5cs9sw14h","tag_id":"ck3zinezg002i2ag5fjp7uh6m","_id":"ck3zinezh002q2ag5rq0qryxv"},{"post_id":"ck3zinez3000y2ag5q2goj7iz","tag_id":"ck3zinezg002i2ag5fjp7uh6m","_id":"ck3zinezj002w2ag5cgw64yof"},{"post_id":"ck3zinez3000y2ag5q2goj7iz","tag_id":"ck3zinez400112ag577zq51ph","_id":"ck3zinezj002x2ag51jjzt2yj"},{"post_id":"ck3zinez3000y2ag5q2goj7iz","tag_id":"ck3zinez9001j2ag511et92p7","_id":"ck3zinezj002z2ag5eii5v9uc"},{"post_id":"ck3zinez500152ag5fwxo4qd9","tag_id":"ck3zinezg002i2ag5fjp7uh6m","_id":"ck3zinezj00302ag5uceqrb3a"},{"post_id":"ck3zinez600192ag5s999sfyf","tag_id":"ck3zinezg002i2ag5fjp7uh6m","_id":"ck3zinezk00322ag5d59a39uv"},{"post_id":"ck3zinez7001d2ag5b51h4uyg","tag_id":"ck3zinezg002i2ag5fjp7uh6m","_id":"ck3zinezk00342ag5phmqb2zz"},{"post_id":"ck3zinez8001h2ag5af2jefjz","tag_id":"ck3zinez9001j2ag511et92p7","_id":"ck3zinezk00372ag5i5ullni0"},{"post_id":"ck3zinez8001h2ag5af2jefjz","tag_id":"ck3zinez400112ag577zq51ph","_id":"ck3zinezl00382ag5ci3hh96v"},{"post_id":"ck3zinez8001h2ag5af2jefjz","tag_id":"ck3zinezk00352ag5bsuezy6l","_id":"ck3zinezl003a2ag56353dfv0"},{"post_id":"ck3zineza001o2ag5n6y4f8xq","tag_id":"ck3zinezk00362ag5p5wm30n5","_id":"ck3zinezl003b2ag5ik2uiuew"},{"post_id":"ck3zineza001o2ag5n6y4f8xq","tag_id":"ck3zinez9001j2ag511et92p7","_id":"ck3zinezl003c2ag5ftcm0p9u"},{"post_id":"ck3zinezb001r2ag51en7raka","tag_id":"ck3zinezl00392ag5luhkqchp","_id":"ck3zinezl003d2ag5d8v7usep"},{"post_id":"ck3zinezs003e2ag5jkvkd30e","tag_id":"ck3zinezt003g2ag5sw4n173x","_id":"ck3zinezu003h2ag5yigcnguq"},{"post_id":"ck3zinezs003e2ag5jkvkd30e","tag_id":"ck3zinezf002a2ag5p8omx07w","_id":"ck3zinezu003i2ag5h6sv639v"}],"Tag":[{"name":"Test","_id":"ck3zinexn00062ag5ctx11i4m"},{"name":"Java","_id":"ck3zineyv000e2ag5aq5mlakt"},{"name":"Recursive","_id":"ck3zineyx000j2ag59ws742ug"},{"name":"Algorithm","_id":"ck3zineyz000p2ag5rfzbul2o"},{"name":"Json","_id":"ck3zinez1000v2ag5av4mu34y"},{"name":"Docker","_id":"ck3zinez400112ag577zq51ph"},{"name":"Mysql","_id":"ck3zinez7001b2ag5eouv6f8x"},{"name":"Linux","_id":"ck3zinez9001j2ag511et92p7"},{"name":"GOF","_id":"ck3zinezd001v2ag5kp0vtf3i"},{"name":"Singleton","_id":"ck3zineze00212ag5xz64xwdd"},{"name":"Base64","_id":"ck3zineze00252ag5os0d8hgl"},{"name":"Pit","_id":"ck3zinezf002a2ag5p8omx07w"},{"name":"Nacos","_id":"ck3zinezg002d2ag574et7ubz"},{"name":"Jenkins","_id":"ck3zinezg002i2ag5fjp7uh6m"},{"name":"RaspberryPi","_id":"ck3zinezk00352ag5bsuezy6l"},{"name":"RocketMQ","_id":"ck3zinezk00362ag5p5wm30n5"},{"name":"SpringBoot","_id":"ck3zinezl00392ag5luhkqchp"},{"name":"Vue","_id":"ck3zinezt003g2ag5sw4n173x"}]}}